#! armcc -E

#define RAM_BASE                0x00100000
#define RAM_LIMIT               0x00130000
#define EM_START                0x00128000
#define EM_END                  0x00129dc6
#define ROM_CODE_ZI_BASE        0x0012f5cc
#define ISR_JUMP_TABLE_SIZE     0x100
#define DUMMY_ADDR              0x10000000
#define FLASH_MAPPED_ADDR       0x00800000
#define IMAGE_OFFSET_IN_FLASH   0x1000
#define IMAGE_HEADER_SIZE       0x80
#define IMAGE_BASE_IN_FLASH     ((FLASH_MAPPED_ADDR)+(IMAGE_OFFSET_IN_FLASH)+(IMAGE_HEADER_SIZE))


LR_FLASH1 IMAGE_BASE_IN_FLASH{
    FLASH_CODE +0{
        *(xip_section)
        ;*(+RO)
    #include "mesh_link.txt"
    #include "jmesh_link.txt"
    }
} 

LR_RAM1 RAM_BASE ALIGN 0x80{
    RAM_CODE +0 {
        *(RESET, +First)
        *(jump_table_area)
    }
    RAM_CODE_2 +0 {
        *(InRoot$$Sections)
        *(n_xip_section)
        *(n_xip_variable)
        SEGGER_RTT*(+RO)
        bx_dbg.o(+RO)
        port.o(+RO)
        queue.o(+RO)
        tasks.o(+RO)
        list.o(+RO)
        *(:gdef:main)
        *(+RO)
        *(+RW)
    }
}


LR_RAM2 ImageLimit(RAM_CODE_2) ALIGN 0x4
{
    BSS +0
    {
        *(+ZI)
    }
    HEAP_STACK +0 UNINIT
    {
        *(HEAP)
        *(STACK)
    } 
    ScatterAssert(ImageLimit(HEAP_STACK)<=EM_START)
    SECTION_RTT AlignExpr(EM_END,0x4) {
        *(SECTION_RTT, +First)
    }
    RWIP_ENV +0
    {
        rwip.o(+ZI)
    }
    //RTOS_ZI_ENV +0
    //{
    //    os_bridge.o(+ZI)
    //    ble_task.o(+ZI)
    //    osapp_task.o(+ZI)
    //    task_init.o(+ZI)
    //    timers.o(+ZI)
    //    tasks.o(+ZI)
    //}
    DBG_LOG_ZI_ENV +0
    {
        SEGGER_RTT.o(+ZI)
        bx_dbg.o(+ZI)
    }
    BOOT_PARAMS +0 UNINIT{
        *(boot_tunnel)
    }
    RAM_UNLOADED +0 EMPTY 4
    {
    }
    ScatterAssert(ImageLimit(RAM_UNLOADED)<=ROM_CODE_ZI_BASE)
}




LR_FLASH2 DUMMY_ADDR
{
    NVDS_AREA +0 PADVALUE 0xffffffff 
    {
        *(nvds_area)
    }
}
