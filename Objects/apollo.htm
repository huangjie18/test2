<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\apollo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\apollo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Nov 29 14:15:07 2019
<BR><P>
<H3>Maximum Stack Usage =       2136 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_set_meter_handler &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c6]">NMI_Handler</a><BR>
 <LI><a href="#[3dd]">jmesh_adapter_gatt_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26e]">_print</a><BR>
 <LI><a href="#[3a3]">jmesh_gatt_trigger_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26e]">_print</a><BR>
 <LI><a href="#[3a4]">jmesh_ble_gatt_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26e]">_print</a><BR>
 <LI><a href="#[36f]">jmesh_ble_gatt_notify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26e]">_print</a><BR>
 <LI><a href="#[415]">os_buffer_queue_pop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26e]">_print</a><BR>
 <LI><a href="#[27a]">app_transmission_uart_callback_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[207]">APP_BD_protocol_handler_callback</a><BR>
 <LI><a href="#[20a]">APP_BD_B101_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20b]">read_meter_handler</a><BR>
 <LI><a href="#[46c]">bx_delay_asm</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46c]">bx_delay_asm</a><BR>
 <LI><a href="#[3b3]">jmesh_network_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ad]">jmesh_lower_recv</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[cc]">BLE_LP_IRQHandler</a> from sys_sleep.o(i.BLE_LP_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[cd]">BLE_MAC_IRQHandler</a> from bx_rwble.o(n_xip_section) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d1]">DMAC_IRQHandler</a> from dmac_integration.o(i.DMAC_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d0]">ECC_IRQHandler</a> from hwecc_integration.o(i.ECC_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[cf]">EXT_INTR_IRQHandler</a> from io_ctrl.o(i.EXT_INTR_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[da]">GPIO_IRQHandler</a> from gpio_integration.o(i.GPIO_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[c7]">HardFault_Handler</a> from bx_dbg.o(n_xip_section) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d8]">IIC0_IRQHandler</a> from iic_integration.o(i.IIC0_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d9]">IIC1_IRQHandler</a> from iic_integration.o(i.IIC1_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[141]">LLD_EVT_DRIFT_COMPUTE_PATCH</a> from rc32k_patch_asm.o(.text) referenced from rc32k_patch.o(i.set_rc32k_patch)
 <LI><a href="#[13f]">LLD_PDU_TX_FLUSH_LIST_PATCH</a> from lld_pdu_tx_flush_list_patch_asm.o(.text) referenced from lld_pdu_tx_flush_list_patch.o(i.set_lld_pdu_tx_flush_patch)
 <LI><a href="#[c6]">NMI_Handler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[dd]">PGSPY_IRQHandler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[c9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d2]">QSPI_IRQHandler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[ce]">RTC_IRQHandler</a> from task_init.o(n_xip_section) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[c5]">Reset_Handler</a> from startup_apollo_00.o(n_xip_section) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[dc]">SFT_IRQHandler</a> from swint.o(i.SFT_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d3]">SPIM0_IRQHandler</a> from spi_integration.o(i.SPIM0_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d4]">SPIM1_IRQHandler</a> from spi_integration.o(i.SPIM1_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d5]">SPIS_IRQHandler</a> from spi_integration.o(i.SPIS_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[c8]">SVC_Handler</a> from svcall_asm.o(n_xip_section) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[16d]">SVC_Handler_C</a> from svcall.o(i.SVC_Handler_C) referenced from svcall_asm.o(n_xip_section)
 <LI><a href="#[ca]">SysTick_Handler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[16b]">SystemInit</a> from arch_init.o(n_xip_section) referenced from startup_apollo_00.o(n_xip_section)
 <LI><a href="#[db]">TIMER_IRQHandler</a> from timer_integration.o(i.TIMER_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d6]">UART0_IRQHandler</a> from uart_integration.o(i.UART0_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d7]">UART1_IRQHandler</a> from uart_integration.o(i.UART1_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[cb]">WDT_IRQHandler</a> from wdt_integration.o(i.WDT_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[1b]">_470_report_overtime_handler</a> from _470_app.o(i._470_report_overtime_handler) referenced from _470_app.o(i.report_by_470)
 <LI><a href="#[16c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_apollo_00.o(n_xip_section)
 <LI><a href="#[f4]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[f4]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[110]">app_broadcast_data_handler</a> from jmesh_app_pro.o(i.app_broadcast_data_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[5]">app_conn_adv_send</a> from app_protocol.o(i.app_conn_adv_send) referenced from app_protocol.o(i.app_conn_adv_send)
 <LI><a href="#[5]">app_conn_adv_send</a> from app_protocol.o(i.app_conn_adv_send) referenced from app_protocol.o(i.app_conn_adv_start)
 <LI><a href="#[1ec]">app_dmac_init</a> from app_dmac.o(i.app_dmac_init) referenced from app_dmac_wrapper.o(.data)
 <LI><a href="#[101]">app_expand1_device_server_info_get_handler</a> from app_expand1_device_server.o(i.app_expand1_device_server_info_get_handler) referenced from app_expand1_device_server.o(i.jmesh_app_expand1_device_server_init)
 <LI><a href="#[102]">app_expand1_device_server_report_bind_handler</a> from app_expand1_device_server.o(i.app_expand1_device_server_report_bind_handler) referenced from app_expand1_device_server.o(i.jmesh_app_expand1_device_server_init)
 <LI><a href="#[104]">app_expand1_device_server_report_handler</a> from app_expand1_device_server.o(i.app_expand1_device_server_report_handler) referenced from app_expand1_device_server.o(i.jmesh_app_expand1_device_server_init)
 <LI><a href="#[103]">app_expand1_device_server_report_unbind_handler</a> from app_expand1_device_server.o(i.app_expand1_device_server_report_unbind_handler) referenced from app_expand1_device_server.o(i.jmesh_app_expand1_device_server_init)
 <LI><a href="#[10e]">app_gateway_read_meter_handler</a> from app_expand2_realcomm_server.o(i.app_gateway_read_meter_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[1e7]">app_gpio_init</a> from app_gpio.o(i.app_gpio_init) referenced from io_ctrl.o(.data)
 <LI><a href="#[1ed]">app_hwecc_init</a> from app_hwecc.o(i.app_hwecc_init) referenced from app_hwecc_wrapper.o(.data)
 <LI><a href="#[10f]">app_network_maintain_handler</a> from jmesh_app_pro.o(i.app_network_maintain_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[6]">app_network_maintain_timer_handler</a> from jmesh_app_pro.o(i.app_network_maintain_timer_handler) referenced from jmesh_app_pro.o(i.app_network_maintain_start)
 <LI><a href="#[1f7]">app_pwm_init</a> from app_pwm.o(i.app_pwm_init) referenced 5 times from bx2400_pwm.o(.data)
 <LI><a href="#[1ee]">app_qspi_init</a> from app_qspi.o(n_xip_section) referenced from app_qspi_wrapper.o(.data)
 <LI><a href="#[112]">app_read_meter_by_node_handler</a> from app_protocol.o(i.app_read_meter_by_node_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[2]">app_read_meter_by_node_repeat_timer_handler</a> from app_protocol.o(i.app_read_meter_by_node_repeat_timer_handler) referenced from app_protocol.o(i.APP_BD_B406_handler)
 <LI><a href="#[113]">app_read_meter_by_node_return_handler</a> from app_protocol.o(i.app_read_meter_by_node_return_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[7]">app_read_meter_by_node_uart_timer_handler</a> from app_protocol.o(i.app_read_meter_by_node_uart_timer_handler) referenced from app_protocol.o(i.app_read_meter_by_node_handler)
 <LI><a href="#[108]">app_realcomm_server_baudrate_set_handler</a> from app_expand2_realcomm_server.o(i.app_realcomm_server_baudrate_set_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[109]">app_realcomm_server_report_set_handler</a> from app_expand2_realcomm_server.o(i.app_realcomm_server_report_set_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[10b]">app_realcomm_server_trans_handler</a> from app_expand2_realcomm_server.o(i.app_realcomm_server_trans_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[10a]">app_realcomm_server_transparent_handler</a> from app_expand2_realcomm_server.o(i.app_realcomm_server_transparent_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[111]">app_set_meter_handler</a> from jmesh_app_pro.o(i.app_set_meter_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[8]">app_task_timer_handler</a> from jmesh_app_pro.o(i.app_task_timer_handler) referenced from jmesh_app_pro.o(i.app_task_timer_start)
 <LI><a href="#[1f9]">app_uart_init</a> from app_uart.o(i.app_uart_init) referenced 2 times from bx2400_uart.o(.data)
 <LI><a href="#[1f8]">app_wdt_init</a> from app_wdt.o(i.app_wdt_init) referenced from bx2400_system.o(.data)
 <LI><a href="#[70]">at_cmd_add_appkey</a> from configuration_cmd.o(i.at_cmd_add_appkey) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[6e]">at_cmd_add_netkey</a> from configuration_cmd.o(i.at_cmd_add_netkey) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[76]">at_cmd_add_subscribe</a> from configuration_cmd.o(i.at_cmd_add_subscribe) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[64]">at_cmd_at_test</a> from configuration_cmd.o(i.at_cmd_at_test) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[72]">at_cmd_bind</a> from configuration_cmd.o(i.at_cmd_bind) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[77]">at_cmd_del_subscribe</a> from configuration_cmd.o(i.at_cmd_del_subscribe) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[8c]">at_cmd_echo</a> from configuration_cmd.o(i.at_cmd_echo) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[8a]">at_cmd_end_pwm</a> from configuration_cmd.o(i.at_cmd_end_pwm) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[88]">at_cmd_exit_ota</a> from configuration_cmd.o(i.at_cmd_exit_ota) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a9]">at_cmd_gate_get_history</a> from configuration_cmd.o(i.at_cmd_gate_get_history) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a5]">at_cmd_gate_get_param</a> from configuration_cmd.o(i.at_cmd_gate_get_param) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[aa]">at_cmd_gate_list_history</a> from configuration_cmd.o(i.at_cmd_gate_list_history) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a6]">at_cmd_gate_list_node</a> from configuration_cmd.o(i.at_cmd_gate_list_node) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a4]">at_cmd_gate_set_param</a> from configuration_cmd.o(i.at_cmd_gate_set_param) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a7]">at_cmd_gate_val_by_addr</a> from configuration_cmd.o(i.at_cmd_gate_val_by_addr) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a8]">at_cmd_gate_val_by_mac</a> from configuration_cmd.o(i.at_cmd_gate_val_by_mac) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[6d]">at_cmd_get_addr</a> from configuration_cmd.o(i.at_cmd_get_addr) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[71]">at_cmd_get_appkey</a> from configuration_cmd.o(i.at_cmd_get_appkey) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[74]">at_cmd_get_bind</a> from configuration_cmd.o(i.at_cmd_get_bind) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[b1]">at_cmd_get_con_rd</a> from configuration_cmd.o(i.at_cmd_get_con_rd) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[7c]">at_cmd_get_connected</a> from configuration_cmd.o(i.at_cmd_get_connected) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[86]">at_cmd_get_dBm</a> from configuration_cmd.o(i.at_cmd_get_dBm) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[84]">at_cmd_get_feature</a> from configuration_cmd.o(i.at_cmd_get_feature) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[7f]">at_cmd_get_iv_index</a> from configuration_cmd.o(i.at_cmd_get_iv_index) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[ae]">at_cmd_get_lowpower_para</a> from configuration_cmd.o(i.at_cmd_get_lowpower_para) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[6a]">at_cmd_get_mac</a> from configuration_cmd.o(i.at_cmd_get_mac) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[7b]">at_cmd_get_neighbor</a> from configuration_cmd.o(i.at_cmd_get_neighbor) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[6f]">at_cmd_get_netkey</a> from configuration_cmd.o(i.at_cmd_get_netkey) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[75]">at_cmd_get_para</a> from configuration_cmd.o(i.at_cmd_get_para) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[90]">at_cmd_get_pwm</a> from configuration_cmd.o(i.at_cmd_get_pwm) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[ac]">at_cmd_get_role</a> from configuration_cmd.o(i.at_cmd_get_role) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[7d]">at_cmd_get_route</a> from configuration_cmd.o(i.at_cmd_get_route) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[78]">at_cmd_get_subscribe</a> from configuration_cmd.o(i.at_cmd_get_subscribe) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[b0]">at_cmd_get_timer</a> from configuration_cmd.o(i.at_cmd_get_timer) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[65]">at_cmd_get_version</a> from configuration_cmd.o(i.at_cmd_get_version) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[8f]">at_cmd_iopull</a> from configuration_cmd.o(i.at_cmd_iopull) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[8e]">at_cmd_ioread</a> from configuration_cmd.o(i.at_cmd_ioread) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[8d]">at_cmd_iowrite</a> from configuration_cmd.o(i.at_cmd_iowrite) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[82]">at_cmd_light_mode</a> from configuration_cmd.o(i.at_cmd_light_mode) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[b6]">at_cmd_light_switch</a> from configuration_cmd.o(i.at_cmd_light_switch) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[6b]">at_cmd_onoff_log</a> from configuration_cmd.o(i.at_cmd_onoff_log) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[af]">at_cmd_pdu_log</a> from configuration_cmd.o(i.at_cmd_pdu_log) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[66]">at_cmd_reset</a> from configuration_cmd.o(i.at_cmd_reset) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[67]">at_cmd_restore_default</a> from configuration_cmd.o(i.at_cmd_restore_default) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[91]">at_cmd_send_ascii</a> from configuration_cmd.o(i.at_cmd_send_ascii) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[79]">at_cmd_send_hex</a> from configuration_cmd.o(i.at_cmd_send_hex) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[7a]">at_cmd_send_meter_cmd</a> from configuration_cmd.o(i.at_cmd_send_meter_cmd) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[63]">at_cmd_send_trans</a> from configuration_cmd.o(i.at_cmd_send_trans) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[6c]">at_cmd_set_addr</a> from configuration_cmd.o(i.at_cmd_set_addr) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[68]">at_cmd_set_baud</a> from configuration_cmd.o(i.at_cmd_set_baud) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[85]">at_cmd_set_dBm</a> from configuration_cmd.o(i.at_cmd_set_dBm) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[83]">at_cmd_set_feature</a> from configuration_cmd.o(i.at_cmd_set_feature) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[8b]">at_cmd_set_gpio</a> from configuration_cmd.o(i.at_cmd_set_gpio) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[7e]">at_cmd_set_iv_index</a> from configuration_cmd.o(i.at_cmd_set_iv_index) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[81]">at_cmd_set_light_mode</a> from configuration_cmd.o(i.at_cmd_set_light_mode) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[ad]">at_cmd_set_lowpower_para</a> from configuration_cmd.o(i.at_cmd_set_lowpower_para) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[69]">at_cmd_set_mac</a> from configuration_cmd.o(i.at_cmd_set_mac) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[ab]">at_cmd_set_role</a> from configuration_cmd.o(i.at_cmd_set_role) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[87]">at_cmd_start_ota</a> from configuration_cmd.o(i.at_cmd_start_ota) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[89]">at_cmd_start_pwm</a> from configuration_cmd.o(i.at_cmd_start_pwm) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[b5]">at_cmd_test_app_init</a> from configuration_cmd.o(i.at_cmd_test_app_init) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[b4]">at_cmd_test_app_result</a> from configuration_cmd.o(i.at_cmd_test_app_result) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[b2]">at_cmd_test_app_start</a> from configuration_cmd.o(i.at_cmd_test_app_start) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[b3]">at_cmd_test_app_stop</a> from configuration_cmd.o(i.at_cmd_test_app_stop) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[73]">at_cmd_unbind</a> from configuration_cmd.o(i.at_cmd_unbind) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[80]">at_cmd_update_iv_index</a> from configuration_cmd.o(i.at_cmd_update_iv_index) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a1]">at_cmd_water_get_mac</a> from configuration_cmd.o(i.at_cmd_water_get_mac) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[9f]">at_cmd_water_get_param</a> from configuration_cmd.o(i.at_cmd_water_get_param) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[99]">at_cmd_water_get_pul_pin</a> from configuration_cmd.o(i.at_cmd_water_get_pul_pin) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a3]">at_cmd_water_get_report</a> from configuration_cmd.o(i.at_cmd_water_get_report) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[93]">at_cmd_water_get_type</a> from configuration_cmd.o(i.at_cmd_water_get_type) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[97]">at_cmd_water_get_unit</a> from configuration_cmd.o(i.at_cmd_water_get_unit) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[95]">at_cmd_water_get_val_pin</a> from configuration_cmd.o(i.at_cmd_water_get_val_pin) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[9a]">at_cmd_water_get_value</a> from configuration_cmd.o(i.at_cmd_water_get_value) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[9d]">at_cmd_water_get_valve</a> from configuration_cmd.o(i.at_cmd_water_get_valve) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a0]">at_cmd_water_set_mac</a> from configuration_cmd.o(i.at_cmd_water_set_mac) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[9e]">at_cmd_water_set_param</a> from configuration_cmd.o(i.at_cmd_water_set_param) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[98]">at_cmd_water_set_pul_pin</a> from configuration_cmd.o(i.at_cmd_water_set_pul_pin) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[a2]">at_cmd_water_set_report</a> from configuration_cmd.o(i.at_cmd_water_set_report) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[92]">at_cmd_water_set_type</a> from configuration_cmd.o(i.at_cmd_water_set_type) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[96]">at_cmd_water_set_unit</a> from configuration_cmd.o(i.at_cmd_water_set_unit) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[94]">at_cmd_water_set_val_pin</a> from configuration_cmd.o(i.at_cmd_water_set_val_pin) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[9b]">at_cmd_water_set_value</a> from configuration_cmd.o(i.at_cmd_water_set_value) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[9c]">at_cmd_water_set_valve</a> from configuration_cmd.o(i.at_cmd_water_set_valve) referenced from configuration_cmd.o(.constdata)
 <LI><a href="#[b]">attention_timeout_handler</a> from jmesh_provisioning.o(i.attention_timeout_handler) referenced from jmesh_provisioning.o(i.do_authentication_action)
 <LI><a href="#[1c9]">ble_adv_report_handler</a> from ble_adapt.o(i.ble_adv_report_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1c2]">ble_connect_req_handler</a> from ble_adapt.o(i.ble_connect_req_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1c1]">ble_default_handler</a> from ble_adapt.o(i.ble_default_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1c7]">ble_device_ready_handler</a> from ble_adapt.o(i.ble_device_ready_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1cd]">ble_disc_char_handler</a> from ble_adapt.o(i.ble_disc_char_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1ce]">ble_disc_desc_handler</a> from ble_adapt.o(i.ble_disc_desc_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1cc]">ble_disc_incl_handler</a> from ble_adapt.o(i.ble_disc_incl_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1c5]">ble_disconnect_handler</a> from ble_adapt.o(i.ble_disconnect_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1d3]">ble_gapc_bond_ind_handler</a> from ble_adapt.o(i.ble_gapc_bond_ind_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1d2]">ble_gapc_bond_req_ind_handler</a> from ble_adapt.o(i.ble_gapc_bond_req_ind_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1c8]">ble_gapc_cmp_evt_handler</a> from ble_adapt.o(i.ble_gapc_cmp_evt_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1c3]">ble_gapc_connection_confirm_handler</a> from ble_adapt.o(i.ble_gapc_connection_confirm_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1c4]">ble_gapc_update_handler</a> from ble_adapt.o(i.ble_gapc_update_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1c6]">ble_gapm_cmp_evt_handler</a> from ble_adapt.o(i.ble_gapm_cmp_evt_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1d5]">ble_gattc_cmp_evt_handler</a> from ble_adapt.o(i.ble_gattc_cmp_evt_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[f5]">ble_msg_rx_cb</a> from os_bridge.o(i.ble_msg_rx_cb) referenced from os_bridge.o(i.ble_msg_start_recv)
 <LI><a href="#[f5]">ble_msg_rx_cb</a> from os_bridge.o(i.ble_msg_rx_cb) referenced from os_bridge.o(i.virtual_port_read)
 <LI><a href="#[145]">ble_msg_tx_cb</a> from os_bridge.o(i.ble_msg_tx_cb) referenced from os_bridge.o(i.virtual_port_write)
 <LI><a href="#[1d1]">ble_mtu_change_handler</a> from ble_adapt.o(i.ble_mtu_change_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1d0]">ble_param_update_req_handler</a> from ble_adapt.o(i.ble_param_update_req_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1cf]">ble_sdp_svc_handler</a> from ble_adapt.o(i.ble_sdp_svc_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[f6]">ble_stack_task</a> from ble_task.o(i.ble_stack_task) referenced from ble_task.o(i.ble_stack_task_create)
 <LI><a href="#[4]">broadcast_reset_timer_handler</a> from jmesh_app_pro.o(i.broadcast_reset_timer_handler) referenced from jmesh_app_pro.o(i.app_broadcast_data_handler)
 <LI><a href="#[179]">bxotas_cleanup</a> from bxotas.o(i.bxotas_cleanup) referenced from bxotas.o(.constdata)
 <LI><a href="#[178]">bxotas_create</a> from bxotas.o(i.bxotas_create) referenced from bxotas.o(.constdata)
 <LI><a href="#[177]">bxotas_destroy</a> from bxotas.o(i.bxotas_destroy) referenced from bxotas.o(.constdata)
 <LI><a href="#[17c]">bxotas_firmware_dest_cmd_handler</a> from bxotas_task.o(i.bxotas_firmware_dest_cmd_handler) referenced from bxotas_task.o(.constdata)
 <LI><a href="#[176]">bxotas_init</a> from bxotas.o(i.bxotas_init) referenced from bxotas.o(.constdata)
 <LI><a href="#[17d]">bxotas_start_cfm_handler</a> from bxotas_task.o(i.bxotas_start_cfm_handler) referenced from bxotas_task.o(.constdata)
 <LI><a href="#[1dd]">cache_clk_gate</a> from cache_integration.o(n_xip_section) referenced from cache_integration.o(n_xip_variable)
 <LI><a href="#[1de]">cache_sys_stat</a> from cache_integration.o(n_xip_section) referenced from cache_integration.o(n_xip_variable)
 <LI><a href="#[a]">check_node_state_timer_handler</a> from jmesh_app_pro.o(i.check_node_state_timer_handler) referenced from jmesh_app_pro.o(i.check_node_state_timer_start)
 <LI><a href="#[35]">config_appkey_add_handler</a> from config_server.o(i.config_appkey_add_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[36]">config_appkey_delete_handler</a> from config_server.o(i.config_appkey_delete_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[37]">config_appkey_get_handler</a> from config_server.o(i.config_appkey_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[1e]">config_appkey_list_handler</a> from config_client.o(i.config_appkey_list_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[1f]">config_appkey_status_handler</a> from config_client.o(i.config_appkey_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[38]">config_appkey_update_handler</a> from config_server.o(i.config_appkey_update_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[39]">config_beacon_get_handler</a> from config_server.o(i.config_beacon_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[3a]">config_beacon_set_handler</a> from config_server.o(i.config_beacon_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[20]">config_beacon_status_handler</a> from config_client.o(i.config_beacon_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[3b]">config_composition_data_get_handler</a> from config_server.o(i.config_composition_data_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[21]">config_composition_data_status_handler</a> from config_client.o(i.config_composition_data_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[3c]">config_default_ttl_get_handler</a> from config_server.o(i.config_default_ttl_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[3d]">config_default_ttl_set_handler</a> from config_server.o(i.config_default_ttl_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[22]">config_default_ttl_status_handler</a> from config_client.o(i.config_default_ttl_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[40]">config_friend_get_handler</a> from config_server.o(i.config_friend_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[41]">config_friend_set_handler</a> from config_server.o(i.config_friend_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[24]">config_friend_status_handler</a> from config_client.o(i.config_friend_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[3e]">config_gatt_proxy_get_handler</a> from config_server.o(i.config_gatt_proxy_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[3f]">config_gatt_proxy_set_handler</a> from config_server.o(i.config_gatt_proxy_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[23]">config_gatt_proxy_status_handler</a> from config_client.o(i.config_gatt_proxy_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[5f]">config_heartbeat_publication_get_handler</a> from config_server.o(i.config_heartbeat_publication_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[60]">config_heartbeat_publication_set_handler</a> from config_server.o(i.config_heartbeat_publication_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[32]">config_heartbeat_publication_status_handler</a> from config_client.o(i.config_heartbeat_publication_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[61]">config_heartbeat_subscription_get_handler</a> from config_server.o(i.config_heartbeat_subscription_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[62]">config_heartbeat_subscription_set_handler</a> from config_server.o(i.config_heartbeat_subscription_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[33]">config_heartbeat_subscription_status_handler</a> from config_client.o(i.config_heartbeat_subscription_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[5d]">config_key_refresh_phase_get_handler</a> from config_server.o(i.config_key_refresh_phase_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[5e]">config_key_refresh_phase_set_handler</a> from config_server.o(i.config_key_refresh_phase_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[31]">config_key_refresh_status_handler</a> from config_client.o(i.config_key_refresh_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[56]">config_model_app_bind_handler</a> from config_server.o(i.config_model_app_bind_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[2c]">config_model_app_status_handler</a> from config_client.o(i.config_model_app_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[57]">config_model_app_unbind_handler</a> from config_server.o(i.config_model_app_unbind_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[44]">config_model_publication_get_handler</a> from config_server.o(i.config_model_publication_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[45]">config_model_publication_set_handler</a> from config_server.o(i.config_model_publication_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[26]">config_model_publication_status_handler</a> from config_client.o(i.config_model_publication_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[46]">config_model_publication_virtual_address_set_handler</a> from config_server.o(i.config_model_publication_virtual_address_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[47]">config_model_subscription_add_handler</a> from config_server.o(i.config_model_subscription_add_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[49]">config_model_subscription_delete_all_handler</a> from config_server.o(i.config_model_subscription_delete_all_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[48]">config_model_subscription_delete_handler</a> from config_server.o(i.config_model_subscription_delete_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[4a]">config_model_subscription_overwrite_handler</a> from config_server.o(i.config_model_subscription_overwrite_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[27]">config_model_subscription_status_handler</a> from config_client.o(i.config_model_subscription_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[4b]">config_model_subscription_virtual_address_add_handler</a> from config_server.o(i.config_model_subscription_virtual_address_add_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[4c]">config_model_subscription_virtual_address_delete_handler</a> from config_server.o(i.config_model_subscription_virtual_address_delete_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[4d]">config_model_subscription_virtual_address_overwrite_handler</a> from config_server.o(i.config_model_subscription_virtual_address_overwrite_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[4e]">config_netkey_add_handler</a> from config_server.o(i.config_netkey_add_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[4f]">config_netkey_delete_handler</a> from config_server.o(i.config_netkey_delete_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[50]">config_netkey_get_handler</a> from config_server.o(i.config_netkey_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[2b]">config_netkey_list_handler</a> from config_client.o(i.config_netkey_list_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[2a]">config_netkey_status_handler</a> from config_client.o(i.config_netkey_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[51]">config_netkey_update_handler</a> from config_server.o(i.config_netkey_update_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[52]">config_network_transmit_get_handler</a> from config_server.o(i.config_network_transmit_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[53]">config_network_transmit_set_handler</a> from config_server.o(i.config_network_transmit_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[34]">config_network_transmit_status_handler</a> from config_client.o(i.config_network_transmit_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[5a]">config_node_identity_get_handler</a> from config_server.o(i.config_node_identity_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[5b]">config_node_identity_set_handler</a> from config_server.o(i.config_node_identity_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[2f]">config_node_identity_status_handler</a> from config_client.o(i.config_node_identity_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[5c]">config_node_reset_handler</a> from config_server.o(i.config_node_reset_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[30]">config_node_reset_status_handler</a> from config_client.o(i.config_node_reset_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[42]">config_relay_get_handler</a> from config_server.o(i.config_relay_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[43]">config_relay_set_handler</a> from config_server.o(i.config_relay_set_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[25]">config_relay_status_handler</a> from config_client.o(i.config_relay_status_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[58]">config_sig_model_app_get_handler</a> from config_server.o(i.config_sig_model_app_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[2d]">config_sig_model_app_list_handler</a> from config_client.o(i.config_sig_model_app_list_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[54]">config_sig_model_subscription_get_handler</a> from config_server.o(i.config_sig_model_subscription_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[28]">config_sig_model_subscription_list_handler</a> from config_client.o(i.config_sig_model_subscription_list_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[59]">config_vendor_model_app_get_handler</a> from config_server.o(i.config_vendor_model_app_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[2e]">config_vendor_model_app_list_handler</a> from config_client.o(i.config_vendor_model_app_list_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[55]">config_vendor_model_subscription_get_handler</a> from config_server.o(i.config_vendor_model_subscription_get_handler) referenced from config_server.o(.constdata)
 <LI><a href="#[29]">config_vendor_model_subscription_list_handler</a> from config_client.o(i.config_vendor_model_subscription_list_handler) referenced from config_client.o(.constdata)
 <LI><a href="#[1fd]">default_RNG</a> from uecc.o(i.default_RNG) referenced from uecc.o(.data)
 <LI><a href="#[181]">diss_cleanup</a> from diss.o(i.diss_cleanup) referenced from diss.o(.constdata)
 <LI><a href="#[180]">diss_create</a> from diss.o(i.diss_create) referenced from diss.o(.constdata)
 <LI><a href="#[17f]">diss_destroy</a> from diss.o(i.diss_destroy) referenced from diss.o(.constdata)
 <LI><a href="#[17e]">diss_init</a> from diss.o(i.diss_init) referenced from diss.o(.constdata)
 <LI><a href="#[182]">diss_set_value_req_handler</a> from diss_task.o(i.diss_set_value_req_handler) referenced from diss_task.o(.constdata)
 <LI><a href="#[184]">diss_value_cfm_handler</a> from diss_task.o(i.diss_value_cfm_handler) referenced from diss_task.o(.constdata)
 <LI><a href="#[1e1]">dmac_clk_gate</a> from dmac_integration.o(n_xip_section) referenced from dmac_integration.o(n_xip_variable)
 <LI><a href="#[1df]">dmac_intr_op</a> from dmac_integration.o(i.dmac_intr_op) referenced from dmac_integration.o(n_xip_variable)
 <LI><a href="#[1e0]">dmac_sw_rst</a> from dmac_integration.o(i.dmac_sw_rst) referenced from dmac_integration.o(n_xip_variable)
 <LI><a href="#[1e2]">dmac_sys_stat</a> from dmac_integration.o(n_xip_section) referenced from dmac_integration.o(n_xip_variable)
 <LI><a href="#[1b6]">double_jacobian_default</a> from uecc.o(i.double_jacobian_default) referenced 4 times from uecc.o(.constdata)
 <LI><a href="#[1be]">double_jacobian_secp256k1</a> from uecc.o(i.double_jacobian_secp256k1) referenced from uecc.o(.constdata)
 <LI><a href="#[eb]">ecc_gen_new_public_key</a> from ecc_p256.o(i.ecc_gen_new_public_key) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[ea]">ecc_gen_new_secret_key</a> from ecc_p256.o(i.ecc_gen_new_secret_key) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[e9]">ecc_generate_key256</a> from ecc_p256.o(i.ecc_generate_key256) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[185]">ecc_generate_key256_callback</a> from ecc_p256.o(i.ecc_generate_key256_callback) referenced from ecc_p256.o(.constdata)
 <LI><a href="#[fa]">flash_dual_io_read</a> from flash_wrapper.o(i.flash_dual_io_read) referenced from flash_wrapper.o(i.flash_read_func_ptr_get)
 <LI><a href="#[f8]">flash_dual_output_read</a> from flash_wrapper.o(i.flash_dual_output_read) referenced from flash_wrapper.o(i.flash_read_func_ptr_get)
 <LI><a href="#[173]">flash_erase_execution</a> from flash_integration.o(n_xip_section) referenced from svcall.o(.constdata)
 <LI><a href="#[131]">flash_erase_wrapper</a> from nvds_in_ram.o(i.flash_erase_wrapper) referenced from nvds_in_ram.o(i.nvds_init)
 <LI><a href="#[175]">flash_multi_read_32bits_execution</a> from flash_integration.o(n_xip_section) referenced from svcall.o(.constdata)
 <LI><a href="#[130]">flash_program</a> from flash_wrapper.o(i.flash_program) referenced from nvds_in_ram.o(i.nvds_init)
 <LI><a href="#[172]">flash_program_execution</a> from flash_integration.o(n_xip_section) referenced from svcall.o(.constdata)
 <LI><a href="#[fb]">flash_quad_io_read</a> from flash_wrapper.o(i.flash_quad_io_read) referenced from flash_wrapper.o(i.flash_read_func_ptr_get)
 <LI><a href="#[f9]">flash_quad_output_read</a> from flash_wrapper.o(i.flash_quad_output_read) referenced from flash_wrapper.o(i.flash_read_func_ptr_get)
 <LI><a href="#[f7]">flash_read</a> from flash_wrapper.o(i.flash_read) referenced from flash_wrapper.o(i.flash_read_func_ptr_get)
 <LI><a href="#[174]">flash_read_execution</a> from flash_integration.o(n_xip_section) referenced from svcall.o(.constdata)
 <LI><a href="#[fd]">friend_offer</a> from jmesh_friend.o(i.friend_offer) referenced from jmesh_friend.o(i.friend_request_handler)
 <LI><a href="#[1d7]">gapc_le_pkt_size_ind_handler</a> from ble_adapt.o(i.gapc_le_pkt_size_ind_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[13e]">gapm_start_advertise_cmd_handler_patch</a> from set_adv_payload_31byte_patch.o(i.gapm_start_advertise_cmd_handler_patch) referenced from set_adv_payload_31byte_patch.o(i.set_adv_payload_31Byte_patch)
 <LI><a href="#[1f3]">gatt_provisioning_confirmation_handler</a> from jmesh_provisioning_server.o(i.gatt_provisioning_confirmation_handler) referenced from jmesh_provisioning_server.o(.data)
 <LI><a href="#[1f5]">gatt_provisioning_data_handler</a> from jmesh_provisioning_server.o(i.gatt_provisioning_data_handler) referenced from jmesh_provisioning_server.o(.data)
 <LI><a href="#[1f6]">gatt_provisioning_failed_handler</a> from jmesh_provisioning_server.o(i.gatt_provisioning_failed_handler) referenced from jmesh_provisioning_server.o(.data)
 <LI><a href="#[1f0]">gatt_provisioning_invite_handler</a> from jmesh_provisioning_server.o(i.gatt_provisioning_invite_handler) referenced from jmesh_provisioning_server.o(.data)
 <LI><a href="#[1f2]">gatt_provisioning_publickey_handler</a> from jmesh_provisioning_server.o(i.gatt_provisioning_publickey_handler) referenced from jmesh_provisioning_server.o(.data)
 <LI><a href="#[1f4]">gatt_provisioning_random_handler</a> from jmesh_provisioning_server.o(i.gatt_provisioning_random_handler) referenced from jmesh_provisioning_server.o(.data)
 <LI><a href="#[1f1]">gatt_provisioning_start_handler</a> from jmesh_provisioning_server.o(i.gatt_provisioning_start_handler) referenced from jmesh_provisioning_server.o(.data)
 <LI><a href="#[17b]">gattc_read_req_ind_handler</a> from bxotas_task.o(i.gattc_read_req_ind_handler) referenced 3 times from bxotas_task.o(.constdata)
 <LI><a href="#[17a]">gattc_write_req_ind_handler</a> from bxotas_task.o(i.gattc_write_req_ind_handler) referenced 2 times from bxotas_task.o(.constdata)
 <LI><a href="#[c]">get_meter_addr_repeat_timer_handler</a> from jmesh_app_pro.o(i.get_meter_addr_repeat_timer_handler) referenced from jmesh_app_pro.o(i.get_meter_addr_repeat_timer_handler)
 <LI><a href="#[c]">get_meter_addr_repeat_timer_handler</a> from jmesh_app_pro.o(i.get_meter_addr_repeat_timer_handler) referenced from jmesh_app_pro.o(i.get_meter_addr_task_start)
 <LI><a href="#[188]">gpio_clk_gate</a> from gpio_integration.o(i.gpio_clk_gate) referenced from gpio_integration.o(.constdata)
 <LI><a href="#[186]">gpio_intr_op</a> from gpio_integration.o(i.gpio_intr_op) referenced from gpio_integration.o(.constdata)
 <LI><a href="#[187]">gpio_sw_rst</a> from gpio_integration.o(i.gpio_sw_rst) referenced from gpio_integration.o(.constdata)
 <LI><a href="#[189]">gpio_sys_stat</a> from gpio_integration.o(i.gpio_sys_stat) referenced from gpio_integration.o(.constdata)
 <LI><a href="#[1ea]">hwecc_clk_gate</a> from hwecc_integration.o(i.hwecc_clk_gate) referenced from hwecc_integration.o(.data)
 <LI><a href="#[1e8]">hwecc_intr_op</a> from hwecc_integration.o(i.hwecc_intr_op) referenced from hwecc_integration.o(.data)
 <LI><a href="#[1e9]">hwecc_sw_rst</a> from hwecc_integration.o(i.hwecc_sw_rst) referenced from hwecc_integration.o(.data)
 <LI><a href="#[1eb]">hwecc_sys_stat</a> from hwecc_integration.o(i.hwecc_sys_stat) referenced from hwecc_integration.o(.data)
 <LI><a href="#[18d]">iic_clk_gate</a> from iic_integration.o(i.iic_clk_gate) referenced from iic_integration.o(.constdata)
 <LI><a href="#[18c]">iic_clk_src_cfg</a> from iic_integration.o(i.iic_clk_src_cfg) referenced from iic_integration.o(.constdata)
 <LI><a href="#[18a]">iic_intr_op</a> from iic_integration.o(i.iic_intr_op) referenced from iic_integration.o(.constdata)
 <LI><a href="#[18e]">iic_pin_cfg</a> from iic_integration.o(i.iic_pin_cfg) referenced from iic_integration.o(.constdata)
 <LI><a href="#[18b]">iic_sw_rst</a> from iic_integration.o(i.iic_sw_rst) referenced from iic_integration.o(.constdata)
 <LI><a href="#[18f]">iic_sys_stat</a> from iic_integration.o(i.iic_sys_stat) referenced from iic_integration.o(.constdata)
 <LI><a href="#[b8]">jmesh_access_recv</a> from jmesh_access.o(i.jmesh_access_recv) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[c4]">jmesh_app_data_recv_handler</a> from app_protocol.o(i.jmesh_app_data_recv_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[ff]">jmesh_app_expand1_device_client_info_status</a> from app_expand1_device_client.o(i.jmesh_app_expand1_device_client_info_status) referenced from app_expand1_device_client.o(i.jmesh_app_expand1_device_client_init)
 <LI><a href="#[100]">jmesh_app_expand1_device_client_report_status</a> from app_expand1_device_client.o(i.jmesh_app_expand1_device_client_report_status) referenced from app_expand1_device_client.o(i.jmesh_app_expand1_device_client_init)
 <LI><a href="#[c1]">jmesh_beacon_recv_handler</a> from jmesh_ble_callback.o(i.jmesh_beacon_recv_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[fe]">jmesh_ble_adapter_timerflow</a> from bx2400_ble.o(i.jmesh_ble_adapter_timerflow) referenced from bx2400_ble.o(i.jmesh_adv_send)
 <LI><a href="#[fe]">jmesh_ble_adapter_timerflow</a> from bx2400_ble.o(i.jmesh_ble_adapter_timerflow) referenced from bx2400_ble.o(i.jmesh_ble_canceled_callback)
 <LI><a href="#[fe]">jmesh_ble_adapter_timerflow</a> from bx2400_ble.o(i.jmesh_ble_adapter_timerflow) referenced from bx2400_ble.o(i.jmesh_connect_start)
 <LI><a href="#[c3]">jmesh_config_cmd_recv_handler</a> from configuration_cmd.o(i.jmesh_config_cmd_recv_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[ba]">jmesh_config_recv</a> from jmesh_access.o(i.jmesh_config_recv) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[fc]">jmesh_friendship_free</a> from jmesh_friend.o(i.jmesh_friendship_free) referenced from jmesh_friend.o(i.friend_offer)
 <LI><a href="#[fc]">jmesh_friendship_free</a> from jmesh_friend.o(i.jmesh_friendship_free) referenced from jmesh_friend.o(i.friend_poll_handler)
 <LI><a href="#[d]">jmesh_gatt_link_timer_handler</a> from jmesh_gatt.o(i.jmesh_gatt_link_timer_handler) referenced from jmesh_gatt.o(i.jmesh_gatt_init)
 <LI><a href="#[bc]">jmesh_interface_recv_handler</a> from jmesh_interface.o(i.jmesh_interface_recv_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[bb]">jmesh_interface_send_handler</a> from jmesh_interface.o(i.jmesh_interface_send_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[115]">jmesh_lowpower_connected_callback</a> from jmesh_lowpower.o(i.jmesh_lowpower_connected_callback) referenced from jmesh_lowpower.o(i.jmesh_lowpower_connected)
 <LI><a href="#[9]">jmesh_ota_adv_schedule</a> from configuration_cmd.o(i.jmesh_ota_adv_schedule) referenced from configuration_cmd.o(i.at_cmd_start_ota)
 <LI><a href="#[9]">jmesh_ota_adv_schedule</a> from configuration_cmd.o(i.jmesh_ota_adv_schedule) referenced from configuration_cmd.o(i.jmesh_ota_adv_schedule)
 <LI><a href="#[be]">jmesh_provision_recv_handler</a> from jmesh_provisioning_server.o(i.jmesh_provision_recv_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[bd]">jmesh_provision_send_handler</a> from jmesh_provisioning_server.o(i.jmesh_provision_send_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[12]">jmesh_route_exchange</a> from jmesh_route.o(i.jmesh_route_exchange) referenced from jmesh_route.o(i.jmesh_route_exchange)
 <LI><a href="#[12]">jmesh_route_exchange</a> from jmesh_route.o(i.jmesh_route_exchange) referenced from jmesh_route.o(i.jmesh_route_init)
 <LI><a href="#[c2]">jmesh_secure_beacon_recv_handler</a> from jmesh_secure_beacon.o(i.jmesh_secure_beacon_recv_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[114]">jmesh_timer_cancel</a> from bx2400_ble.o(i.jmesh_timer_cancel) referenced from bx2400_ble.o(i.jmesh_ble_cancel_callback)
 <LI><a href="#[119]">jmesh_uart0_send_callback</a> from bx2400_uart.o(i.jmesh_uart0_send_callback) referenced from bx2400_uart.o(i.jmesh_uart_send)
 <LI><a href="#[119]">jmesh_uart0_send_callback</a> from bx2400_uart.o(i.jmesh_uart0_send_callback) referenced from bx2400_uart.o(i.jmesh_uart_send_no_take_semphr)
 <LI><a href="#[118]">jmesh_uart1_send_callback</a> from bx2400_uart.o(i.jmesh_uart1_send_callback) referenced from bx2400_uart.o(i.jmesh_uart_send)
 <LI><a href="#[118]">jmesh_uart1_send_callback</a> from bx2400_uart.o(i.jmesh_uart1_send_callback) referenced from bx2400_uart.o(i.jmesh_uart_send_no_take_semphr)
 <LI><a href="#[b7]">jmesh_upper_access_send</a> from jmesh_upper.o(i.jmesh_upper_access_send) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[b9]">jmesh_upper_config_send</a> from jmesh_upper.o(i.jmesh_upper_config_send) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[c0]">jmesh_upper_control_recv_handler</a> from jmesh_control.o(i.jmesh_upper_control_recv_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[bf]">jmesh_upper_control_send_handler</a> from jmesh_control.o(i.jmesh_upper_control_send_handler) referenced from jmesh_task.o(.constdata)
 <LI><a href="#[11e]">jmesh_wdt_int_callback</a> from bx2400_system.o(i.jmesh_wdt_int_callback) referenced from bx2400_system.o(i.jmesh_wdt_init)
 <LI><a href="#[120]">light_client_mode_status_handler</a> from light_client.o(i.light_client_mode_status_handler) referenced from light_client.o(i.light_client_init)
 <LI><a href="#[11f]">light_client_status_handler</a> from light_client.o(i.light_client_status_handler) referenced from light_client.o(i.light_client_init)
 <LI><a href="#[121]">light_mode_timer_handler</a> from light.o(i.light_mode_timer_handler) referenced from light.o(i.light_mode_timer_handler)
 <LI><a href="#[121]">light_mode_timer_handler</a> from light.o(i.light_mode_timer_handler) referenced from light.o(i.light_start_mode)
 <LI><a href="#[127]">light_server_bit_handler</a> from light_server.o(i.light_server_bit_handler) referenced from light_server.o(i.light_server_init)
 <LI><a href="#[123]">light_server_get_handler</a> from light_server.o(i.light_server_get_handler) referenced from light_server.o(i.light_server_init)
 <LI><a href="#[125]">light_server_mode_get_handler</a> from light_server.o(i.light_server_mode_get_handler) referenced from light_server.o(i.light_server_init)
 <LI><a href="#[126]">light_server_mode_handler</a> from light_server.o(i.light_server_mode_handler) referenced from light_server.o(i.light_server_init)
 <LI><a href="#[124]">light_server_mode_set_handler</a> from light_server.o(i.light_server_mode_set_handler) referenced from light_server.o(i.light_server_init)
 <LI><a href="#[128]">light_server_point_handler</a> from light_server.o(i.light_server_point_handler) referenced from light_server.o(i.light_server_init)
 <LI><a href="#[122]">light_server_set_handler</a> from light_server.o(i.light_server_set_handler) referenced from light_server.o(i.light_server_init)
 <LI><a href="#[1a]">link_hold_timeout_handler</a> from jmesh_provisioning_server.o(i.link_hold_timeout_handler) referenced from jmesh_provisioning_server.o(i.prov_check_progress)
 <LI><a href="#[129]">llc_con_upd_req_ind_handler_patch2</a> from llc_con_upd_req_ind_handler_patch2.o(i.llc_con_upd_req_ind_handler_patch2) referenced from llc_con_upd_req_ind_handler_patch2.o(i.llc_con_upd_req_ind_handler2_init)
 <LI><a href="#[f1]">lld_sleep_init</a> from bx_lld_sleep.o(i.lld_sleep_init) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[140]">llm_end_evt_defer_patch</a> from llm_end_evt_defer_patch.o(i.llm_end_evt_defer_patch) referenced from llm_end_evt_defer_patch.o(i.set_llm_end_evt_defer_patch)
 <LI><a href="#[10]">lower_resegment_timer_handler</a> from jmesh_segment.o(i.lower_resegment_timer_handler) referenced from jmesh_segment.o(i.jmesh_resegment_recv)
 <LI><a href="#[11]">lower_segment_cache_free</a> from jmesh_segment.o(i.lower_segment_cache_free) referenced from jmesh_segment.o(i.jmesh_resegment_recv)
 <LI><a href="#[11]">lower_segment_cache_free</a> from jmesh_segment.o(i.lower_segment_cache_free) referenced from jmesh_segment.o(i.lower_resegment_timer_handler)
 <LI><a href="#[f]">lower_segment_cache_read_finder</a> from jmesh_segment.o(i.lower_segment_cache_read_finder) referenced from jmesh_segment.o(i.jmesh_resegment_recv)
 <LI><a href="#[e]">lower_segment_cache_send_finder</a> from jmesh_segment.o(i.lower_segment_cache_send_finder) referenced from jmesh_segment.o(i.jmesh_lower_segment_recv_ack)
 <LI><a href="#[16]">lower_segment_retransmit</a> from jmesh_segment.o(i.lower_segment_retransmit) referenced from jmesh_segment.o(i.jmesh_segment_send)
 <LI><a href="#[12b]">lowpower_choose_offer</a> from jmesh_lowpower.o(i.lowpower_choose_offer) referenced from jmesh_lowpower.o(i.lowpower_receive_offer)
 <LI><a href="#[117]">lowpower_poll</a> from jmesh_lowpower.o(i.lowpower_poll) referenced from jmesh_lowpower.o(i.jmesh_lowpower_sleep)
 <LI><a href="#[12a]">lowpower_poll_timeout_handler</a> from jmesh_lowpower.o(i.lowpower_poll_timeout_handler) referenced from jmesh_lowpower.o(i.lowpower_poll)
 <LI><a href="#[12c]">lowpower_receive_offer</a> from jmesh_lowpower.o(i.lowpower_receive_offer) referenced from jmesh_lowpower.o(i.lowpower_request)
 <LI><a href="#[116]">lowpower_request</a> from jmesh_lowpower.o(i.lowpower_request) referenced from jmesh_lowpower.o(i.jmesh_lowpower_init)
 <LI><a href="#[116]">lowpower_request</a> from jmesh_lowpower.o(i.lowpower_request) referenced from jmesh_lowpower.o(i.lowpower_choose_offer)
 <LI><a href="#[12e]">lowpower_subscription_list_update_timeout_handler</a> from jmesh_lowpower.o(i.lowpower_subscription_list_update_timeout_handler) referenced from jmesh_lowpower.o(i.lowpower_subscription_list_update)
 <LI><a href="#[12d]">lowpower_update_timeout_handler</a> from jmesh_lowpower.o(i.lowpower_update_timeout_handler) referenced from jmesh_lowpower.o(i.lowpower_subscription_list_confirm_handler)
 <LI><a href="#[f3]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[18]">memcmp</a> from rom_syms_armcc.txt(ABSOLUTE) referenced from os_queue.o(i.os_queue_is_in)
 <LI><a href="#[1a8]">message_app_expand1_handler</a> from app_expand.o(i.message_app_expand1_handler) referenced from app_expand.o(.constdata)
 <LI><a href="#[1a9]">message_app_expand2_handler</a> from app_expand.o(i.message_app_expand2_handler) referenced from app_expand.o(.constdata)
 <LI><a href="#[1aa]">message_app_expand3_handler</a> from app_expand.o(i.message_app_expand3_handler) referenced from app_expand.o(.constdata)
 <LI><a href="#[10c]">message_realcomm_server_data_handler</a> from app_expand2_realcomm_server.o(i.message_realcomm_server_data_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[1b4]">meter_client_response_handler</a> from meter_client.o(i.meter_client_response_handler) referenced from meter_client.o(.constdata)
 <LI><a href="#[12f]">meter_cmd_res_timeout_handler</a> from meter_server.o(i.meter_cmd_res_timeout_handler) referenced from meter_server.o(i.meter_server_cmd_send_handler)
 <LI><a href="#[1b5]">meter_server_cmd_send_handler</a> from meter_server.o(i.meter_server_cmd_send_handler) referenced from meter_server.o(.constdata)
 <LI><a href="#[1b7]">mod_sqrt_default</a> from uecc.o(i.mod_sqrt_default) referenced 4 times from uecc.o(.constdata)
 <LI><a href="#[1bb]">mod_sqrt_secp224r1</a> from uecc.o(i.mod_sqrt_secp224r1) referenced from uecc.o(.constdata)
 <LI><a href="#[e1]">nvds_del</a> from nvds_in_ram.o(i.nvds_del) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[e0]">nvds_get</a> from nvds_in_ram.o(i.nvds_get) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[df]">nvds_init</a> from nvds_in_ram.o(i.nvds_init) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[e2]">nvds_put</a> from nvds_in_ram.o(i.nvds_put) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[17]">os_main</a> from os_main.o(i.os_main) referenced from os_main.o(i.mesh_task_create)
 <LI><a href="#[1fb]">os_task_jmesh_task</a> from jmesh_task.o(i.os_task_jmesh_task) referenced from jmesh_task.o(.data)
 <LI><a href="#[1ef]">os_task_os_pulse_int_e</a> from water_pulse.o(i.os_task_os_pulse_int_e) referenced from water_pulse.o(.data)
 <LI><a href="#[1fc]">os_task_os_timer_event</a> from os_timer_event.o(i.os_task_os_timer_event) referenced from os_timer_event.o(.data)
 <LI><a href="#[1fa]">os_task_os_uart_int_e</a> from bx2400_uart.o(i.os_task_os_uart_int_e) referenced from bx2400_uart.o(.data)
 <LI><a href="#[11c]">os_uart0_read_callback</a> from bx2400_uart.o(i.os_uart0_read_callback) referenced from bx2400_uart.o(i.jmesh_uart_start)
 <LI><a href="#[11c]">os_uart0_read_callback</a> from bx2400_uart.o(i.os_uart0_read_callback) referenced from bx2400_uart.o(i.os_uart0_read_callback)
 <LI><a href="#[11d]">os_uart0_timer_handler</a> from bx2400_uart.o(i.os_uart0_timer_handler) referenced from bx2400_uart.o(i.jmesh_uart_start)
 <LI><a href="#[11a]">os_uart1_read_callback</a> from bx2400_uart.o(i.os_uart1_read_callback) referenced from bx2400_uart.o(i.jmesh_uart_start)
 <LI><a href="#[11a]">os_uart1_read_callback</a> from bx2400_uart.o(i.os_uart1_read_callback) referenced from bx2400_uart.o(i.os_uart1_read_callback)
 <LI><a href="#[11a]">os_uart1_read_callback</a> from bx2400_uart.o(i.os_uart1_read_callback) referenced from bx2400_uart.o(i.os_uart1_timer_handler)
 <LI><a href="#[11b]">os_uart1_timer_handler</a> from bx2400_uart.o(i.os_uart1_timer_handler) referenced from bx2400_uart.o(i.jmesh_uart_start)
 <LI><a href="#[134]">osapp_async_call_wrapper</a> from osapp_task.o(i.osapp_async_call_wrapper) referenced from osapp_task.o(i.osapp_task)
 <LI><a href="#[1dc]">osapp_bxotas_finish_ind_handler</a> from ble_adapt.o(i.osapp_bxotas_finish_ind_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1db]">osapp_bxotas_start_req_ind_handler</a> from ble_adapt.o(i.osapp_bxotas_start_req_ind_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1d8]">osapp_gapc_get_dev_info_req_ind_handler</a> from ble_adapt.o(i.osapp_gapc_get_dev_info_req_ind_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1d9]">osapp_gapm_profile_added_ind_handler</a> from ble_adapt.o(i.osapp_gapm_profile_added_ind_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1cb]">osapp_gapm_use_enc_block_ind_handler</a> from ble_adapt.o(i.osapp_gapm_use_enc_block_ind_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1d4]">osapp_gattc_event_ind_handler</a> from ble_adapt.o(i.osapp_gattc_event_ind_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[1ca]">osapp_gattm_add_svc_rsp_handler</a> from ble_adapt.o(i.osapp_gattm_add_svc_rsp_handler) referenced from ble_adapt.o(.constdata)
 <LI><a href="#[135]">osapp_task</a> from osapp_task.o(i.osapp_task) referenced from osapp_task.o(i.osapp_task_create)
 <LI><a href="#[19]">ota_permit_timer_handler</a> from app_config.o(i.ota_permit_timer_handler) referenced from app_config.o(i.ota_permit_timer_start)
 <LI><a href="#[de]">platform_reset</a> from arch_init.o(i.platform_reset) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[e6]">prf_add_profile</a> from prf.o(i.prf_add_profile) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[e4]">prf_cleanup</a> from prf.o(i.prf_cleanup) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[e5]">prf_create</a> from prf.o(i.prf_create) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[e7]">prf_get_id_from_task</a> from prf.o(i.prf_get_id_from_task) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[e8]">prf_get_task_from_id</a> from prf.o(i.prf_get_task_from_id) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[e3]">prf_init</a> from prf.o(i.prf_init) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[144]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[136]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[16a]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[193]">pwm_clk_gate</a> from pwm_integration.o(i.pwm_clk_gate) referenced from pwm_integration.o(.constdata)
 <LI><a href="#[192]">pwm_clk_src_cfg</a> from pwm_integration.o(i.pwm_clk_src_cfg) referenced from pwm_integration.o(.constdata)
 <LI><a href="#[190]">pwm_intr_op</a> from pwm_integration.o(i.pwm_intr_op) referenced from pwm_integration.o(.constdata)
 <LI><a href="#[194]">pwm_pin_cfg</a> from pwm_integration.o(i.pwm_pin_cfg) referenced from pwm_integration.o(.constdata)
 <LI><a href="#[191]">pwm_sw_rst</a> from pwm_integration.o(i.pwm_sw_rst) referenced from pwm_integration.o(.constdata)
 <LI><a href="#[195]">pwm_sys_stat</a> from pwm_integration.o(i.pwm_sys_stat) referenced from pwm_integration.o(.constdata)
 <LI><a href="#[1e4]">qspi_clk_gate</a> from qspi_integration.o(n_xip_section) referenced from qspi_integration.o(n_xip_variable)
 <LI><a href="#[1e5]">qspi_pin_cfg</a> from qspi_integration.o(n_xip_section) referenced from qspi_integration.o(n_xip_variable)
 <LI><a href="#[1e3]">qspi_sw_rst</a> from qspi_integration.o(n_xip_section) referenced from qspi_integration.o(n_xip_variable)
 <LI><a href="#[1e6]">qspi_sys_stat</a> from qspi_integration.o(n_xip_section) referenced from qspi_integration.o(n_xip_variable)
 <LI><a href="#[3]">read_meter_overtime_handler</a> from jmesh_app_pro.o(i.read_meter_overtime_handler) referenced from _470_app.o(i._470_app_recv)
 <LI><a href="#[3]">read_meter_overtime_handler</a> from jmesh_app_pro.o(i.read_meter_overtime_handler) referenced from jmesh_app_pro.o(i.read_meter_handler)
 <LI><a href="#[3]">read_meter_overtime_handler</a> from jmesh_app_pro.o(i.read_meter_overtime_handler) referenced from jmesh_app_pro.o(i.read_meter_overtime_handler)
 <LI><a href="#[105]">realcomm_client_baudrate_set_status_handler</a> from app_expand2_realcomm_client.o(i.realcomm_client_baudrate_set_status_handler) referenced from app_expand2_realcomm_client.o(i.jmesh_app_expand2_realcomm_client_init)
 <LI><a href="#[106]">realcomm_client_report_set_status_handler</a> from app_expand2_realcomm_client.o(i.realcomm_client_report_set_status_handler) referenced from app_expand2_realcomm_client.o(i.jmesh_app_expand2_realcomm_client_init)
 <LI><a href="#[10d]">realcomm_get_meter_addr_handler</a> from jmesh_app_pro.o(i.realcomm_get_meter_addr_handler) referenced from app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
 <LI><a href="#[1c]">report_meter_overtime_handler</a> from jmesh_app_pro.o(i.report_meter_overtime_handler) referenced from jmesh_app_pro.o(i.report_meter_handler)
 <LI><a href="#[107]">report_meter_return_handler</a> from jmesh_app_pro.o(i.report_meter_return_handler) referenced from app_expand2_realcomm_client.o(i.jmesh_app_expand2_realcomm_client_init)
 <LI><a href="#[13c]">rf_force_agc_enable</a> from rf_apollo.o(i.rf_force_agc_enable) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[137]">rf_reg_rd</a> from rf_apollo.o(i.rf_reg_rd) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[138]">rf_reg_wr</a> from rf_apollo.o(i.rf_reg_wr) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[13b]">rf_reset</a> from rf_apollo.o(i.rf_reset) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[13d]">rf_rssi_convert</a> from rf_apollo.o(i.rf_rssi_convert) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[13a]">rf_sleep</a> from rf_apollo.o(i.rf_sleep) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[139]">rf_txpwr_dbm_get</a> from rf_apollo.o(i.rf_txpwr_dbm_get) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[13]">routing_beacon_send</a> from jmesh_routing_beacon.o(i.routing_beacon_send) referenced from jmesh_routing_beacon.o(i.jmesh_routing_beacon_start)
 <LI><a href="#[13]">routing_beacon_send</a> from jmesh_routing_beacon.o(i.routing_beacon_send) referenced from jmesh_routing_beacon.o(i.routing_beacon_send)
 <LI><a href="#[14]">routing_neighbor_maintain</a> from jmesh_routing_neighbor.o(i.routing_neighbor_maintain) referenced from jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_init)
 <LI><a href="#[14]">routing_neighbor_maintain</a> from jmesh_routing_neighbor.o(i.routing_neighbor_maintain) referenced from jmesh_routing_neighbor.o(i.routing_neighbor_maintain)
 <LI><a href="#[f2]">rwip_assert_asm</a> from bx_dbg_asm.o(RWIP_ASSERT_ASM) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[ef]">rwip_prevent_sleep_clear</a> from rwip.o(i.rwip_prevent_sleep_clear) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[ee]">rwip_prevent_sleep_set</a> from rwip.o(i.rwip_prevent_sleep_set) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[f0]">rwip_reset</a> from rwip.o(i.rwip_reset) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[ec]">rwip_wakeup</a> from rwip.o(i.rwip_wakeup) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[ed]">rwip_wakeup_end</a> from rwip.o(i.rwip_wakeup_end) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[1d]">send_ota_adv</a> from jmesh_app_pro.o(i.send_ota_adv) referenced from jmesh_app_pro.o(i.send_ota_adv)
 <LI><a href="#[15]">send_secure_beacon</a> from jmesh_secure_beacon.o(i.send_secure_beacon) referenced from jmesh_secure_beacon.o(i.jmesh_secure_beacon_start)
 <LI><a href="#[15]">send_secure_beacon</a> from jmesh_secure_beacon.o(i.send_secure_beacon) referenced from jmesh_secure_beacon.o(i.send_secure_beacon)
 <LI><a href="#[1]">set_mac_callback_timer_handler</a> from app_protocol.o(i.set_mac_callback_timer_handler) referenced from app_protocol.o(i.APP_BD_B104_handler)
 <LI><a href="#[1]">set_mac_callback_timer_handler</a> from app_protocol.o(i.set_mac_callback_timer_handler) referenced from jmesh_app_pro.o(i.get_meter_addr_callback)
 <LI><a href="#[198]">spi_clk_gate</a> from spi_integration.o(i.spi_clk_gate) referenced from spi_integration.o(.constdata)
 <LI><a href="#[196]">spi_intr_op</a> from spi_integration.o(i.spi_intr_op) referenced from spi_integration.o(.constdata)
 <LI><a href="#[199]">spi_pin_cfg</a> from spi_integration.o(i.spi_pin_cfg) referenced from spi_integration.o(.constdata)
 <LI><a href="#[197]">spi_sw_rst</a> from spi_integration.o(i.spi_sw_rst) referenced from spi_integration.o(.constdata)
 <LI><a href="#[19a]">spi_sys_stat</a> from spi_integration.o(i.spi_sys_stat) referenced from spi_integration.o(.constdata)
 <LI><a href="#[1ab]">test_client_exc_status_handler</a> from test_app_client.o(i.test_client_exc_status_handler) referenced from test_app_client.o(.constdata)
 <LI><a href="#[1ac]">test_client_read_status_handler</a> from test_app_client.o(i.test_client_read_status_handler) referenced from test_app_client.o(.constdata)
 <LI><a href="#[1ad]">test_client_result_status_handler</a> from test_app_client.o(i.test_client_result_status_handler) referenced from test_app_client.o(.constdata)
 <LI><a href="#[143]">test_read</a> from test_app_server.o(i.test_read) referenced from test_app_server.o(i.test_server_start_handler)
 <LI><a href="#[1ae]">test_server_read_handler</a> from test_app_server.o(i.test_server_read_handler) referenced from test_app_server.o(.constdata)
 <LI><a href="#[1b2]">test_server_result_handler</a> from test_app_server.o(i.test_server_result_handler) referenced from test_app_server.o(.constdata)
 <LI><a href="#[1b3]">test_server_result_init_handler</a> from test_app_server.o(i.test_server_result_init_handler) referenced from test_app_server.o(.constdata)
 <LI><a href="#[1b0]">test_server_start_handler</a> from test_app_server.o(i.test_server_start_handler) referenced from test_app_server.o(.constdata)
 <LI><a href="#[1b1]">test_server_stop_handler</a> from test_app_server.o(i.test_server_stop_handler) referenced from test_app_server.o(.constdata)
 <LI><a href="#[1af]">test_server_write_handler</a> from test_app_server.o(i.test_server_write_handler) referenced from test_app_server.o(.constdata)
 <LI><a href="#[142]">test_write</a> from test_app_server.o(i.test_write) referenced from test_app_server.o(i.test_server_start_handler)
 <LI><a href="#[19e]">uart_clk_gate</a> from uart_integration.o(i.uart_clk_gate) referenced from uart_integration.o(.constdata)
 <LI><a href="#[19d]">uart_clk_src_cfg</a> from uart_integration.o(i.uart_clk_src_cfg) referenced from uart_integration.o(.constdata)
 <LI><a href="#[19b]">uart_intr_op</a> from uart_integration.o(i.uart_intr_op) referenced from uart_integration.o(.constdata)
 <LI><a href="#[19f]">uart_pin_cfg</a> from uart_integration.o(i.uart_pin_cfg) referenced from uart_integration.o(.constdata)
 <LI><a href="#[1a6]">uart_read_dma_callback</a> from app_uart.o(i.uart_read_dma_callback) referenced from app_uart.o(.constdata)
 <LI><a href="#[19c]">uart_sw_rst</a> from uart_integration.o(i.uart_sw_rst) referenced from uart_integration.o(.constdata)
 <LI><a href="#[1a0]">uart_sys_stat</a> from uart_integration.o(i.uart_sys_stat) referenced from uart_integration.o(.constdata)
 <LI><a href="#[1a7]">uart_write_dma_callback</a> from app_uart.o(i.uart_write_dma_callback) referenced from app_uart.o(.constdata)
 <LI><a href="#[171]">virtual_port_flow_off</a> from os_bridge.o(i.virtual_port_flow_off) referenced from os_bridge.o(.constdata)
 <LI><a href="#[170]">virtual_port_flow_on</a> from os_bridge.o(i.virtual_port_flow_on) referenced from os_bridge.o(.constdata)
 <LI><a href="#[16e]">virtual_port_read</a> from os_bridge.o(i.virtual_port_read) referenced from os_bridge.o(.constdata)
 <LI><a href="#[16f]">virtual_port_write</a> from os_bridge.o(i.virtual_port_write) referenced from os_bridge.o(.constdata)
 <LI><a href="#[1b9]">vli_mmod_fast_secp160r1</a> from uecc.o(i.vli_mmod_fast_secp160r1) referenced from uecc.o(.constdata)
 <LI><a href="#[1ba]">vli_mmod_fast_secp192r1</a> from uecc.o(i.vli_mmod_fast_secp192r1) referenced from uecc.o(.constdata)
 <LI><a href="#[1bc]">vli_mmod_fast_secp224r1</a> from uecc.o(i.vli_mmod_fast_secp224r1) referenced from uecc.o(.constdata)
 <LI><a href="#[1c0]">vli_mmod_fast_secp256k1</a> from uecc.o(i.vli_mmod_fast_secp256k1) referenced from uecc.o(.constdata)
 <LI><a href="#[1bd]">vli_mmod_fast_secp256r1</a> from uecc.o(i.vli_mmod_fast_secp256r1) referenced from uecc.o(.constdata)
 <LI><a href="#[146]">water_1pulse_a_handler</a> from water_pulse.o(i.water_1pulse_a_handler) referenced from water_pulse.o(i.water_1pulse_init)
 <LI><a href="#[132]">water_2pulse_a_delay_handler</a> from water_pulse.o(i.water_2pulse_a_delay_handler) referenced from water_pulse.o(i.os_task_os_pulse_int_e)
 <LI><a href="#[147]">water_2pulse_a_handler</a> from water_pulse.o(i.water_2pulse_a_handler) referenced from water_pulse.o(i.water_2pulse_init)
 <LI><a href="#[133]">water_2pulse_b_delay_handler</a> from water_pulse.o(i.water_2pulse_b_delay_handler) referenced from water_pulse.o(i.os_task_os_pulse_int_e)
 <LI><a href="#[148]">water_2pulse_b_handler</a> from water_pulse.o(i.water_2pulse_b_handler) referenced from water_pulse.o(i.water_2pulse_init)
 <LI><a href="#[149]">water_3pulse_a_handler</a> from water_pulse.o(i.water_3pulse_a_handler) referenced from water_pulse.o(i.water_3pulse_init)
 <LI><a href="#[14a]">water_3pulse_b_handler</a> from water_pulse.o(i.water_3pulse_b_handler) referenced from water_pulse.o(i.water_3pulse_init)
 <LI><a href="#[14b]">water_3pulse_c_handler</a> from water_pulse.o(i.water_3pulse_c_handler) referenced from water_pulse.o(i.water_3pulse_init)
 <LI><a href="#[14c]">water_auto_report</a> from water.o(i.water_auto_report) referenced from water.o(i.water_auto_report)
 <LI><a href="#[14c]">water_auto_report</a> from water.o(i.water_auto_report) referenced from water.o(i.water_init)
 <LI><a href="#[169]">water_client_get_pulse_pin_handler</a> from water_server.o(i.water_client_get_pulse_pin_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[165]">water_client_get_report_para_handler</a> from water_server.o(i.water_client_get_report_para_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[161]">water_client_get_type_handler</a> from water_server.o(i.water_client_get_type_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[167]">water_client_get_value_unit_handler</a> from water_server.o(i.water_client_get_value_unit_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[15b]">water_client_get_valve_handler</a> from water_server.o(i.water_client_get_valve_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[163]">water_client_get_valve_pin_handler</a> from water_server.o(i.water_client_get_valve_pin_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[14f]">water_client_mac_status_handler</a> from water_client.o(i.water_client_mac_status_handler) referenced from water_client.o(i.water_client_init)
 <LI><a href="#[14e]">water_client_param_status_handler</a> from water_client.o(i.water_client_param_status_handler) referenced from water_client.o(i.water_client_init)
 <LI><a href="#[154]">water_client_pulse_pin_status_handler</a> from water_client.o(i.water_client_pulse_pin_status_handler) referenced from water_client.o(i.water_client_init)
 <LI><a href="#[15f]">water_client_read_mac_handler</a> from water_server.o(i.water_client_read_mac_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[15d]">water_client_read_param_handler</a> from water_server.o(i.water_client_read_param_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[158]">water_client_read_value_handler</a> from water_server.o(i.water_client_read_value_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[152]">water_client_report_para_status_handler</a> from water_client.o(i.water_client_report_para_status_handler) referenced from water_client.o(i.water_client_init)
 <LI><a href="#[15e]">water_client_set_mac_handler</a> from water_server.o(i.water_client_set_mac_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[15c]">water_client_set_param_handler</a> from water_server.o(i.water_client_set_param_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[168]">water_client_set_pulse_pin_handler</a> from water_server.o(i.water_client_set_pulse_pin_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[164]">water_client_set_report_para_handler</a> from water_server.o(i.water_client_set_report_para_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[160]">water_client_set_type_handler</a> from water_server.o(i.water_client_set_type_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[166]">water_client_set_value_unit_handler</a> from water_server.o(i.water_client_set_value_unit_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[15a]">water_client_set_valve_handler</a> from water_server.o(i.water_client_set_valve_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[162]">water_client_set_valve_pin_handler</a> from water_server.o(i.water_client_set_valve_pin_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[150]">water_client_type_status_handler</a> from water_client.o(i.water_client_type_status_handler) referenced from water_client.o(i.water_client_init)
 <LI><a href="#[14d]">water_client_value_status_handler</a> from water_client.o(i.water_client_value_status_handler) referenced from water_client.o(i.water_client_init)
 <LI><a href="#[153]">water_client_value_unit_status_handler</a> from water_client.o(i.water_client_value_unit_status_handler) referenced from water_client.o(i.water_client_init)
 <LI><a href="#[151]">water_client_valve_pin_status_handler</a> from water_client.o(i.water_client_valve_pin_status_handler) referenced from water_client.o(i.water_client_init)
 <LI><a href="#[159]">water_client_write_value_handler</a> from water_server.o(i.water_client_write_value_handler) referenced from water_server.o(i.water_server_init)
 <LI><a href="#[156]">water_gate_record</a> from water_gate.o(i.water_gate_record) referenced from water_gate.o(i.water_gate_init)
 <LI><a href="#[155]">water_report_handler</a> from water_gate.o(i.water_report_handler) referenced from water_gate.o(i.water_gate_init)
 <LI><a href="#[157]">water_save_value</a> from water.o(i.water_save_value) referenced from water.o(i.water_init)
 <LI><a href="#[157]">water_save_value</a> from water.o(i.water_save_value) referenced from water.o(i.water_save_value)
 <LI><a href="#[1a3]">wdt_clk_gate</a> from wdt_integration.o(i.wdt_clk_gate) referenced from wdt_integration.o(.constdata)
 <LI><a href="#[1a1]">wdt_intr_op</a> from wdt_integration.o(i.wdt_intr_op) referenced from wdt_integration.o(.constdata)
 <LI><a href="#[1a4]">wdt_pin_cfg</a> from wdt_integration.o(i.wdt_pin_cfg) referenced from wdt_integration.o(.constdata)
 <LI><a href="#[1a2]">wdt_sw_rst</a> from wdt_integration.o(i.wdt_sw_rst) referenced from wdt_integration.o(.constdata)
 <LI><a href="#[1a5]">wdt_sys_stat</a> from wdt_integration.o(i.wdt_sys_stat) referenced from wdt_integration.o(.constdata)
 <LI><a href="#[1b8]">x_side_default</a> from uecc.o(i.x_side_default) referenced 4 times from uecc.o(.constdata)
 <LI><a href="#[1bf]">x_side_secp256k1</a> from uecc.o(i.x_side_secp256k1) referenced from uecc.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[224]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_delay_and_timer_counts_config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_search
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get_available_idx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_handler
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_mode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_mode_timer_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_get_meter_addr_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_handler
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_list_history
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_history
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_by_mac
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_by_addr
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ms_to_ticks
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_pwm
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_cache_push
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_cache_pop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_cache_push
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_cache_pop
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_push
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_transmit
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_do_event
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_pop
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B202_handler
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_compare
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_when_control
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_node_state_timer_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29b]"></a>__aeabi_idivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_list_history
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_history
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_bind_list
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_aid
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_stop_update_iv_index
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_start_update_iv_index
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_set_iv_index
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_route
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_list
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_list
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_recover_iv_index
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_stop_update_iv_index
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_start_update_iv_index
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_nid
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_free
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_segment_send
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_link_next
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_push
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_pop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_query
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_exchange
</UL>

<P><STRONG><a name="[49f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4e4]"></a>rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_secret_key
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_bond_req_ind_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_RNG
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_read
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_rsp_indicate
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data_patch
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_isr
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_report_unbind_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_report_bind_handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_send
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_param
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_mac
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_set_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_get_meter_addr_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_meter_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_return_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_realcomm_server_trans_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_transparent_client_trans
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_client_trans
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_write_value_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_param_handler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_report_handler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_list_node
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_insert_node
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_value_status_handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_param_status_handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_get
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_param
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_mac
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_report
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pack
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_get_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_get_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_get_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_get_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_add_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_unbind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_handler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_get
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_set
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_update
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_set
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_update
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_set
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_offer_handler
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_add
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_recv
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_push
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_obfuscation
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_netid
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_master_encryption_and_privacy_keys
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_identity_key
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_beacon_key
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_transmit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_confirmation
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_provision_key
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_confirmation
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adapter_gatt_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_notify
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_phone_connected
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_connect_start
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_send_adv
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_start_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_random_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_publickey_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_publickey
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_invite_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_confirmation_handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_confirmation
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_new
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_encrypt2
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_decrypt2
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_handler
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_data_recv_handler
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_init
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_blocks2
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_padding2
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_mac
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_encrypt
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_decrypt
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_use_enc_blck_cmd
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_enc_last_result_get
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k3_derivation
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k2_derivation
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_add_prov_svc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_use_enc_block_ind_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B406_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B202_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B201_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B104_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B102_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_handler
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_update
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_addr
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_routers
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_when_control
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_repeat_timer_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_app_broadcast_data
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_pack
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_tx_pkt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_repeat_timer_handler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_frame
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write_dma
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_handler
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_load_para
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_transmit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_invite_handler
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_encrypt2
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_uart_handler
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_mac
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k4_derivation
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B201_handler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_overtime_handler
</UL>

<P><STRONG><a name="[27f]"></a>__aeabi_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_list_history
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_subscribe
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_bind
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_authentication_action
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_exchange
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_init
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_server_init
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_server_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_list_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_authentication_action
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_hold_timeout_handler
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_encrypt2
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_decrypt2
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_start
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart1_timer_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart0_timer_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart0_read_callback
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_padding2
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B406_handler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsMemoryParaRead
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_return_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_composition_data_get_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_get_handler
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_meter_cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_hex
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_provision_key
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_record_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_hold_timeout_handler
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_uart_handler
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k2_derivation
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B406_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B201_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_routers
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
</UL>

<P><STRONG><a name="[18]"></a>memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_data_ver_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_get_meter_addr_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_broadcast_data_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_exc_status_handler
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_insert_node
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_by_mac
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_client_response_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_recv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_recv
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_update
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_set
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_confirmation
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_get_by_mac
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_mac
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_decrypt2
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_callback
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B104_handler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_queue.o(i.os_queue_is_in)
</UL>
<P><STRONG><a name="[499]"></a>strcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[462]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[460]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[29e]"></a>__ARM_common_switch8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_param_init_wrapper
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_func_ptr_get
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_int_idx_get
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sys_stat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sys_stat
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_pin_cfg
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_clk_gate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_baudrate_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_gpio
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iowrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_ioread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iopull
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_init
</UL>

<P><STRONG><a name="[61b]"></a>ahi_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[507]"></a>attm_svc_create_db</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>

<P><STRONG><a name="[51b]"></a>co_list_extract</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
</UL>

<P><STRONG><a name="[518]"></a>co_list_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>

<P><STRONG><a name="[516]"></a>co_list_pop_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_destroy
</UL>

<P><STRONG><a name="[4a6]"></a>co_list_push_back</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_handler_register
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
</UL>

<P><STRONG><a name="[61e]"></a>ea_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[627]"></a>ea_timer_target_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[5a2]"></a>em_buf_tx_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush_patch_c
</UL>

<P><STRONG><a name="[537]"></a>gapm_get_local_addrtype</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
</UL>

<P><STRONG><a name="[541]"></a>gapm_send_complete_evt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler_patch
</UL>

<P><STRONG><a name="[540]"></a>gapm_send_error_evt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>

<P><STRONG><a name="[53c]"></a>gapm_set_adv_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
</UL>

<P><STRONG><a name="[542]"></a>gapm_update_air_op_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler_patch
</UL>

<P><STRONG><a name="[53e]"></a>gapm_update_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>

<P><STRONG><a name="[619]"></a>h4tl_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[61a]"></a>hci_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[620]"></a>hci_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[538]"></a>hci_send_2_controller</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data_patch
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
</UL>

<P><STRONG><a name="[5a0]"></a>hci_send_2_host</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_chk_tst_mode_patch
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[4f4]"></a>ke_event_get_all</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_schedule
</UL>

<P><STRONG><a name="[622]"></a>ke_event_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule
</UL>

<P><STRONG><a name="[62b]"></a>ke_event_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>

<P><STRONG><a name="[61f]"></a>ke_flush</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[501]"></a>ke_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_destroy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_destroy
</UL>

<P><STRONG><a name="[616]"></a>ke_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[508]"></a>ke_malloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>

<P><STRONG><a name="[617]"></a>ke_mem_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[50c]"></a>ke_msg_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_rsp_indicate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data_patch
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_chk_tst_mode_patch
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[50d]"></a>ke_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_rsp_indicate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256_callback
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
</UL>

<P><STRONG><a name="[515]"></a>ke_msg_send_basic</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_chk_tst_mode_patch
</UL>

<P><STRONG><a name="[53f]"></a>ke_msg_src_id_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>

<P><STRONG><a name="[624]"></a>ke_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[4ff]"></a>ke_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_cleanup
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_cfm_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_firmware_dest_cmd_handler
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[500]"></a>ke_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_cleanup
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_cfm_handler
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_state_update
</UL>

<P><STRONG><a name="[5de]"></a>ke_task_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[5dd]"></a>ke_task_msg_flush</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[53b]"></a>ke_timer_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[626]"></a>ke_timer_target_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[59a]"></a>llc_llcp_con_param_req_pdu_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[59e]"></a>llc_llcp_con_update_pdu_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[599]"></a>lld_con_param_req</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[5a1]"></a>lld_con_update_after_param_req</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[59d]"></a>lld_con_update_req</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[59c]"></a>lld_get_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[598]"></a>llm_util_check_evt_mask</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[61c]"></a>rwble_hl_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[61d]"></a>rwble_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[68d]"></a>rwble_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_MAC_IRQHandler
</UL>

<P><STRONG><a name="[621]"></a>rwble_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[625]"></a>rwble_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[16c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(n_xip_section)
</UL>
<P><STRONG><a name="[6d4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[457]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[46b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6d5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6d6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6d7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6d8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[6d9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[67f]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[681]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[683]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[c9]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>LLD_EVT_DRIFT_COMPUTE_PATCH</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rc32k_patch_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_drift_compute_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc32k_patch.o(i.set_rc32k_patch)
</UL>
<P><STRONG><a name="[13f]"></a>LLD_PDU_TX_FLUSH_LIST_PATCH</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lld_pdu_tx_flush_list_patch_asm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LLD_PDU_TX_FLUSH_LIST_PATCH &rArr; lld_pdu_tx_flush_patch_c
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush_patch_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_pdu_tx_flush_list_patch.o(i.set_lld_pdu_tx_flush_patch)
</UL>
<P><STRONG><a name="[6da]"></a>___aeabi_memcpy$move</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6db]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6dc]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>

<P><STRONG><a name="[6dd]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6de]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_cmd_process
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_pwm
</UL>

<P><STRONG><a name="[26b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_realcomm_server_trans_handler
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_mac
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_mac
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_trans
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_meter_cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_hex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_ascii
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_subscribe
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_bind
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_val_by_mac
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_netkey
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_appkey
</UL>

<P><STRONG><a name="[285]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_cmd_process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_result
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_light_switch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_echo
</UL>

<P><STRONG><a name="[33f]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_reg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_result_status_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_read_status_handler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_write_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
</UL>

<P><STRONG><a name="[6df]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[6e0]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_valve
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_value
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_val_pin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_unit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_type
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_report
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_pul_pin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_param
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_mac
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_valve
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_value
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_val_pin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_unit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_type
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_report
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_pul_pin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_param
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_mac
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_update_iv_index
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_result
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_pwm
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_role
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_lowpower_para
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_light_mode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_iv_index
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_gpio
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_dBm
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_baud
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_addr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_trans
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_meter_cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_hex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_ascii
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_onoff_log
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_light_switch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_light_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iowrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_ioread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iopull
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_iv_index
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_val_by_addr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_set_param
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_history
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_get_history
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_end_pwm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_appkey
</UL>

<P><STRONG><a name="[2c1]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_pwm
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2c0]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_pwm
</UL>

<P><STRONG><a name="[2c2]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_pwm
</UL>

<P><STRONG><a name="[461]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[45c]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[45d]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6e1]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[45f]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[466]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[468]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[469]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[46a]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[458]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[6e2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[c6]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>PGSPY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[46c]"></a>bx_delay_asm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bx_dbg_asm.o(BX_DELAY_ASM))
<BR><BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_b_delay_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_a_delay_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_bxotas_finish_ind_handler
</UL>

<P><STRONG><a name="[f2]"></a>rwip_assert_asm</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, bx_dbg_asm.o(RWIP_ASSERT_ASM))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_c
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_lpcycles_2_us
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_lld_wakeup_time_set
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_eif_get
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radiocntl1_pack
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[470]"></a>ArrayXor</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aes128_cmac.o(i.ArrayXor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArrayXor
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMacKey
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateMAC
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_mac
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_encrypt
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_decrypt
</UL>

<P><STRONG><a name="[cc]"></a>BLE_LP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_sleep.o(i.BLE_LP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BLE_LP_IRQHandler &rArr; ble_lp_isr_mp &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[46f]"></a>CTR_decrypt</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, aes128_ccm.o(i.CTR_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = CTR_decrypt &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayXor
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_decrypt2
</UL>

<P><STRONG><a name="[471]"></a>CTR_encrypt</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, aes128_ccm.o(i.CTR_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = CTR_encrypt &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayXor
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_encrypt2
</UL>

<P><STRONG><a name="[d1]"></a>DMAC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dmac_integration.o(i.DMAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DMAC_IRQHandler &rArr; app_dmac_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>ECC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hwecc_integration.o(i.ECC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ECC_IRQHandler &rArr; app_hwecc_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>EXT_INTR_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, io_ctrl.o(i.EXT_INTR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXT_INTR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>GPIO_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_integration.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_IRQHandler &rArr; app_gpio_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[482]"></a>GenerateMAC</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, aes128_cmac.o(i.GenerateMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayXor
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>

<P><STRONG><a name="[d8]"></a>IIC0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iic_integration.o(i.IIC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IIC0_IRQHandler &rArr; app_iic_isr &rArr; iic_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>IIC1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iic_integration.o(i.IIC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IIC1_IRQHandler &rArr; app_iic_isr &rArr; iic_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[484]"></a>LoadMacKey</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, aes128_cmac.o(i.LoadMacKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = LoadMacKey &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftshift
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayXor
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>

<P><STRONG><a name="[486]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
</UL>

<P><STRONG><a name="[488]"></a>SEGGER_RTT_SetTerminal</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_SetTerminal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_SetTerminal &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>

<P><STRONG><a name="[48c]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[48d]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[48e]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 382 bytes, Stack size 128 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>

<P><STRONG><a name="[dc]"></a>SFT_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swint.o(i.SFT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>SPIM0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_integration.o(i.SPIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SPIM0_IRQHandler &rArr; app_spi_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>SPIM1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_integration.o(i.SPIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SPIM1_IRQHandler &rArr; app_spi_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>SPIS_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_integration.o(i.SPIS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SPIS_IRQHandler &rArr; app_spi_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>SVC_Handler_C</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, svcall.o(i.SVC_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SVC_Handler_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall_asm.o(n_xip_section)
</UL>
<P><STRONG><a name="[db]"></a>TIMER_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timer_integration.o(i.TIMER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_integration.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UART0_IRQHandler &rArr; app_uart_isr &rArr; uart_rx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>UART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_integration.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UART1_IRQHandler &rArr; app_uart_isr &rArr; uart_rx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>WDT_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wdt_integration.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = WDT_IRQHandler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[49a]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e4]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4c9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_realcomm_server_trans_handler
</UL>

<P><STRONG><a name="[6e5]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[6e6]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[49c]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e7]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[6e8]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[6e9]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[26a]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
</UL>

<P><STRONG><a name="[464]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5bc]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ecc_p256.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp256k1
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muladd
</UL>

<P><STRONG><a name="[45e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[6ea]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[6eb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[6ec]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[6ed]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[411]"></a>aes128_encryption</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, aes128.o(i.aes128_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_use_enc_blck_cmd
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_enc_last_result_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_obfuscation
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMacKey
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateMAC
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_mac
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_encrypt
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_decrypt
</UL>

<P><STRONG><a name="[4a3]"></a>aes_128_enc_last_result_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_adapt.o(i.aes_128_enc_last_result_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_128_enc_last_result_get
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
</UL>

<P><STRONG><a name="[4a4]"></a>aes_cbc_mac</STRONG> (Thumb, 164 bytes, Stack size 104 bytes, aes128_ccm.o(i.aes_cbc_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = aes_cbc_mac &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayXor
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_encrypt2
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_decrypt2
</UL>

<P><STRONG><a name="[4a5]"></a>ahi_handler_register</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osapp_task.o(i.ahi_handler_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ahi_handler_register
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
</UL>

<P><STRONG><a name="[4a7]"></a>ahi_msg_alloc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_task.o(i.ahi_msg_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ahi_msg_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_notify
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnect
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_exchange_mtu
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_send_adv
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_adv
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_reset
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connect
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_use_enc_blck_cmd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_add_prov_svc
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_config
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_get_dev_info_req_ind_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_bxotas_start_req_ind_handler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_param_update_req_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_bond_req_ind_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_req_handler
</UL>

<P><STRONG><a name="[5d1]"></a>app_adc_util_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, osapp_task.o(i.app_adc_util_init))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
</UL>

<P><STRONG><a name="[1ec]"></a>app_dmac_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_dmac.o(i.app_dmac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_dmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_init_wrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_dmac_wrapper.o(.data)
</UL>
<P><STRONG><a name="[4a9]"></a>app_dmac_init_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_dmac_wrapper.o(i.app_dmac_init_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_dmac_init_wrapper &rArr; app_dmac_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[472]"></a>app_dmac_isr</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, app_dmac.o(i.app_dmac_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_dmac_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_stat_clean_if_all_transfer_done
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_tfr_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAC_IRQHandler
</UL>

<P><STRONG><a name="[4ac]"></a>app_dmac_transfer_cancel</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, app_dmac.o(i.app_dmac_transfer_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_dmac_transfer_cancel &rArr; dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_ch_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_cancel_wrapper
</UL>

<P><STRONG><a name="[4ae]"></a>app_dmac_transfer_cancel_wrapper</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_dmac_wrapper.o(i.app_dmac_transfer_cancel_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_dmac_transfer_cancel_wrapper &rArr; app_dmac_transfer_cancel &rArr; dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>

<P><STRONG><a name="[101]"></a>app_expand1_device_server_info_get_handler</STRONG> (Thumb, 116 bytes, Stack size 120 bytes, app_expand1_device_server.o(i.app_expand1_device_server_info_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = app_expand1_device_server_info_get_handler &rArr; jmesh_app_expand1_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_get_version
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_get_type
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_get_mac
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_send
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand2_list_register_opcode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand1_device_server.o(i.jmesh_app_expand1_device_server_init)
</UL>
<P><STRONG><a name="[102]"></a>app_expand1_device_server_report_bind_handler</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, app_expand1_device_server.o(i.app_expand1_device_server_report_bind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = app_expand1_device_server_report_bind_handler &rArr; jmesh_app_expand1_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand1_device_server.o(i.jmesh_app_expand1_device_server_init)
</UL>
<P><STRONG><a name="[104]"></a>app_expand1_device_server_report_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_expand1_device_server.o(i.app_expand1_device_server_report_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_expand1_device_server_report_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_report_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand1_device_server.o(i.jmesh_app_expand1_device_server_init)
</UL>
<P><STRONG><a name="[103]"></a>app_expand1_device_server_report_unbind_handler</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, app_expand1_device_server.o(i.app_expand1_device_server_report_unbind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = app_expand1_device_server_report_unbind_handler &rArr; jmesh_app_expand1_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand1_device_server.o(i.jmesh_app_expand1_device_server_init)
</UL>
<P><STRONG><a name="[4b2]"></a>app_expand2_list_register_opcode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_expand.o(i.app_expand2_list_register_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_expand2_list_register_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_info_get_handler
</UL>

<P><STRONG><a name="[353]"></a>app_expand_model_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_expand.o(i.app_expand_model_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = app_expand_model_init &rArr; jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_add_model
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_init
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
</UL>

<P><STRONG><a name="[10e]"></a>app_gateway_read_meter_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_expand2_realcomm_server.o(i.app_gateway_read_meter_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = app_gateway_read_meter_handler &rArr; read_meter_handler &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_send_save_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[1e7]"></a>app_gpio_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_gpio.o(i.app_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_gpio_init &rArr; gpio_int_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_int_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_ctrl.o(.data)
</UL>
<P><STRONG><a name="[481]"></a>app_gpio_isr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_gpio.o(i.app_gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gpio_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[552]"></a>app_gpio_port_dir_input_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_dir_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>

<P><STRONG><a name="[554]"></a>app_gpio_port_dir_output_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_dir_output_set))
<BR><BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
</UL>

<P><STRONG><a name="[55b]"></a>app_gpio_port_in_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_in_read))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
</UL>

<P><STRONG><a name="[559]"></a>app_gpio_port_out_clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_out_clr))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
</UL>

<P><STRONG><a name="[55c]"></a>app_gpio_port_out_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_out_set))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
</UL>

<P><STRONG><a name="[4b8]"></a>app_hwecc_calculate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_hwecc.o(i.app_hwecc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_hwecc_calculate &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_calculate_start
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate_wrapper
</UL>

<P><STRONG><a name="[4bb]"></a>app_hwecc_calculate_wrapper</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, app_hwecc_wrapper.o(i.app_hwecc_calculate_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = app_hwecc_calculate_wrapper &rArr; app_hwecc_calculate &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
</UL>

<P><STRONG><a name="[1ed]"></a>app_hwecc_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_hwecc.o(i.app_hwecc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_hwecc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_init_wrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_hwecc_wrapper.o(.data)
</UL>
<P><STRONG><a name="[4bd]"></a>app_hwecc_init_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_hwecc_wrapper.o(i.app_hwecc_init_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_hwecc_init_wrapper &rArr; app_hwecc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[473]"></a>app_hwecc_isr</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_hwecc.o(i.app_hwecc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_hwecc_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_IRQHandler
</UL>

<P><STRONG><a name="[483]"></a>app_iic_isr</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, app_iic.o(i.app_iic_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_iic_isr &rArr; iic_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_cancel_wrapper
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_empty_isr
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_complete
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_rx_complete
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_clear_all_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_IRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>app_pwm_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bx2400_pwm.o(.data)
</UL>
<P><STRONG><a name="[583]"></a>app_pwm_start</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_pwm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
</UL>

<P><STRONG><a name="[584]"></a>app_pwm_stop</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_pwm_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
</UL>

<P><STRONG><a name="[4c3]"></a>app_queue_ahi_rsp_send</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, osapp_task.o(i.app_queue_ahi_rsp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = app_queue_ahi_rsp_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_write
</UL>

<P><STRONG><a name="[4c5]"></a>app_queue_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, osapp_task.o(i.app_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = app_queue_create &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>

<P><STRONG><a name="[492]"></a>app_spi_isr</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, app_spi.o(i.app_spi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_spi_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_empty_isr
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_full_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIS_IRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_IRQHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_IRQHandler
</UL>

<P><STRONG><a name="[493]"></a>app_timer_isr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_isr))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>

<P><STRONG><a name="[4ce]"></a>app_uart_flow_off</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_uart.o(i.app_uart_flow_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_uart_flow_off
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[4cd]"></a>app_uart_flow_on</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_uart.o(i.app_uart_flow_on))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[1f9]"></a>app_uart_init</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, app_uart.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_uart_init &rArr; app_uart_flow_off
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisor
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flow_on
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flow_off
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bx2400_uart.o(.data)
</UL>
<P><STRONG><a name="[494]"></a>app_uart_isr</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, app_uart.o(i.app_uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_uart_isr &rArr; uart_rx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_complete
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_error_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4d3]"></a>app_uart_read</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_uart.o(i.app_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = app_uart_read &rArr; app_uart_read_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_p
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transfer_sanity_check
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_start
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart1_timer_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart1_read_callback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart0_read_callback
</UL>

<P><STRONG><a name="[4d9]"></a>app_uart_write</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_uart.o(i.app_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_p
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transfer_sanity_check
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send_no_take_semphr
</UL>

<P><STRONG><a name="[58d]"></a>app_wdt_feed_dog</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_wdt.o(i.app_wdt_feed_dog))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_sub_reset
</UL>

<P><STRONG><a name="[1f8]"></a>app_wdt_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_wdt.o(i.app_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_wdt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bx2400_system.o(.data)
</UL>
<P><STRONG><a name="[495]"></a>app_wdt_isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_wdt.o(i.app_wdt_isr))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[58c]"></a>app_wdt_start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_wdt.o(i.app_wdt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_wdt_start
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_init
</UL>

<P><STRONG><a name="[2aa]"></a>baudrate_to_enum</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, bx2400_uart.o(i.baudrate_to_enum))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_baud
</UL>

<P><STRONG><a name="[4dc]"></a>ble_config</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ble_adapt.o(i.ble_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ble_config &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[629]"></a>ble_lp_intr_clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_sleep.o(i.ble_lp_intr_clr))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[4e9]"></a>ble_lp_irq_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_sleep.o(i.ble_lp_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_lp_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_blelp_inrp_en_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[46e]"></a>ble_lp_isr_mp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sys_sleep.o(i.ble_lp_isr_mp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_lp_isr_mp &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_blelp_inrp_en_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LP_IRQHandler
</UL>

<P><STRONG><a name="[4ee]"></a>ble_msg_start_recv</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_bridge.o(i.ble_msg_start_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_msg_start_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swint_req
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task
</UL>

<P><STRONG><a name="[4f1]"></a>ble_queue_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_task.o(i.ble_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ble_queue_create &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>

<P><STRONG><a name="[4f3]"></a>ble_schedule</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sys_sleep.o(i.ble_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ble_schedule &rArr; ble_soft_wakeup &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_get_all
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_soft_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task
</UL>

<P><STRONG><a name="[4f5]"></a>ble_soft_wakeup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys_sleep.o(i.ble_soft_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_soft_wakeup &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_schedule
</UL>

<P><STRONG><a name="[f6]"></a>ble_stack_task</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_task.o(i.ble_stack_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = ble_stack_task &rArr; rwip_init &rArr; rf_init &rArr; ble_radiocntl1_pack &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_schedule
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_msg_start_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_task.o(i.ble_stack_task_create)
</UL>
<P><STRONG><a name="[4fa]"></a>ble_stack_task_create</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ble_task.o(i.ble_stack_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ble_stack_task_create &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>

<P><STRONG><a name="[4fb]"></a>block_padding2</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aes128_ccm.o(i.block_padding2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_padding2
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_blocks2
</UL>

<P><STRONG><a name="[4fc]"></a>bx_lld_wakeup_time_set</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bx_lld_sleep.o(i.bx_lld_wakeup_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = bx_lld_wakeup_time_set &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_delay_set
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[502]"></a>bxotas_erase_flash</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bxotas.o(i.bxotas_erase_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = bxotas_erase_flash &rArr; flash_erase &rArr; flash_erase_operation &rArr; flash_erase_execution &rArr; flash_erase_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_sub_reset
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_flash_cleanup_for_ota
</UL>

<P><STRONG><a name="[505]"></a>bxotas_flash_cleanup_for_ota</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bxotas.o(i.bxotas_flash_cleanup_for_ota))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = bxotas_flash_cleanup_for_ota &rArr; bxotas_erase_flash &rArr; flash_erase &rArr; flash_erase_operation &rArr; flash_erase_execution &rArr; flash_erase_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_erase_flash
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_cfm_handler
</UL>

<P><STRONG><a name="[506]"></a>bxotas_image_validation</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bxotas.o(i.bxotas_image_validation))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = bxotas_image_validation &rArr; flash_program &rArr; flash_program_operation &rArr; flash_program_execution &rArr; flash_program_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
</UL>

<P><STRONG><a name="[5df]"></a>bxotas_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bxotas.o(i.bxotas_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[509]"></a>bxotas_program_flash</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bxotas.o(i.bxotas_program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = bxotas_program_flash &rArr; flash_program &rArr; flash_program_operation &rArr; flash_program_execution &rArr; flash_program_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[62c]"></a>cal_patch_bl</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, patch.o(i.cal_patch_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_patch_bl
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lld_pdu_tx_flush_patch
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc32k_patch
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
</UL>

<P><STRONG><a name="[206]"></a>check_sum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, protocol_645.o(i.check_sum))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pack
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pick
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_CheckFrame
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_frame
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>

<P><STRONG><a name="[50e]"></a>clk_gate_per_g0</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clk_gate.o(i.clk_gate_per_g0))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = clk_gate_per_g0 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_clk_src_cfg
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_clk_gate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clk_gate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_clk_gate
</UL>

<P><STRONG><a name="[50f]"></a>clk_gate_per_g1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clk_gate.o(i.clk_gate_per_g1))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = clk_gate_per_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_clk_src_cfg
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_gate
</UL>

<P><STRONG><a name="[510]"></a>cpu_domain_busy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, periph_mngt.o(i.cpu_domain_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpu_domain_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
</UL>

<P><STRONG><a name="[51a]"></a>diss_check_val_len</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, diss.o(i.diss_check_val_len))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
</UL>

<P><STRONG><a name="[517]"></a>diss_compute_cfg_flag</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, diss.o(i.diss_compute_cfg_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = diss_compute_cfg_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>

<P><STRONG><a name="[543]"></a>diss_handle_to_value</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, diss.o(i.diss_handle_to_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = diss_handle_to_value
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[5e0]"></a>diss_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diss.o(i.diss_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[519]"></a>diss_value_to_handle</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, diss.o(i.diss_value_to_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = diss_value_to_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
</UL>

<P><STRONG><a name="[4d7]"></a>dmac_get_burst_transaction_size_enum</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, app_dmac.o(i.dmac_get_burst_transaction_size_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dmac_get_burst_transaction_size_enum &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
</UL>

<P><STRONG><a name="[527]"></a>dmac_get_max_block_transfer_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_dmac.o(i.dmac_get_max_block_transfer_size))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>

<P><STRONG><a name="[68f]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[eb]"></a>ecc_gen_new_public_key</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ecc_p256.o(i.ecc_gen_new_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ecc_gen_new_public_key &rArr; ecc_generate_key256 &rArr; app_hwecc_calculate_wrapper &rArr; app_hwecc_calculate &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[ea]"></a>ecc_gen_new_secret_key</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ecc_p256.o(i.ecc_gen_new_secret_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecc_gen_new_secret_key
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_write32p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[e9]"></a>ecc_generate_key256</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, ecc_p256.o(i.ecc_generate_key256))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ecc_generate_key256 &rArr; app_hwecc_calculate_wrapper &rArr; app_hwecc_calculate &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_public_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[185]"></a>ecc_generate_key256_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecc_p256.o(i.ecc_generate_key256_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ecc_generate_key256_callback &rArr; msg2blestack_from_ISR &rArr; msg_send_isr &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecc_p256.o(.constdata)
</UL>
<P><STRONG><a name="[618]"></a>ecc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ecc_p256.o(i.ecc_init))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[521]"></a>enable_32m_rc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_sleep.o(i.enable_32m_rc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_32m_rc
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[fa]"></a>flash_dual_io_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, flash_wrapper.o(i.flash_dual_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = flash_dual_io_read &rArr; flash_multi_read &rArr; flash_multi_read_word &rArr; flash_multi_read_32bits_operation &rArr; flash_multi_read_32bits_execution &rArr; flash_multi_read_32bits_operation_start &rArr; app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_wrapper.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[f8]"></a>flash_dual_output_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, flash_wrapper.o(i.flash_dual_output_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = flash_dual_output_read &rArr; flash_multi_read &rArr; flash_multi_read_word &rArr; flash_multi_read_32bits_operation &rArr; flash_multi_read_32bits_execution &rArr; flash_multi_read_32bits_operation_start &rArr; app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_wrapper.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[503]"></a>flash_erase</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, flash_wrapper.o(i.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = flash_erase &rArr; flash_erase_operation &rArr; flash_erase_execution &rArr; flash_erase_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_erase_flash
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_wrapper
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_init
</UL>

<P><STRONG><a name="[525]"></a>flash_erase_operation</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_integration.o(i.flash_erase_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = flash_erase_operation &rArr; flash_erase_execution &rArr; flash_erase_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_execution
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[528]"></a>flash_multi_read_32bits_operation</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_integration.o(i.flash_multi_read_32bits_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = flash_multi_read_32bits_operation &rArr; flash_multi_read_32bits_execution &rArr; flash_multi_read_32bits_operation_start &rArr; app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_32bits_execution
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_word
</UL>

<P><STRONG><a name="[130]"></a>flash_program</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, flash_wrapper.o(i.flash_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = flash_program &rArr; flash_program_operation &rArr; flash_program_execution &rArr; flash_program_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_program_flash
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_image_validation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds_in_ram.o(i.nvds_init)
</UL>
<P><STRONG><a name="[529]"></a>flash_program_operation</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_integration.o(i.flash_program_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = flash_program_operation &rArr; flash_program_execution &rArr; flash_program_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_execution
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
</UL>

<P><STRONG><a name="[fb]"></a>flash_quad_io_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, flash_wrapper.o(i.flash_quad_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = flash_quad_io_read &rArr; flash_multi_read &rArr; flash_multi_read_word &rArr; flash_multi_read_32bits_operation &rArr; flash_multi_read_32bits_execution &rArr; flash_multi_read_32bits_operation_start &rArr; app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_wrapper.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[f9]"></a>flash_quad_output_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, flash_wrapper.o(i.flash_quad_output_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = flash_quad_output_read &rArr; flash_multi_read &rArr; flash_multi_read_word &rArr; flash_multi_read_32bits_operation &rArr; flash_multi_read_32bits_execution &rArr; flash_multi_read_32bits_operation_start &rArr; app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_wrapper.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[f7]"></a>flash_read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, flash_wrapper.o(i.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = flash_read &rArr; flash_read_byte &rArr; flash_read_operation &rArr; flash_read_execution &rArr; flash_read_operation_start &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_get_max_block_transfer_size
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_image_validation
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_flash_cleanup_for_ota
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_wrapper.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[52c]"></a>flash_read_func_ptr_get</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, flash_wrapper.o(i.flash_read_func_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_read_func_ptr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
</UL>

<P><STRONG><a name="[52b]"></a>flash_read_operation</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_integration.o(i.flash_read_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = flash_read_operation &rArr; flash_read_execution &rArr; flash_read_operation_start &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_execution
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_byte
</UL>

<P><STRONG><a name="[3e8]"></a>friend_poll_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, jmesh_friend.o(i.friend_poll_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = friend_poll_handler &rArr; jmesh_routing_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_get_by_addr
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_link_require
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_get
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
</UL>

<P><STRONG><a name="[534]"></a>gapm_adv_op_sanity_patch</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, set_adv_payload_31byte_patch.o(i.gapm_adv_op_sanity_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_adv_op_sanity_patch &rArr; gapm_get_operation_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler_patch
</UL>

<P><STRONG><a name="[536]"></a>gapm_execute_adv_op_patch</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, set_adv_payload_31byte_patch.o(i.gapm_execute_adv_op_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapm_execute_adv_op_patch &rArr; gapm_set_adv_data_patch &rArr; gapm_get_operation_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_mode
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_addrtype
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data_patch
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation_ptr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler_patch
</UL>

<P><STRONG><a name="[539]"></a>gapm_set_adv_data_patch</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, set_adv_payload_31byte_patch.o(i.gapm_set_adv_data_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_set_adv_data_patch &rArr; gapm_get_operation_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
</UL>

<P><STRONG><a name="[545]"></a>generate_blocks2</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, aes128_ccm.o(i.generate_blocks2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = generate_blocks2 &rArr; block_padding2
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_padding2
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_encrypt2
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_decrypt2
</UL>

<P><STRONG><a name="[628]"></a>get_rc32k_calib_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rc_calib.o(i.get_rc32k_calib_val))
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_lpcycles_2_us
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_delay_and_timer_counts_config
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[417]"></a>internal_log_print</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, internal_log.o(i.internal_log_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = internal_log_print &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_increase
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_end
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_default_msg_handler
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_flash_cleanup_for_ota
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_print
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_c
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_int_idx_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sys_stat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_sys_stat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sys_stat
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_sys_stat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_sys_stat
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sys_stat
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_sys_stat
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_sys_stat
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_error_isr
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_pop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_int_callback
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gattm_add_svc_rsp_handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_profile_added_ind_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_bxotas_start_req_ind_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_bxotas_finish_ind_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_connection_confirm_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_bond_req_ind_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_bond_ind_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disc_incl_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disc_desc_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disc_char_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_default_handler
</UL>

<P><STRONG><a name="[550]"></a>io_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, io_ctrl.o(i.io_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_cfg_input &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config_mask
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_dir_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_dir_set
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_3pulse_uinit
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_uinit
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_1pulse_uinit
</UL>

<P><STRONG><a name="[553]"></a>io_cfg_output</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, io_ctrl.o(i.io_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config_mask
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_dir_output_set
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_dir_set
</UL>

<P><STRONG><a name="[555]"></a>io_ext_int_cfg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, io_ctrl.o(i.io_ext_int_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = io_ext_int_cfg &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_int_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_3pulse_init
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_init
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_1pulse_init
</UL>

<P><STRONG><a name="[557]"></a>io_ext_int_en</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, io_ctrl.o(i.io_ext_int_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = io_ext_int_en &rArr; io_ext_int_ctrl &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_3pulse_init
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_init
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_1pulse_init
</UL>

<P><STRONG><a name="[558]"></a>io_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, io_ctrl.o(i.io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = io_init &rArr; app_gpio_init &rArr; gpio_int_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[208]"></a>io_pin_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_ctrl.o(i.io_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_port_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_read
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_control_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_reset
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_WriteData
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_ReadData
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_GetResp
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>

<P><STRONG><a name="[409]"></a>io_pin_dir_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, io_ctrl.o(i.io_pin_dir_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_pin_dir_set &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_mode_out_pp
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_mode_in_pu
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_control_init
</UL>

<P><STRONG><a name="[55a]"></a>io_pin_pull_write</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, io_ctrl.o(i.io_pin_pull_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = io_pin_pull_write &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_3pulse_init
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_1pulse_init
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_mode_out_pp
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_mode_in_pu
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_init
</UL>

<P><STRONG><a name="[24f]"></a>io_pin_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, io_ctrl.o(i.io_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_in_read
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_b_delay_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_a_delay_handler
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_valve
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckTransmitted
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_si4438Patch
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_configuration_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_for_channel_idle
</UL>

<P><STRONG><a name="[201]"></a>io_pin_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_ctrl.o(i.io_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_port_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_read
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_control_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_reset
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_WriteData
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_ReadData
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_GetResp
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>

<P><STRONG><a name="[55d]"></a>io_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, io_ctrl.o(i.io_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_write
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_read
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_valve
</UL>

<P><STRONG><a name="[3dd]"></a>jmesh_adapter_gatt_send</STRONG> (Thumb, 86 bytes, Stack size 272 bytes, bx2400_ble.o(i.jmesh_adapter_gatt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + In Cycle
<LI>Call Chain = jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_push
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
</UL>

<P><STRONG><a name="[4e5]"></a>jmesh_add_prov_svc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, jmesh_prov_svc.o(i.jmesh_add_prov_svc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = jmesh_add_prov_svc &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[277]"></a>jmesh_adv_send</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, bx2400_ble.o(i.jmesh_adv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = jmesh_adv_send &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_send_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ota_adv_schedule
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_message2
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_beacon
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_message
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ota_adv
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_link_require
</UL>

<P><STRONG><a name="[ff]"></a>jmesh_app_expand1_device_client_info_status</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, app_expand1_device_client.o(i.jmesh_app_expand1_device_client_info_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = jmesh_app_expand1_device_client_info_status &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand1_device_client.o(i.jmesh_app_expand1_device_client_init)
</UL>
<P><STRONG><a name="[563]"></a>jmesh_app_expand1_device_client_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_expand1_device_client.o(i.jmesh_app_expand1_device_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = jmesh_app_expand1_device_client_init &rArr; jmesh_app_expand1_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_message_register
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_init
</UL>

<P><STRONG><a name="[100]"></a>jmesh_app_expand1_device_client_report_status</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_expand1_device_client.o(i.jmesh_app_expand1_device_client_report_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = jmesh_app_expand1_device_client_report_status &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand1_device_client.o(i.jmesh_app_expand1_device_client_init)
</UL>
<P><STRONG><a name="[4b1]"></a>jmesh_app_expand1_device_get_mac</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_expand1_device_callback.o(i.jmesh_app_expand1_device_get_mac))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_info_get_handler
</UL>

<P><STRONG><a name="[4af]"></a>jmesh_app_expand1_device_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_expand1_device_callback.o(i.jmesh_app_expand1_device_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_info_get_handler
</UL>

<P><STRONG><a name="[4b0]"></a>jmesh_app_expand1_device_get_version</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_expand1_device_callback.o(i.jmesh_app_expand1_device_get_version))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_info_get_handler
</UL>

<P><STRONG><a name="[4b4]"></a>jmesh_app_expand1_device_report_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_expand1_device_callback.o(i.jmesh_app_expand1_device_report_callback))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_report_handler
</UL>

<P><STRONG><a name="[565]"></a>jmesh_app_expand1_device_server_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_expand1_device_server.o(i.jmesh_app_expand1_device_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = jmesh_app_expand1_device_server_init &rArr; jmesh_app_expand1_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_message_register
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_init
</UL>

<P><STRONG><a name="[4b5]"></a>jmesh_app_expand1_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_expand1.o(i.jmesh_app_expand1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = jmesh_app_expand1_init &rArr; jmesh_app_expand1_device_server_init &rArr; jmesh_app_expand1_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_server_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_client_init
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand_model_init
</UL>

<P><STRONG><a name="[564]"></a>jmesh_app_expand1_message_register</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_expand.o(i.jmesh_app_expand1_message_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jmesh_app_expand1_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_server_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_client_init
</UL>

<P><STRONG><a name="[4b3]"></a>jmesh_app_expand1_send</STRONG> (Thumb, 52 bytes, Stack size 296 bytes, app_expand.o(i.jmesh_app_expand1_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = jmesh_app_expand1_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_report_unbind_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_report_bind_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand1_device_server_info_get_handler
</UL>

<P><STRONG><a name="[4b6]"></a>jmesh_app_expand2_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_expand2.o(i.jmesh_app_expand2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = jmesh_app_expand2_init &rArr; jmesh_device_roles_init &rArr; water_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_server_init
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_client_init
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_roles_init
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand_model_init
</UL>

<P><STRONG><a name="[569]"></a>jmesh_app_expand2_message_register</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_expand.o(i.jmesh_app_expand2_message_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jmesh_app_expand2_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_server_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_init
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_server_init
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_client_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_client_init
</UL>

<P><STRONG><a name="[566]"></a>jmesh_app_expand2_realcomm_client_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_expand2_realcomm_client.o(i.jmesh_app_expand2_realcomm_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = jmesh_app_expand2_realcomm_client_init &rArr; jmesh_app_expand2_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_message_register
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_init
</UL>

<P><STRONG><a name="[2a7]"></a>jmesh_app_expand2_realcomm_client_trans</STRONG> (Thumb, 38 bytes, Stack size 272 bytes, app_expand2_realcomm_client.o(i.jmesh_app_expand2_realcomm_client_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = jmesh_app_expand2_realcomm_client_trans &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_ascii
</UL>

<P><STRONG><a name="[4ca]"></a>jmesh_app_expand2_realcomm_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_expand2_realcomm.o(i.jmesh_app_expand2_realcomm_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = jmesh_app_expand2_realcomm_send &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JMESH_DEBUG_SEND_TO_CKQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_realcomm_server_transparent_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_realcomm_server_trans_handler
</UL>

<P><STRONG><a name="[567]"></a>jmesh_app_expand2_realcomm_server_init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = jmesh_app_expand2_realcomm_server_init &rArr; jmesh_app_expand2_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_message_register
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_init
</UL>

<P><STRONG><a name="[4c7]"></a>jmesh_app_expand2_realcomm_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_expand2_realcomm.o(i.jmesh_app_expand2_realcomm_set))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_realcomm_server_baudrate_set_handler
</UL>

<P><STRONG><a name="[4c8]"></a>jmesh_app_expand2_send</STRONG> (Thumb, 58 bytes, Stack size 296 bytes, app_expand.o(i.jmesh_app_expand2_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_set_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_set_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_get_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_get_handler
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_client_point_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_client_mode_set
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_client_mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_realcomm_server_report_set_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_realcomm_server_baudrate_set_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_transparent_client_trans
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_client_trans
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_write_value_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve_pin_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_value_unit_handler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_type_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_report_para_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_pulse_pin_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_param_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_mac_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_value_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_param_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_mac_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve_pin_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve_handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_value_unit_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_type_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_report_para_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_pulse_pin_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_write_value
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve_pin
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_value_unit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_type
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_report_para
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_pulse_pin
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_param
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_mac
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_value
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_param
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_mac
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve_pin
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_value_unit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_type
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_report_para
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_pulse_pin
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_report
</UL>

<P><STRONG><a name="[2a8]"></a>jmesh_app_expand2_transparent_client_trans</STRONG> (Thumb, 38 bytes, Stack size 272 bytes, app_expand2_realcomm_client.o(i.jmesh_app_expand2_transparent_client_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = jmesh_app_expand2_transparent_client_trans &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_trans
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_hex
</UL>

<P><STRONG><a name="[c1]"></a>jmesh_beacon_recv_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jmesh_ble_callback.o(i.jmesh_beacon_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = jmesh_beacon_recv_handler &rArr; jmesh_beacon_handler &rArr; jmesh_routing_beacon_handler &rArr; friend_poll_handler &rArr; jmesh_routing_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[56a]"></a>jmesh_ble_cancel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = jmesh_ble_cancel &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_disable
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_connect_start
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_status_switch
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_timer_cancel
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_adapter_timerflow
</UL>

<P><STRONG><a name="[4e6]"></a>jmesh_ble_cancel_callback</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bx2400_ble.o(i.jmesh_ble_cancel_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = jmesh_ble_cancel_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_status_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[4e7]"></a>jmesh_ble_canceled_callback</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, bx2400_ble.o(i.jmesh_ble_canceled_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = jmesh_ble_canceled_callback &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_send_adv
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_is_enable
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_adv
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[4f7]"></a>jmesh_ble_disc_svc_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jmesh_ble_callback.o(i.jmesh_ble_disc_svc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_ble_disc_svc_callback &rArr; jmesh_gatt_set_svc_instance &rArr; jmesh_gatt_get_link_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_set_svc_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sdp_svc_handler
</UL>

<P><STRONG><a name="[38c]"></a>jmesh_ble_exchange_mtu</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_exchange_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = jmesh_ble_exchange_mtu &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
</UL>

<P><STRONG><a name="[4f0]"></a>jmesh_ble_exchange_mtu_callback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, jmesh_ble_callback.o(i.jmesh_ble_exchange_mtu_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = jmesh_ble_exchange_mtu_callback &rArr; jmesh_gatt_set_mtu &rArr; jmesh_lowpower_connected &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_set_mtu
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_phone_set_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mtu_change_handler
</UL>

<P><STRONG><a name="[56b]"></a>jmesh_ble_gatt_connect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bx2400_ble.o(i.jmesh_ble_gatt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_ble_gatt_connect &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_null_intv
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_connect_start
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
</UL>

<P><STRONG><a name="[4e1]"></a>jmesh_ble_gatt_connected_callback</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, jmesh_ble_callback.o(i.jmesh_ble_gatt_connected_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = jmesh_ble_gatt_connected_callback &rArr; jmesh_gatt_connected &rArr; jmesh_gatt_multilink_disconnect_old &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_phone_connected
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_is_mesh_device
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_req_handler
</UL>

<P><STRONG><a name="[38e]"></a>jmesh_ble_gatt_disconnect</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_gatt_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = jmesh_ble_gatt_disconnect &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnect
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_phone_connected
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_multilink_disconnect_old
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_cmp_evt_handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
</UL>

<P><STRONG><a name="[4e3]"></a>jmesh_ble_gatt_disconnected_callback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, jmesh_ble_callback.o(i.jmesh_ble_gatt_disconnected_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = jmesh_ble_gatt_disconnected_callback &rArr; jmesh_gatt_disconnected &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_phone_disconnected
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconnect_handler
</UL>

<P><STRONG><a name="[56e]"></a>jmesh_ble_gatt_notified_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jmesh_ble_callback.o(i.jmesh_ble_gatt_notified_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = jmesh_ble_gatt_notified_callback &rArr; jmesh_gatt_recv &rArr; jmesh_app_recv_handler &rArr; jmesh_proxy_recv &rArr; jmesh_interface_recv &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gattc_event_ind_handler
</UL>

<P><STRONG><a name="[36f]"></a>jmesh_ble_gatt_notify</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, bx2400_ble.o(i.jmesh_ble_gatt_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + In Cycle
<LI>Call Chain = jmesh_ble_gatt_notify &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_recv_handler
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_trigger_send
</UL>

<P><STRONG><a name="[3a4]"></a>jmesh_ble_gatt_write</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, bx2400_ble.o(i.jmesh_ble_gatt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + In Cycle
<LI>Call Chain = jmesh_ble_gatt_write &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_trigger_send
</UL>

<P><STRONG><a name="[544]"></a>jmesh_ble_gatt_writed_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jmesh_ble_callback.o(i.jmesh_ble_gatt_writed_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = jmesh_ble_gatt_writed_callback &rArr; jmesh_gatt_recv &rArr; jmesh_app_recv_handler &rArr; jmesh_proxy_recv &rArr; jmesh_interface_recv &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[292]"></a>jmesh_ble_get_dbm</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_get_dbm))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_ble_get_dbm &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_dBm
</UL>

<P><STRONG><a name="[36d]"></a>jmesh_ble_get_local_svc_ins</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bx2400_ble.o(i.jmesh_ble_get_local_svc_ins))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_recv_handler
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
</UL>

<P><STRONG><a name="[435]"></a>jmesh_ble_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bx2400_ble.o(i.jmesh_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_ble_init &rArr; os_buffer_queue_init &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_task_sleep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[2a5]"></a>jmesh_ble_platform_reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_platform_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_ble_platform_reset &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_mac
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_dBm
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_addr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_restore_default
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_reset
</UL>

<P><STRONG><a name="[4db]"></a>jmesh_ble_recv_adv_callback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, jmesh_ble_callback.o(i.jmesh_ble_recv_adv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = jmesh_ble_recv_adv_callback &rArr; jmesh_adv_recv &rArr; jmesh_beacon_handler &rArr; jmesh_routing_beacon_handler &rArr; friend_poll_handler &rArr; jmesh_routing_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_report_handler
</UL>

<P><STRONG><a name="[4e2]"></a>jmesh_ble_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = jmesh_ble_reset &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_ready_handler
</UL>

<P><STRONG><a name="[56d]"></a>jmesh_ble_scan_adv</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_scan_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = jmesh_ble_scan_adv &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_enable
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_status_switch
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_status_start
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
</UL>

<P><STRONG><a name="[2b2]"></a>jmesh_ble_scan_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_scan_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_ble_scan_disable &rArr; jmesh_ble_cancel &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_choose_offer
</UL>

<P><STRONG><a name="[2b6]"></a>jmesh_ble_scan_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_scan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_ble_scan_enable &rArr; jmesh_ble_scan_adv &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_receive_offer
</UL>

<P><STRONG><a name="[56c]"></a>jmesh_ble_scan_is_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_scan_is_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_ble_scan_is_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_status_switch
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_status_start
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
</UL>

<P><STRONG><a name="[562]"></a>jmesh_ble_send_adv</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bx2400_ble.o(i.jmesh_ble_send_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = jmesh_ble_send_adv &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
</UL>

<P><STRONG><a name="[2ac]"></a>jmesh_ble_set_dbm</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_set_dbm))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_ble_set_dbm &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_dBm
</UL>

<P><STRONG><a name="[5cf]"></a>jmesh_ble_set_local_svc_ins</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bx2400_ble.o(i.jmesh_ble_set_local_svc_ins))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gattm_add_svc_rsp_handler
</UL>

<P><STRONG><a name="[4de]"></a>jmesh_ble_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bx2400_ble.o(i.jmesh_ble_status))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_req_handler
</UL>

<P><STRONG><a name="[428]"></a>jmesh_ble_status_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_status_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_ble_status_start &rArr; jmesh_ble_scan_adv &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_is_enable
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
</UL>

<P><STRONG><a name="[4e0]"></a>jmesh_ble_status_switch</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_status_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_ble_status_switch &rArr; jmesh_ble_scan_adv &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_is_enable
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_adv
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel_callback
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_req_handler
</UL>

<P><STRONG><a name="[4df]"></a>jmesh_ble_stop_cancel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_stop_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_ble_stop_cancel &rArr; os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_req_handler
</UL>

<P><STRONG><a name="[3fa]"></a>jmesh_connect_start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bx2400_ble.o(i.jmesh_connect_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = jmesh_connect_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connect
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_link_require
</UL>

<P><STRONG><a name="[568]"></a>jmesh_device_roles_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_expand2.o(i.jmesh_device_roles_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = jmesh_device_roles_init &rArr; water_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_server_init
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_init
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_init
</UL>

<P><STRONG><a name="[575]"></a>jmesh_friend_connected</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, jmesh_friend.o(i.jmesh_friend_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = jmesh_friend_connected &rArr; friend_update &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_get
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_cache_pop
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_send
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_update
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
</UL>

<P><STRONG><a name="[52d]"></a>jmesh_friend_get_rssi</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jmesh_friend.o(i.jmesh_friend_get_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = jmesh_friend_get_rssi &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_get_by_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_request_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_offer
</UL>

<P><STRONG><a name="[3d4]"></a>jmesh_friend_pdu_cache</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, jmesh_friend.o(i.jmesh_friend_pdu_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = jmesh_friend_pdu_cache &rArr; jmesh_friendship_cache_push &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_filter_filtering
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_cache_push
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[406]"></a>jmesh_friend_recv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, jmesh_friend.o(i.jmesh_friend_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = jmesh_friend_recv &rArr; jmesh_friend_connected &rArr; friend_update &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_friend_feature
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_add
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_filter_remove_addr
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_filter_add_addr
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_get
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_connected
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_subscription_list_confirm
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_request_handler
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_control_recv_handler
</UL>

<P><STRONG><a name="[577]"></a>jmesh_friend_send</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jmesh_friend.o(i.jmesh_friend_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = jmesh_friend_send &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_connected
</UL>

<P><STRONG><a name="[576]"></a>jmesh_friendship_cache_pop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, jmesh_friend.o(i.jmesh_friendship_cache_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_friendship_cache_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_connected
</UL>

<P><STRONG><a name="[578]"></a>jmesh_friendship_cache_push</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, jmesh_friend.o(i.jmesh_friendship_cache_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = jmesh_friendship_cache_push &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_pdu_cache
</UL>

<P><STRONG><a name="[fc]"></a>jmesh_friendship_free</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, jmesh_friend.o(i.jmesh_friendship_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = jmesh_friendship_free &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_node_route_delete
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_request_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jmesh_friend.o(i.friend_offer)
<LI> jmesh_friend.o(i.friend_poll_handler)
</UL>
<P><STRONG><a name="[52e]"></a>jmesh_friendship_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, jmesh_friend.o(i.jmesh_friendship_get))
<BR><BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_connected
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_poll_handler
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_request_handler
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
</UL>

<P><STRONG><a name="[437]"></a>jmesh_friendship_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, jmesh_friend.o(i.jmesh_friendship_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_friendship_init
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[530]"></a>jmesh_friendship_new</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, jmesh_friend.o(i.jmesh_friendship_new))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_request_handler
</UL>

<P><STRONG><a name="[4e8]"></a>jmesh_gatt_queue_send</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, bx2400_ble.o(i.jmesh_gatt_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = jmesh_gatt_queue_send &rArr; jmesh_adv_send_message2 &rArr; jmesh_adv_send &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_message2
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_trigger_send
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adapter_gatt_send
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[3cf]"></a>jmesh_generate_nonce</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jmesh_security.o(i.jmesh_generate_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_generate_nonce
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_access_send
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[65e]"></a>jmesh_get_device_roles</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_expand2.o(i.jmesh_get_device_roles))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_auto_report
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_record
</UL>

<P><STRONG><a name="[2a0]"></a>jmesh_gpio_get</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bx2400_gpio.o(i.jmesh_gpio_get))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_ioread
</UL>

<P><STRONG><a name="[449]"></a>jmesh_gpio_mode_in_pu</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bx2400_gpio.o(i.jmesh_gpio_mode_in_pu))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = jmesh_gpio_mode_in_pu &rArr; io_pin_pull_write &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_pull_write
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_dir_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_port_init
</UL>

<P><STRONG><a name="[448]"></a>jmesh_gpio_mode_out_pp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bx2400_gpio.o(i.jmesh_gpio_mode_out_pp))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = jmesh_gpio_mode_out_pp &rArr; io_pin_pull_write &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_pull_write
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_dir_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_port_init
</UL>

<P><STRONG><a name="[29f]"></a>jmesh_gpio_pull_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bx2400_gpio.o(i.jmesh_gpio_pull_write))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iopull
</UL>

<P><STRONG><a name="[2a1]"></a>jmesh_gpio_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bx2400_gpio.o(i.jmesh_gpio_set))
<BR><BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_on
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_off
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_gpio
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iowrite
</UL>

<P><STRONG><a name="[57b]"></a>jmesh_lowpower_cache_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.jmesh_lowpower_cache_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = jmesh_lowpower_cache_free &rArr; jmesh_pdu_free &rArr; os_memb_free &rArr; jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_cache_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
</UL>

<P><STRONG><a name="[57c]"></a>jmesh_lowpower_cache_pop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_lowpower.o(i.jmesh_lowpower_cache_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_lowpower_cache_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_send
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_cache_free
</UL>

<P><STRONG><a name="[3d7]"></a>jmesh_lowpower_cache_push</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, jmesh_lowpower.o(i.jmesh_lowpower_cache_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = jmesh_lowpower_cache_push &rArr; jmesh_pdu_free &rArr; os_memb_free &rArr; jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[3a1]"></a>jmesh_lowpower_connected</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.jmesh_lowpower_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = jmesh_lowpower_connected &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_set_mtu
</UL>

<P><STRONG><a name="[115]"></a>jmesh_lowpower_connected_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.jmesh_lowpower_connected_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = jmesh_lowpower_connected_callback &rArr; lowpower_subscription_list_update &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_send
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_lowpower.o(i.jmesh_lowpower_connected)
</UL>
<P><STRONG><a name="[2b3]"></a>jmesh_lowpower_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, jmesh_lowpower.o(i.jmesh_lowpower_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = jmesh_lowpower_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[407]"></a>jmesh_lowpower_recv</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, jmesh_lowpower.o(i.jmesh_lowpower_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = jmesh_lowpower_recv &rArr; lowpower_subscription_list_confirm_handler &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_recover_iv_index
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_sleep
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_confirm_handler
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_offer_handler
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_add
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_control_recv_handler
</UL>

<P><STRONG><a name="[57d]"></a>jmesh_lowpower_send</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, jmesh_lowpower.o(i.jmesh_lowpower_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = jmesh_lowpower_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_cache_pop
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_connected_callback
</UL>

<P><STRONG><a name="[580]"></a>jmesh_lowpower_sleep</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.jmesh_lowpower_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = jmesh_lowpower_sleep &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll_timeout_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
</UL>

<P><STRONG><a name="[2b8]"></a>jmesh_lowpower_uninit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.jmesh_lowpower_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_lowpower_uninit &rArr; os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
</UL>

<P><STRONG><a name="[42e]"></a>jmesh_mutex_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bx2400_system.o(i.jmesh_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = jmesh_mutex_lock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_new
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_free
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_find
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_timer_event
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_add
</UL>

<P><STRONG><a name="[430]"></a>jmesh_mutex_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bx2400_system.o(i.jmesh_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = jmesh_mutex_new &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_timer_event
</UL>

<P><STRONG><a name="[42f]"></a>jmesh_mutex_unlock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bx2400_system.o(i.jmesh_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_new
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_free
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_find
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_timer_event
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_add
</UL>

<P><STRONG><a name="[29a]"></a>jmesh_pwm_list</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bx2400_pwm.o(i.jmesh_pwm_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = jmesh_pwm_list &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_pwm
</UL>

<P><STRONG><a name="[203]"></a>jmesh_pwm_start</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, bx2400_pwm.o(i.jmesh_pwm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = jmesh_pwm_start &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_dir_set
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_start
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_pwm
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_read
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_control_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
</UL>

<P><STRONG><a name="[209]"></a>jmesh_pwm_stop</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bx2400_pwm.o(i.jmesh_pwm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = jmesh_pwm_stop &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_dir_set
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_stop
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_end_pwm
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_read
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_control_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
</UL>

<P><STRONG><a name="[278]"></a>jmesh_random_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bx2400_system.o(i.jmesh_random_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_random_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ota_adv_schedule
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_ota
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_sleep
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_authentication_action
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_confirmation
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_multilink_disconnect_old
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_compare
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_beacon_send
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ota_adv
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_send
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_for_channel_idle
</UL>

<P><STRONG><a name="[3f8]"></a>jmesh_routing_heartbeat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, jmesh_routing_heartbeat.o(i.jmesh_routing_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = jmesh_routing_heartbeat &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_find_recv
</UL>

<P><STRONG><a name="[3ff]"></a>jmesh_routing_heartbeat_recv</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, jmesh_routing_heartbeat.o(i.jmesh_routing_heartbeat_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = jmesh_routing_heartbeat_recv &rArr; jmesh_route_update
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
</UL>

<P><STRONG><a name="[37f]"></a>jmesh_save_delete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bx2400_save.o(i.jmesh_save_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = jmesh_save_delete &rArr; nvds_del &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_del
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_clear
</UL>

<P><STRONG><a name="[2a6]"></a>jmesh_save_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bx2400_save.o(i.jmesh_save_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = jmesh_save_init &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_restore_default
</UL>

<P><STRONG><a name="[231]"></a>jmesh_save_read</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bx2400_save.o(i.jmesh_save_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_init
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_roles_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_load_para
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_TTL_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_list
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_get_dbm
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_role
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_list_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_addr_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_init
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_features_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF01_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_record
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_send_read_handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_timer_handler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsMemoryParaRead
</UL>

<P><STRONG><a name="[204]"></a>jmesh_save_write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bx2400_save.o(i.jmesh_save_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_device_roles
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_set_handler
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_send_save_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_get_meter_addr_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_handler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_set_param
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_valve_pin
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_value_unit
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_value
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_type
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_report
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_pulse_pin
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_param
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_mac
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_save_value
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_TTL_set_default
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_app
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_relay_feature
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_proxy_feature
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_primary_addr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_lowpower_feature
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_friend_feature
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_stop_update_iv_index
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_start_update_iv_index
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_set_iv_index
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_set
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_set_dbm
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_get_dbm
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_lowpower_para
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_state_set_secure_network_beacon
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_update
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_set
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_unbind_app
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_remove
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_overwrite
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_delete_all
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_add
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_set
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_delete
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_recover_iv_index
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_list_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_add
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_set_local
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_stop_update_iv_index
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_start_update_iv_index
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_new
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF03_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B203_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B202_handler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_control_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_record
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_timer_handler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_save
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
</UL>

<P><STRONG><a name="[372]"></a>jmesh_security_cal_aid</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jmesh_security.o(i.jmesh_security_cal_aid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = jmesh_security_cal_aid &rArr; security_k4_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k4_derivation
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_update
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_set
</UL>

<P><STRONG><a name="[3c6]"></a>jmesh_security_cal_beacon_key</STRONG> (Thumb, 56 bytes, Stack size 64 bytes, jmesh_security.o(i.jmesh_security_cal_beacon_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = jmesh_security_cal_beacon_key &rArr; security_k1_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k1_derivation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_load
</UL>

<P><STRONG><a name="[3c5]"></a>jmesh_security_cal_identity_key</STRONG> (Thumb, 56 bytes, Stack size 64 bytes, jmesh_security.o(i.jmesh_security_cal_identity_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = jmesh_security_cal_identity_key &rArr; security_k1_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k1_derivation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_load
</UL>

<P><STRONG><a name="[3c3]"></a>jmesh_security_cal_master_encryption_and_privacy_keys</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, jmesh_security.o(i.jmesh_security_cal_master_encryption_and_privacy_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k2_derivation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_load
</UL>

<P><STRONG><a name="[3c4]"></a>jmesh_security_cal_netid</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, jmesh_security.o(i.jmesh_security_cal_netid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = jmesh_security_cal_netid &rArr; security_k3_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k3_derivation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_load
</UL>

<P><STRONG><a name="[3d0]"></a>jmesh_security_decrypt</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, jmesh_security.o(i.jmesh_security_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = jmesh_security_decrypt &rArr; security_aes_ccm_decrypt2 &rArr; aes_cbc_mac &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_decrypt2
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
</UL>

<P><STRONG><a name="[3d3]"></a>jmesh_security_encrypt</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, jmesh_security.o(i.jmesh_security_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = jmesh_security_encrypt &rArr; security_aes_ccm_encrypt2 &rArr; aes_cbc_mac &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_encrypt2
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_access_send
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[2bd]"></a>jmesh_set_device_roles</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_expand2.o(i.jmesh_set_device_roles))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = jmesh_set_device_roles &rArr; water_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_role
</UL>

<P><STRONG><a name="[41e]"></a>jmesh_task_sleep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bx2400_system.o(i.jmesh_task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = jmesh_task_sleep &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cycle_callback
</UL>

<P><STRONG><a name="[570]"></a>jmesh_task_sleep_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bx2400_system.o(i.jmesh_task_sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = jmesh_task_sleep_init &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_init
</UL>

<P><STRONG><a name="[423]"></a>jmesh_task_wakeup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bx2400_system.o(i.jmesh_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_poll
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
</UL>

<P><STRONG><a name="[119]"></a>jmesh_uart0_send_callback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bx2400_uart.o(i.jmesh_uart0_send_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_uart0_send_callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bx2400_uart.o(i.jmesh_uart_send)
<LI> bx2400_uart.o(i.jmesh_uart_send_no_take_semphr)
</UL>
<P><STRONG><a name="[118]"></a>jmesh_uart1_send_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bx2400_uart.o(i.jmesh_uart1_send_callback))
<BR>[Address Reference Count : 2]<UL><LI> bx2400_uart.o(i.jmesh_uart_send)
<LI> bx2400_uart.o(i.jmesh_uart_send_no_take_semphr)
</UL>
<P><STRONG><a name="[2ab]"></a>jmesh_uart_baudrate_set</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, bx2400_uart.o(i.jmesh_uart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_uart_baudrate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisor
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_baud
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_repeat_timer_handler
</UL>

<P><STRONG><a name="[436]"></a>jmesh_uart_init</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, bx2400_uart.o(i.jmesh_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = jmesh_uart_init &rArr; jmesh_uart_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_pull_write
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[58b]"></a>jmesh_uart_recv_callback</STRONG> (Thumb, 148 bytes, Stack size 272 bytes, jmesh_uart_callback.o(i.jmesh_uart_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = jmesh_uart_recv_callback &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_cmd_process
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_return_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_callback
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_uart_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart1_timer_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart0_timer_handler
</UL>

<P><STRONG><a name="[23a]"></a>jmesh_uart_send</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bx2400_uart.o(i.jmesh_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = jmesh_uart_send &rArr; app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_send
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_server_cmd_send_handler
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_cmd_process
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_when_control
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_overtime_handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_repeat_timer_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>

<P><STRONG><a name="[270]"></a>jmesh_uart_send_no_take_semphr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bx2400_uart.o(i.jmesh_uart_send_no_take_semphr))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = jmesh_uart_send_no_take_semphr &rArr; app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
</UL>

<P><STRONG><a name="[58a]"></a>jmesh_uart_start</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bx2400_uart.o(i.jmesh_uart_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = jmesh_uart_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_init
</UL>

<P><STRONG><a name="[426]"></a>jmesh_wdt_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bx2400_system.o(i.jmesh_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jmesh_wdt_init &rArr; app_wdt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_start
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
</UL>

<P><STRONG><a name="[427]"></a>jmesh_wdt_sub_regist</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bx2400_system.o(i.jmesh_wdt_sub_regist))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
</UL>

<P><STRONG><a name="[41b]"></a>jmesh_wdt_sub_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bx2400_system.o(i.jmesh_wdt_sub_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_wdt_sub_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wdt_feed_dog
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_erase_flash
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cycle_callback
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
</UL>

<P><STRONG><a name="[485]"></a>leftshift</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aes128_cmac.o(i.leftshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = leftshift
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMacKey
</UL>

<P><STRONG><a name="[354]"></a>light_client_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, light_client.o(i.light_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = light_client_init &rArr; jmesh_app_expand2_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_message_register
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
</UL>

<P><STRONG><a name="[2a2]"></a>light_client_mode</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, light_client.o(i.light_client_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = light_client_mode &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_set_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_light_mode
</UL>

<P><STRONG><a name="[2bc]"></a>light_client_mode_set</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, light_client.o(i.light_client_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = light_client_mode_set &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_light_mode
</UL>

<P><STRONG><a name="[120]"></a>light_client_mode_status_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, light_client.o(i.light_client_mode_status_handler))
<BR>[Address Reference Count : 1]<UL><LI> light_client.o(i.light_client_init)
</UL>
<P><STRONG><a name="[2a3]"></a>light_client_point_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, light_client.o(i.light_client_point_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = light_client_point_set &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_light_switch
</UL>

<P><STRONG><a name="[11f]"></a>light_client_status_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, light_client.o(i.light_client_status_handler))
<BR>[Address Reference Count : 1]<UL><LI> light_client.o(i.light_client_init)
</UL>
<P><STRONG><a name="[591]"></a>light_get</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, light.o(i.light_get))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_set_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_get_handler
</UL>

<P><STRONG><a name="[58f]"></a>light_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, light.o(i.light_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = light_off
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_point_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_bit_handler
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_mode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_mode_timer_handler
</UL>

<P><STRONG><a name="[590]"></a>light_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, light.o(i.light_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = light_on
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_point_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_bit_handler
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_mode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_mode_timer_handler
</UL>

<P><STRONG><a name="[127]"></a>light_server_bit_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, light_server.o(i.light_server_bit_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = light_server_bit_handler &rArr; light_on
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_on
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_server.o(i.light_server_init)
</UL>
<P><STRONG><a name="[123]"></a>light_server_get_handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, light_server.o(i.light_server_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = light_server_get_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_server.o(i.light_server_init)
</UL>
<P><STRONG><a name="[355]"></a>light_server_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, light_server.o(i.light_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = light_server_init &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_message_register
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
</UL>

<P><STRONG><a name="[125]"></a>light_server_mode_get_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, light_server.o(i.light_server_mode_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = light_server_mode_get_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_server.o(i.light_server_init)
</UL>
<P><STRONG><a name="[126]"></a>light_server_mode_handler</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, light_server.o(i.light_server_mode_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = light_server_mode_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_addr_get_type
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_server.o(i.light_server_init)
</UL>
<P><STRONG><a name="[124]"></a>light_server_mode_set_handler</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, light_server.o(i.light_server_mode_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = light_server_mode_set_handler &rArr; light_client_mode &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_addr_get_type
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_client_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_server.o(i.light_server_init)
</UL>
<P><STRONG><a name="[128]"></a>light_server_point_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, light_server.o(i.light_server_point_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_server_point_handler &rArr; light_on
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_on
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_server.o(i.light_server_init)
</UL>
<P><STRONG><a name="[122]"></a>light_server_set_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, light_server.o(i.light_server_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = light_server_set_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_addr_get_type
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_server.o(i.light_server_init)
</UL>
<P><STRONG><a name="[593]"></a>light_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, light.o(i.light_set))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_set_handler
</UL>

<P><STRONG><a name="[592]"></a>light_start_mode</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, light.o(i.light_start_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = light_start_mode &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks_to_ms
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_net_ticks_get
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_on
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_off
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_handler
</UL>

<P><STRONG><a name="[594]"></a>llc_con_upd_req_ind_handler2_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, llc_con_upd_req_ind_handler_patch2.o(i.llc_con_upd_req_ind_handler2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = llc_con_upd_req_ind_handler2_init &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_alloc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>

<P><STRONG><a name="[129]"></a>llc_con_upd_req_ind_handler_patch2</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, llc_con_upd_req_ind_handler_patch2.o(i.llc_con_upd_req_ind_handler_patch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llc_con_upd_req_ind_handler_patch2 &rArr; llc_util_set_operation_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_req
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_req
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_update_pdu_send
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_req_pdu_send
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_set_operation_ptr
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_state_update
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_state_chk
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_con_upd_req_ind_handler_patch2.o(i.llc_con_upd_req_ind_handler2_init)
</UL>
<P><STRONG><a name="[45a]"></a>lld_evt_drift_compute_patch</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rc32k_patch.o(i.lld_evt_drift_compute_patch))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLD_EVT_DRIFT_COMPUTE_PATCH
</UL>

<P><STRONG><a name="[45b]"></a>lld_pdu_tx_flush_patch_c</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lld_pdu_tx_flush_list_patch.o(i.lld_pdu_tx_flush_patch_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lld_pdu_tx_flush_patch_c
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_tx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLD_PDU_TX_FLUSH_LIST_PATCH
</UL>

<P><STRONG><a name="[5a5]"></a>lld_sleep_enter</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bx_lld_sleep.o(i.lld_sleep_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_extwkupdsb_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[f1]"></a>lld_sleep_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bx_lld_sleep.o(i.lld_sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lld_sleep_init &rArr; bx_lld_wakeup_time_set &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_lld_wakeup_time_set
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_extwkupdsb_setf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[5a7]"></a>lld_sleep_wakeup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bx_lld_sleep.o(i.lld_sleep_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lld_sleep_wakeup &rArr; lld_sleep_compensate &rArr; rwip_sleep_lpcycles_2_us &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_extwkupdsb_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>

<P><STRONG><a name="[62a]"></a>lld_sleep_wakeup_end</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bx_lld_sleep.o(i.lld_sleep_wakeup_end))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>

<P><STRONG><a name="[140]"></a>llm_end_evt_defer_patch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, llm_end_evt_defer_patch.o(i.llm_end_evt_defer_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llm_end_evt_defer_patch &rArr; llm_util_chk_tst_mode_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_chk_tst_mode_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_end_evt_defer_patch.o(i.set_llm_end_evt_defer_patch)
</UL>
<P><STRONG><a name="[5a8]"></a>llm_util_chk_tst_mode_patch</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tx_test_end.o(i.llm_util_chk_tst_mode_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llm_util_chk_tst_mode_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer_patch
</UL>

<P><STRONG><a name="[12b]"></a>lowpower_choose_offer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.lowpower_choose_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = lowpower_choose_offer &rArr; lowpower_poll &rArr; lowpower_request &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_disable
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_stop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_lowpower.o(i.lowpower_receive_offer)
</UL>
<P><STRONG><a name="[12c]"></a>lowpower_receive_offer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.lowpower_receive_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = lowpower_receive_offer &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_lowpower.o(i.lowpower_request)
</UL>
<P><STRONG><a name="[f3]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = main &rArr; rtos_task_init &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[549]"></a>mem_to_reg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_hwecc.o(i.mem_to_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_calculate_start
</UL>

<P><STRONG><a name="[10c]"></a>message_realcomm_server_data_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_expand2_realcomm_server.o(i.message_realcomm_server_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = message_realcomm_server_data_handler &rArr; read_meter_handler &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_send_save_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[2a9]"></a>meter_client_cmd_send</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, meter_client.o(i.meter_client_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = meter_client_cmd_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_meter_cmd
</UL>

<P><STRONG><a name="[356]"></a>meter_client_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, meter_client.o(i.meter_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = meter_client_init &rArr; jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_add_model
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
</UL>

<P><STRONG><a name="[12f]"></a>meter_cmd_res_timeout_handler</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, meter_server.o(i.meter_cmd_res_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = meter_cmd_res_timeout_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meter_server.o(i.meter_server_cmd_send_handler)
</UL>
<P><STRONG><a name="[357]"></a>meter_server_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, meter_server.o(i.meter_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = meter_server_init &rArr; jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_add_model
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
</UL>

<P><STRONG><a name="[5b1]"></a>modem_dev_calib_in_main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modem.o(i.modem_dev_calib_in_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = modem_dev_calib_in_main &rArr; modem_vcocali
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vco_stb_time_setf
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vco_cnt_spacing_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
</UL>

<P><STRONG><a name="[4ec]"></a>modem_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, modem.o(i.modem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = modem_init &rArr; modem_vcocali_value_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_restore
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vco_stb_time_setf
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vco_cnt_spacing_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
</UL>

<P><STRONG><a name="[5b2]"></a>modem_vcocali</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, modem.o(i.modem_vcocali))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = modem_vcocali
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_4_setf
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_3_setf
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_2_setf
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_1_setf
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vco_deviation_cal_start_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_dev_calib_in_main
</UL>

<P><STRONG><a name="[4c4]"></a>msg_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, task_init.o(i.msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_async_call_wrapper
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_queue_ahi_rsp_send
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
</UL>

<P><STRONG><a name="[e1]"></a>nvds_del</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nvds_in_ram.o(i.nvds_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nvds_del &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_search
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_invalid_item
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[e0]"></a>nvds_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nvds_in_ram.o(i.nvds_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_search
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_get_dev_info_req_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[df]"></a>nvds_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nvds_init &rArr; nvds_index_build &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_func_ptr_get
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_data_ver_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[e2]"></a>nvds_put</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write_new_item
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_search
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_move_to_another_blk
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_invalid_item
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get_available_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[4dd]"></a>os_ahi_msg_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_task.o(i.os_ahi_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_notify
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnect
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_exchange_mtu
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_send_adv
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_adv
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_reset
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connect
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_use_enc_blck_cmd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_add_prov_svc
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_config
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_get_dev_info_req_ind_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_bxotas_start_req_ind_handler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_param_update_req_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_bond_req_ind_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_req_handler
</UL>

<P><STRONG><a name="[615]"></a>os_get_eif_api</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_bridge.o(i.os_get_eif_api))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_eif_get
</UL>

<P><STRONG><a name="[1ef]"></a>os_task_os_pulse_int_e</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, water_pulse.o(i.os_task_os_pulse_int_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_task_os_pulse_int_e &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_pulse.o(.data)
</UL>
<P><STRONG><a name="[1fa]"></a>os_task_os_uart_int_e</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bx2400_uart.o(i.os_task_os_uart_int_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = os_task_os_uart_int_e &rArr; os_timer_event_restart &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bx2400_uart.o(.data)
</UL>
<P><STRONG><a name="[134]"></a>osapp_async_call_wrapper</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, osapp_task.o(i.osapp_async_call_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = osapp_async_call_wrapper &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_isr
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_task.o(i.osapp_task)
</UL>
<P><STRONG><a name="[4a2]"></a>osapp_gapm_use_enc_blck_cmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_adapt.o(i.osapp_gapm_use_enc_blck_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = osapp_gapm_use_enc_blck_cmd &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
</UL>

<P><STRONG><a name="[135]"></a>osapp_task</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, osapp_task.o(i.osapp_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = osapp_task &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adc_util_init
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queued_async_call_func_set
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_task.o(i.osapp_task_create)
</UL>
<P><STRONG><a name="[5d3]"></a>osapp_task_create</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, osapp_task.o(i.osapp_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = osapp_task_create &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>

<P><STRONG><a name="[5d4]"></a>patch_adv_int</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adv_int.o(i.patch_adv_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = patch_adv_int &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_alloc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>

<P><STRONG><a name="[595]"></a>patch_alloc</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, patch.o(i.patch_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = patch_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_payload_31Byte_patch
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_adv_int
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lld_pdu_tx_flush_patch
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler2_init
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc32k_patch
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
</UL>

<P><STRONG><a name="[596]"></a>patch_entrance_exit_addr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, patch.o(i.patch_entrance_exit_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_payload_31Byte_patch
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_adv_int
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lld_pdu_tx_flush_patch
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler2_init
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc32k_patch
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
</UL>

<P><STRONG><a name="[5d5]"></a>patch_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, patch.o(i.patch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = patch_init &rArr; set_llm_end_evt_defer_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_payload_31Byte_patch
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_adv_int
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lld_pdu_tx_flush_patch
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler2_init
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc32k_patch
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_recovery
</UL>

<P><STRONG><a name="[5da]"></a>periph_domain_busy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, periph_mngt.o(i.periph_domain_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = periph_domain_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
</UL>

<P><STRONG><a name="[63f]"></a>periph_recovery</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, periph_recovery.o(i.periph_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = periph_recovery
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_recovery
</UL>

<P><STRONG><a name="[de]"></a>platform_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, arch_init.o(i.platform_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_awo
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_platform_reset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_bxotas_finish_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[e6]"></a>prf_add_profile</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, prf.o(i.prf_add_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_add_profile &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[e4]"></a>prf_cleanup</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, prf.o(i.prf_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_cleanup &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[e5]"></a>prf_create</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, prf.o(i.prf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prf_create &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[513]"></a>prf_dst_task_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prf.o(i.prf_dst_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
</UL>

<P><STRONG><a name="[504]"></a>prf_env_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, prf.o(i.prf_env_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_cfm_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_firmware_dest_cmd_handler
</UL>

<P><STRONG><a name="[e7]"></a>prf_get_id_from_task</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, prf.o(i.prf_get_id_from_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prf_get_id_from_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[e8]"></a>prf_get_task_from_id</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, prf.o(i.prf_get_task_from_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prf_get_task_from_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[e3]"></a>prf_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, prf.o(i.prf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prf_init &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_msg_flush
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[50b]"></a>prf_src_task_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prf.o(i.prf_src_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_rsp_indicate
</UL>

<P><STRONG><a name="[44a]"></a>protocol_64507_pack</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, protocol_645.o(i.protocol_64507_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = protocol_64507_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_when_control
</UL>

<P><STRONG><a name="[200]"></a>protocol_64507_pick</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, protocol_645.o(i.protocol_64507_pick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = protocol_64507_pick
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_meter_cmd
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_return_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_callback
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
</UL>

<P><STRONG><a name="[54d]"></a>pshare_funcio_set</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, pshare.o(i.pshare_funcio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pshare_funcio_set &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_func_io_en_r_setf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pin_cfg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pin_cfg
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_pin_cfg
</UL>

<P><STRONG><a name="[4a8]"></a>pvPortMalloc</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_write
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>

<P><STRONG><a name="[689]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[5f8]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[5d0]"></a>queued_async_call_func_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queued_async_framework.o(i.queued_async_call_func_set))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
</UL>

<P><STRONG><a name="[609]"></a>rc_calib_end</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rc_calib.o(i.rc_calib_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rc_calib_end &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
</UL>

<P><STRONG><a name="[69f]"></a>rc_calib_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rc_calib.o(i.rc_calib_start))
<BR><BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[105]"></a>realcomm_client_baudrate_set_status_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_expand2_realcomm_client.o(i.realcomm_client_baudrate_set_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = realcomm_client_baudrate_set_status_handler &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_client.o(i.jmesh_app_expand2_realcomm_client_init)
</UL>
<P><STRONG><a name="[106]"></a>realcomm_client_report_set_status_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_expand2_realcomm_client.o(i.realcomm_client_report_set_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = realcomm_client_report_set_status_handler &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_client.o(i.jmesh_app_expand2_realcomm_client_init)
</UL>
<P><STRONG><a name="[547]"></a>recovery_list_add</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, periph_recovery.o(i.recovery_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = recovery_list_add &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sys_stat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_sys_stat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sys_stat
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_sys_stat
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_sys_stat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sys_stat
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_sys_stat
</UL>

<P><STRONG><a name="[548]"></a>recovery_list_remove</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, periph_recovery.o(i.recovery_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sys_stat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_sys_stat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sys_stat
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_sys_stat
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_sys_stat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sys_stat
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_sys_stat
</UL>

<P><STRONG><a name="[610]"></a>reg_pad_voltage_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rf_reg_settings_apollo_00.o(i.reg_pad_voltage_init))
<BR><BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
</UL>

<P><STRONG><a name="[54a]"></a>reg_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_hwecc.o(i.reg_set))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_calculate_start
</UL>

<P><STRONG><a name="[60a]"></a>reg_set_xtal_current_normal</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, rf_reg_settings_apollo_00.o(i.reg_set_xtal_current_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = reg_set_xtal_current_normal &rArr; reg_set_xtal_current
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_32m_xtal
</UL>

<P><STRONG><a name="[60c]"></a>rf_init</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, rf_apollo.o(i.rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rf_init &rArr; ble_radiocntl1_pack &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_txpwrup0_setf
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rxpwrup0_setf
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radiocntl1_pack
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[60f]"></a>rf_reg_settings_init_mp</STRONG> (Thumb, 1254 bytes, Stack size 24 bytes, rf_reg_settings_apollo_00.o(i.rf_reg_settings_init_mp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rf_reg_settings_init_mp &rArr; ftsv_calc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_normal
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_setPA_0dbm
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_pad_voltage_init
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftsv_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[611]"></a>rf_setPA_0dbm</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, rf_reg_settings_apollo_00.o(i.rf_setPA_0dbm))
<BR><BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
</UL>

<P><STRONG><a name="[612]"></a>rtc_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc_integration.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rtc_init &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_awo
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[5ac]"></a>rtos_task_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_init.o(i.rtos_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = rtos_task_init &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task_create
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_queue_create
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task_create
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[614]"></a>rwip_eif_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, arch_init.o(i.rwip_eif_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rwip_eif_get &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_eif_api
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[4f8]"></a>rwip_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rwip.o(i.rwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rwip_init &rArr; rf_init &rArr; ble_radiocntl1_pack &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_eif_get
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_init
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_init
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_init
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task
</UL>

<P><STRONG><a name="[ef]"></a>rwip_prevent_sleep_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rwip.o(i.rwip_prevent_sleep_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[ee]"></a>rwip_prevent_sleep_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rwip.o(i.rwip_prevent_sleep_set))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[f0]"></a>rwip_reset</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rwip.o(i.rwip_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rwip_reset &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_flush
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[4f6]"></a>rwip_schedule</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwip.o(i.rwip_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwip_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_schedule
</UL>

<P><STRONG><a name="[623]"></a>rwip_sleep</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, rwip.o(i.rwip_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rwip_sleep &rArr; bx_lld_wakeup_time_set &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_enter
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_lld_wakeup_time_set
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc32k_calib_val
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_sleep_check
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_target_get
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_sleep_check
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_timer_target_get
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
</UL>

<P><STRONG><a name="[5a4]"></a>rwip_sleep_lpcycles_2_us</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rwip.o(i.rwip_sleep_lpcycles_2_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rwip_sleep_lpcycles_2_us &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc32k_calib_val
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate
</UL>

<P><STRONG><a name="[4fd]"></a>rwip_us_2_lpcycles</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rwip.o(i.rwip_us_2_lpcycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc32k_calib_val
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_delay_set
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_lld_wakeup_time_set
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_delay_and_timer_counts_config
</UL>

<P><STRONG><a name="[ec]"></a>rwip_wakeup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rwip.o(i.rwip_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rwip_wakeup &rArr; lld_sleep_wakeup &rArr; lld_sleep_compensate &rArr; rwip_sleep_lpcycles_2_us &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[4fe]"></a>rwip_wakeup_delay_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwip.o(i.rwip_wakeup_delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rwip_wakeup_delay_set &rArr; rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_lld_wakeup_time_set
</UL>

<P><STRONG><a name="[ed]"></a>rwip_wakeup_end</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rwip.o(i.rwip_wakeup_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rwip_wakeup_end &rArr; ble_lp_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup_end
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_irq_enable
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_intr_clr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[2df]"></a>security_AES_CMAC</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_kn.o(i.security_AES_CMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMacKey
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_confirmation
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_confirmation
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_s1_salt_generation
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k1_derivation
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k4_derivation
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k3_derivation
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k2_derivation
</UL>

<P><STRONG><a name="[333]"></a>security_aes_ccm_decrypt2</STRONG> (Thumb, 106 bytes, Stack size 88 bytes, aes128_ccm.o(i.security_aes_ccm_decrypt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = security_aes_ccm_decrypt2 &rArr; aes_cbc_mac &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_blocks2
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_mac
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_decrypt
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt_provision_data
</UL>

<P><STRONG><a name="[588]"></a>security_aes_ccm_encrypt2</STRONG> (Thumb, 98 bytes, Stack size 88 bytes, aes128_ccm.o(i.security_aes_ccm_encrypt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = security_aes_ccm_encrypt2 &rArr; aes_cbc_mac &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_blocks2
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_mac
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_encrypt
</UL>

<P><STRONG><a name="[2de]"></a>security_k1_derivation</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, security_kn.o(i.security_k1_derivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = security_k1_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_identity_key
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_beacon_key
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_provision_key
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_confirmation
</UL>

<P><STRONG><a name="[586]"></a>security_k2_derivation</STRONG> (Thumb, 180 bytes, Stack size 136 bytes, security_kn.o(i.security_k2_derivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_master_encryption_and_privacy_keys
</UL>

<P><STRONG><a name="[587]"></a>security_k3_derivation</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, security_kn.o(i.security_k3_derivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = security_k3_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_netid
</UL>

<P><STRONG><a name="[585]"></a>security_k4_derivation</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, security_kn.o(i.security_k4_derivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = security_k4_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_aid
</UL>

<P><STRONG><a name="[2dd]"></a>security_s1_salt_generation</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, security_kn.o(i.security_s1_salt_generation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = security_s1_salt_generation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_provision_key
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_confirmation
</UL>

<P><STRONG><a name="[5d6]"></a>set_adv_payload_31Byte_patch</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, set_adv_payload_31byte_patch.o(i.set_adv_payload_31Byte_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = set_adv_payload_31Byte_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_alloc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>

<P><STRONG><a name="[5d9]"></a>set_lld_pdu_tx_flush_patch</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lld_pdu_tx_flush_list_patch.o(i.set_lld_pdu_tx_flush_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = set_lld_pdu_tx_flush_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_alloc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_patch_bl
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>

<P><STRONG><a name="[5d7]"></a>set_llm_end_evt_defer_patch</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, llm_end_evt_defer_patch.o(i.set_llm_end_evt_defer_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = set_llm_end_evt_defer_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_alloc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_patch_bl
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>

<P><STRONG><a name="[5d8]"></a>set_rc32k_patch</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rc32k_patch.o(i.set_rc32k_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = set_rc32k_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_alloc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_patch_bl
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>

<P><STRONG><a name="[62d]"></a>sleep_prepare_and_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sys_sleep.o(i.sleep_prepare_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sleep_prepare_and_check &rArr; rwip_sleep &rArr; bx_lld_wakeup_time_set &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_end
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_sleep_check
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_domain_busy
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_domain_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[632]"></a>spi_get_fifo_depth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_integration.o(i.spi_get_fifo_depth))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_full_isr
</UL>

<P><STRONG><a name="[5db]"></a>srst_awo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rst_gen.o(i.srst_awo))
<BR><BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>

<P><STRONG><a name="[546]"></a>srst_per</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rst_gen.o(i.srst_per))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sw_rst
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sw_rst
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sw_rst
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sw_rst
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_sw_rst
</UL>

<P><STRONG><a name="[4ef]"></a>swint_req</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, swint.o(i.swint_req))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_read
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_msg_start_recv
</UL>

<P><STRONG><a name="[633]"></a>switch_to_32m_xtal</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys_sleep.o(i.switch_to_32m_xtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = switch_to_32m_xtal &rArr; reg_set_xtal_current_normal &rArr; reg_set_xtal_current
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rtc_until
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[635]"></a>sysctrl_awo_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_awo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sysctrl_awo_init &rArr; sysctrl_awo_power_domain_ctrl_init &rArr; sysctrl_awo_pd_onoff_sw &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_set_sram_retention_vdd
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_power_domain_ctrl_init
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_modem_clk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[636]"></a>sysctrl_awo_modem_clk_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysctrl.o(i.sysctrl_awo_modem_clk_init))
<BR><BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
</UL>

<P><STRONG><a name="[639]"></a>sysctrl_awo_pd_onoff_sw</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_awo_pd_onoff_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sysctrl_awo_pd_onoff_sw &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_power_domain_ctrl_init
</UL>

<P><STRONG><a name="[637]"></a>sysctrl_awo_power_domain_ctrl_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_awo_power_domain_ctrl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sysctrl_awo_power_domain_ctrl_init &rArr; sysctrl_awo_pd_onoff_sw &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_pd_onoff_sw
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
</UL>

<P><STRONG><a name="[638]"></a>sysctrl_awo_set_sram_retention_vdd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctrl.o(i.sysctrl_awo_set_sram_retention_vdd))
<BR><BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
</UL>

<P><STRONG><a name="[6ae]"></a>sysctrl_close_32m_rc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sysctrl.o(i.sysctrl_close_32m_rc))
<BR><BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[63a]"></a>sysctrl_set_ahb_apb_blemac_clk</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_set_ahb_apb_blemac_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sysctrl_set_ahb_apb_blemac_clk &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_o_clk_sel_hbus0_setf
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_clk_sel_ble_mac_setf
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_clk_div_ble_mac_para0_m1_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[63e]"></a>system_recovery</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys_sleep.o(i.system_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = system_recovery &rArr; patch_init &rArr; set_llm_end_evt_defer_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_recovery
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[640]"></a>system_tick_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, task_init.o(i.system_tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = system_tick_init &rArr; wakeup_delay_and_timer_counts_config &rArr; rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_match_cnt_increase
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_delay_and_timer_counts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2c4]"></a>test_client_get_result</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, test_app_client.o(i.test_client_get_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = test_client_get_result &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_result
</UL>

<P><STRONG><a name="[359]"></a>test_client_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, test_app_client.o(i.test_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = test_client_init &rArr; jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_add_model
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
</UL>

<P><STRONG><a name="[2c3]"></a>test_client_result_init</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, test_app_client.o(i.test_client_result_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = test_client_result_init &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_init
</UL>

<P><STRONG><a name="[2c5]"></a>test_client_start</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, test_app_client.o(i.test_client_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = test_client_start &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_start
</UL>

<P><STRONG><a name="[2c6]"></a>test_client_stop</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, test_app_client.o(i.test_client_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = test_client_stop &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_stop
</UL>

<P><STRONG><a name="[643]"></a>test_get_read_result</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_app_client.o(i.test_get_read_result))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_result_handler
</UL>

<P><STRONG><a name="[642]"></a>test_get_write_result</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_app_server.o(i.test_get_write_result))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_result_handler
</UL>

<P><STRONG><a name="[143]"></a>test_read</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, test_app_server.o(i.test_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = test_read &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_server.o(i.test_server_start_handler)
</UL>
<P><STRONG><a name="[645]"></a>test_read_result_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test_app_client.o(i.test_read_result_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_result_init_handler
</UL>

<P><STRONG><a name="[358]"></a>test_server_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, test_app_server.o(i.test_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = test_server_init &rArr; jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_add_model
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
</UL>

<P><STRONG><a name="[142]"></a>test_write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, test_app_server.o(i.test_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = test_write &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_server.o(i.test_server_start_handler)
</UL>
<P><STRONG><a name="[644]"></a>test_write_result_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test_app_server.o(i.test_write_result_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_result_init_handler
</UL>

<P><STRONG><a name="[349]"></a>uECC_make_key</STRONG> (Thumb, 126 bytes, Stack size 128 bytes, uecc.o(i.uECC_make_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_publickey
</UL>

<P><STRONG><a name="[348]"></a>uECC_secp256r1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uecc.o(i.uECC_secp256r1))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_publickey
</UL>

<P><STRONG><a name="[34a]"></a>uECC_shared_secret</STRONG> (Thumb, 188 bytes, Stack size 184 bytes, uecc.o(i.uECC_shared_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_publickey
</UL>

<P><STRONG><a name="[4d6]"></a>uart_get_fifo_depth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_integration.o(i.uart_get_fifo_depth))
<BR><BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write_dma
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
</UL>

<P><STRONG><a name="[4cf]"></a>uart_set_divisor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_uart.o(i.uart_set_divisor))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_baudrate_set
</UL>

<P><STRONG><a name="[5d2]"></a>user_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_adapt.o(i.user_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_init &rArr; ahi_handler_register
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_handler_register
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
</UL>

<P><STRONG><a name="[5e2]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[654]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, task_init.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[68c]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task_init.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[608]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_init.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = vApplicationMallocFailedHook &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[650]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_init.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = vApplicationStackOverflowHook &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[5e7]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[5f7]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[5e4]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[5e3]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[5e6]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[5e8]"></a>vPortExitCritical</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vPortExitCritical &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[5cd]"></a>vPortFree</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_rx
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_read
</UL>

<P><STRONG><a name="[5e9]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[600]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[456]"></a>vTaskDelay</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_for_channel_idle
</UL>

<P><STRONG><a name="[685]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[604]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[652]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vTaskPlaceOnEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[651]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[653]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[613]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>

<P><STRONG><a name="[5c8]"></a>vTaskStepTick</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vTaskStepTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_and_rtc_matchcnt_update
</UL>

<P><STRONG><a name="[5f0]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[459]"></a>vTaskSwitchContext</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[26f]"></a>wait_uart_send_over</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bx2400_uart.o(i.wait_uart_send_over))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wait_uart_send_over &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_mac
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_dBm
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_baud
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_addr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_restore_default
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_reset
</UL>

<P><STRONG><a name="[658]"></a>water_1pulse_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, water_pulse.o(i.water_1pulse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = water_1pulse_init &rArr; io_ext_int_en &rArr; io_ext_int_ctrl &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_pull_write
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_init
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_param
</UL>

<P><STRONG><a name="[659]"></a>water_1pulse_uinit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, water_pulse.o(i.water_1pulse_uinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = water_1pulse_uinit &rArr; io_cfg_input &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_param
</UL>

<P><STRONG><a name="[65a]"></a>water_2pulse_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, water_pulse.o(i.water_2pulse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = water_2pulse_init &rArr; io_ext_int_en &rArr; io_ext_int_ctrl &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_init
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_param
</UL>

<P><STRONG><a name="[65b]"></a>water_2pulse_uinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, water_pulse.o(i.water_2pulse_uinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = water_2pulse_uinit &rArr; io_cfg_input &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_param
</UL>

<P><STRONG><a name="[65c]"></a>water_3pulse_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, water_pulse.o(i.water_3pulse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = water_3pulse_init &rArr; io_ext_int_en &rArr; io_ext_int_ctrl &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_pull_write
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_init
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_param
</UL>

<P><STRONG><a name="[65d]"></a>water_3pulse_uinit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, water_pulse.o(i.water_3pulse_uinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = water_3pulse_uinit &rArr; io_cfg_input &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_param
</UL>

<P><STRONG><a name="[14c]"></a>water_auto_report</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, water.o(i.water_auto_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = water_auto_report &rArr; water_report &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_device_roles
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_report
</UL>
<BR>[Address Reference Count : 2]<UL><LI> water.o(i.water_auto_report)
<LI> water.o(i.water_init)
</UL>
<P><STRONG><a name="[2cc]"></a>water_client_get_pulse_pin</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_get_pulse_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_get_pulse_pin &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_pul_pin
</UL>

<P><STRONG><a name="[169]"></a>water_client_get_pulse_pin_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, water_server.o(i.water_client_get_pulse_pin_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_get_pulse_pin_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_pulse_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2cd]"></a>water_client_get_report_para</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_get_report_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_get_report_para &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_report
</UL>

<P><STRONG><a name="[165]"></a>water_client_get_report_para_handler</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, water_server.o(i.water_client_get_report_para_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = water_client_get_report_para_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2ce]"></a>water_client_get_type</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_get_type &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_type
</UL>

<P><STRONG><a name="[161]"></a>water_client_get_type_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, water_server.o(i.water_client_get_type_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_get_type_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2cf]"></a>water_client_get_value_unit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_get_value_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_get_value_unit &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_unit
</UL>

<P><STRONG><a name="[167]"></a>water_client_get_value_unit_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, water_server.o(i.water_client_get_value_unit_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_get_value_unit_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_value_unit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2d2]"></a>water_client_get_valve</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_get_valve))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_get_valve &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_valve
</UL>

<P><STRONG><a name="[15b]"></a>water_client_get_valve_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, water_server.o(i.water_client_get_valve_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_get_valve_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_value
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_unit
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2d0]"></a>water_client_get_valve_pin</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_get_valve_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_get_valve_pin &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_val_pin
</UL>

<P><STRONG><a name="[163]"></a>water_client_get_valve_pin_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, water_server.o(i.water_client_get_valve_pin_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_get_valve_pin_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_valve_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[574]"></a>water_client_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, water_client.o(i.water_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = water_client_init &rArr; jmesh_app_expand2_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_message_register
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_roles_init
</UL>

<P><STRONG><a name="[668]"></a>water_client_mac_status_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_mac_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = water_client_mac_status_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_mac_status_handler
</UL>

<P><STRONG><a name="[14f]"></a>water_client_mac_status_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_mac_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = water_client_mac_status_handler &rArr; water_client_mac_status_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_mac_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_client.o(i.water_client_init)
</UL>
<P><STRONG><a name="[669]"></a>water_client_param_status_callback</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, water_client.o(i.water_client_param_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = water_client_param_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_param_status_handler
</UL>

<P><STRONG><a name="[14e]"></a>water_client_param_status_handler</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, water_client.o(i.water_client_param_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = water_client_param_status_handler &rArr; water_client_param_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_param_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_client.o(i.water_client_init)
</UL>
<P><STRONG><a name="[66a]"></a>water_client_pulse_pin_status_callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, water_client.o(i.water_client_pulse_pin_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = water_client_pulse_pin_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_pulse_pin_status_handler
</UL>

<P><STRONG><a name="[154]"></a>water_client_pulse_pin_status_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, water_client.o(i.water_client_pulse_pin_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = water_client_pulse_pin_status_handler &rArr; water_client_pulse_pin_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_pulse_pin_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_client.o(i.water_client_init)
</UL>
<P><STRONG><a name="[2ca]"></a>water_client_read_mac</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_read_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_read_mac &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_mac
</UL>

<P><STRONG><a name="[15f]"></a>water_client_read_mac_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, water_server.o(i.water_client_read_mac_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_read_mac_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_mac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2cb]"></a>water_client_read_param</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_read_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_read_param &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_param
</UL>

<P><STRONG><a name="[15d]"></a>water_client_read_param_handler</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, water_server.o(i.water_client_read_param_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = water_client_read_param_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_param
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2d1]"></a>water_client_read_value</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_read_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_read_value &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_value
</UL>

<P><STRONG><a name="[158]"></a>water_client_read_value_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, water_server.o(i.water_client_read_value_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_read_value_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_value
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_unit
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[66d]"></a>water_client_report_para_status_callback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, water_client.o(i.water_client_report_para_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = water_client_report_para_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_report_para_status_handler
</UL>

<P><STRONG><a name="[152]"></a>water_client_report_para_status_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, water_client.o(i.water_client_report_para_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = water_client_report_para_status_handler &rArr; water_client_report_para_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_report_para_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_client.o(i.water_client_init)
</UL>
<P><STRONG><a name="[2d3]"></a>water_client_set_mac</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_set_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_set_mac &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_mac
</UL>

<P><STRONG><a name="[15e]"></a>water_client_set_mac_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, water_server.o(i.water_client_set_mac_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_set_mac_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_mac
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_mac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2d4]"></a>water_client_set_param</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_set_param &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_param
</UL>

<P><STRONG><a name="[15c]"></a>water_client_set_param_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, water_server.o(i.water_client_set_param_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = water_client_set_param_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_param
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_param
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2d5]"></a>water_client_set_pulse_pin</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, water_client.o(i.water_client_set_pulse_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_set_pulse_pin &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_pul_pin
</UL>

<P><STRONG><a name="[168]"></a>water_client_set_pulse_pin_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, water_server.o(i.water_client_set_pulse_pin_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_set_pulse_pin_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_pulse_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2d6]"></a>water_client_set_report_para</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, water_client.o(i.water_client_set_report_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = water_client_set_report_para &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_report
</UL>

<P><STRONG><a name="[164]"></a>water_client_set_report_para_handler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, water_server.o(i.water_client_set_report_para_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = water_client_set_report_para_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2d7]"></a>water_client_set_type</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, water_client.o(i.water_client_set_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_set_type &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_type
</UL>

<P><STRONG><a name="[160]"></a>water_client_set_type_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, water_server.o(i.water_client_set_type_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_set_type_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2d8]"></a>water_client_set_value_unit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, water_client.o(i.water_client_set_value_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_set_value_unit &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_unit
</UL>

<P><STRONG><a name="[166]"></a>water_client_set_value_unit_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, water_server.o(i.water_client_set_value_unit_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_set_value_unit_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_value_unit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2db]"></a>water_client_set_valve</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, water_client.o(i.water_client_set_valve))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_set_valve &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_valve
</UL>

<P><STRONG><a name="[15a]"></a>water_client_set_valve_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, water_server.o(i.water_client_set_valve_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_set_valve_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_valve
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_value
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_unit
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[2d9]"></a>water_client_set_valve_pin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, water_client.o(i.water_client_set_valve_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = water_client_set_valve_pin &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_val_pin
</UL>

<P><STRONG><a name="[162]"></a>water_client_set_valve_pin_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, water_server.o(i.water_client_set_valve_pin_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_set_valve_pin_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_valve_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[676]"></a>water_client_type_status_callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, water_client.o(i.water_client_type_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = water_client_type_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_type_status_handler
</UL>

<P><STRONG><a name="[150]"></a>water_client_type_status_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_type_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = water_client_type_status_handler &rArr; water_client_type_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_type_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_client.o(i.water_client_init)
</UL>
<P><STRONG><a name="[677]"></a>water_client_value_status_callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, water_client.o(i.water_client_value_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = water_client_value_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_value_status_handler
</UL>

<P><STRONG><a name="[14d]"></a>water_client_value_status_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, water_client.o(i.water_client_value_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = water_client_value_status_handler &rArr; water_client_value_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_value_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_client.o(i.water_client_init)
</UL>
<P><STRONG><a name="[678]"></a>water_client_value_unit_status_callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, water_client.o(i.water_client_value_unit_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = water_client_value_unit_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_value_unit_status_handler
</UL>

<P><STRONG><a name="[153]"></a>water_client_value_unit_status_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_value_unit_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = water_client_value_unit_status_handler &rArr; water_client_value_unit_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_value_unit_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_client.o(i.water_client_init)
</UL>
<P><STRONG><a name="[679]"></a>water_client_valve_pin_status_callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, water_client.o(i.water_client_valve_pin_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = water_client_valve_pin_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_valve_pin_status_handler
</UL>

<P><STRONG><a name="[151]"></a>water_client_valve_pin_status_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water_client.o(i.water_client_valve_pin_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = water_client_valve_pin_status_handler &rArr; water_client_valve_pin_status_callback &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_valve_pin_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_client.o(i.water_client_init)
</UL>
<P><STRONG><a name="[2da]"></a>water_client_write_value</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, water_client.o(i.water_client_write_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = water_client_write_value &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_value
</UL>

<P><STRONG><a name="[159]"></a>water_client_write_value_handler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, water_server.o(i.water_client_write_value_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = water_client_write_value_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_set_value
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_value
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_unit
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_server.o(i.water_server_init)
</UL>
<P><STRONG><a name="[28c]"></a>water_gate_get_by_addr</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, water_gate.o(i.water_gate_get_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = water_gate_get_by_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_val_by_addr
</UL>

<P><STRONG><a name="[28d]"></a>water_gate_get_by_mac</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, water_gate.o(i.water_gate_get_by_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = water_gate_get_by_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_val_by_mac
</UL>

<P><STRONG><a name="[287]"></a>water_gate_get_history</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, water_gate.o(i.water_gate_get_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = water_gate_get_history &rArr; os_time_get_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_node_index_by_addr
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_get_history
</UL>

<P><STRONG><a name="[67b]"></a>water_gate_get_node_index_by_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, water_gate.o(i.water_gate_get_node_index_by_addr))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_list_history
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_history
</UL>

<P><STRONG><a name="[288]"></a>water_gate_get_param</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, water_gate.o(i.water_gate_get_param))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_get_param
</UL>

<P><STRONG><a name="[572]"></a>water_gate_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, water_gate.o(i.water_gate_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = water_gate_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_message_register
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_device_roles
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_roles_init
</UL>

<P><STRONG><a name="[67c]"></a>water_gate_insert_node</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, water_gate.o(i.water_gate_insert_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = water_gate_insert_node
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_report_recv
</UL>

<P><STRONG><a name="[289]"></a>water_gate_list_history</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, water_gate.o(i.water_gate_list_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = water_gate_list_history &rArr; os_time_get_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_node_index_by_addr
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_history
</UL>

<P><STRONG><a name="[28a]"></a>water_gate_list_node</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, water_gate.o(i.water_gate_list_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = water_gate_list_node
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_node
</UL>

<P><STRONG><a name="[156]"></a>water_gate_record</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, water_gate.o(i.water_gate_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = water_gate_record &rArr; os_timer_event_restart &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_device_roles
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_gate.o(i.water_gate_init)
</UL>
<P><STRONG><a name="[67d]"></a>water_gate_report_recv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, water_gate.o(i.water_gate_report_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = water_gate_report_recv &rArr; water_gate_insert_node
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_insert_node
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_report_handler
</UL>

<P><STRONG><a name="[28b]"></a>water_gate_set_param</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, water_gate.o(i.water_gate_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = water_gate_set_param &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_set_param
</UL>

<P><STRONG><a name="[66b]"></a>water_get_mac</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, water.o(i.water_get_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = water_get_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_mac_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_mac_handler
</UL>

<P><STRONG><a name="[66c]"></a>water_get_param</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, water.o(i.water_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = water_get_param
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_param_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_param_handler
</UL>

<P><STRONG><a name="[660]"></a>water_get_pulse_pin</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, water.o(i.water_get_pulse_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = water_get_pulse_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_pulse_pin_handler
</UL>

<P><STRONG><a name="[661]"></a>water_get_report</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, water.o(i.water_get_report))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_report_para_handler
</UL>

<P><STRONG><a name="[666]"></a>water_get_status</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, water.o(i.water_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = water_get_status &rArr; water_get_valve &rArr; io_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_valve
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_write_value_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_value_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve_handler
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_report
</UL>

<P><STRONG><a name="[662]"></a>water_get_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, water.o(i.water_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_type_handler
</UL>

<P><STRONG><a name="[665]"></a>water_get_unit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, water.o(i.water_get_unit))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_write_value_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_value_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve_handler
</UL>

<P><STRONG><a name="[664]"></a>water_get_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, water.o(i.water_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_write_value_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_value_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve_handler
</UL>

<P><STRONG><a name="[663]"></a>water_get_value_unit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, water.o(i.water_get_value_unit))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_value_unit_handler
</UL>

<P><STRONG><a name="[67e]"></a>water_get_valve</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, water.o(i.water_get_valve))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = water_get_valve &rArr; io_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_status
</UL>

<P><STRONG><a name="[667]"></a>water_get_valve_pin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, water.o(i.water_get_valve_pin))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve_pin_handler
</UL>

<P><STRONG><a name="[571]"></a>water_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, water.o(i.water_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = water_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_dir_set
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_3pulse_init
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_init
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_1pulse_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_device_roles
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_roles_init
</UL>

<P><STRONG><a name="[657]"></a>water_pulse_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, water.o(i.water_pulse_add))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_3pulse_c_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_b_delay_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_1pulse_a_handler
</UL>

<P><STRONG><a name="[65f]"></a>water_report</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, water.o(i.water_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = water_report &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_get
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_auto_report
</UL>

<P><STRONG><a name="[155]"></a>water_report_handler</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, water_gate.o(i.water_report_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = water_report_handler &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_report_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_gate.o(i.water_gate_init)
</UL>
<P><STRONG><a name="[157]"></a>water_save_value</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, water.o(i.water_save_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = water_save_value &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> water.o(i.water_save_value)
<LI> water.o(i.water_init)
</UL>
<P><STRONG><a name="[573]"></a>water_server_init</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, water_server.o(i.water_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = water_server_init &rArr; jmesh_app_expand2_message_register &rArr; os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_message_register
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_roles_init
</UL>

<P><STRONG><a name="[66e]"></a>water_set_mac</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, water.o(i.water_set_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = water_set_mac &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_mac_handler
</UL>

<P><STRONG><a name="[66f]"></a>water_set_param</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, water.o(i.water_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = water_set_param &rArr; water_3pulse_init &rArr; io_ext_int_en &rArr; io_ext_int_ctrl &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_3pulse_uinit
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_3pulse_init
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_uinit
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_init
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_1pulse_uinit
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_1pulse_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_param_handler
</UL>

<P><STRONG><a name="[670]"></a>water_set_pulse_pin</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, water.o(i.water_set_pulse_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = water_set_pulse_pin &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_pulse_pin_handler
</UL>

<P><STRONG><a name="[671]"></a>water_set_report</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, water.o(i.water_set_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = water_set_report &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_report_para_handler
</UL>

<P><STRONG><a name="[672]"></a>water_set_type</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, water.o(i.water_set_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = water_set_type &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_type_handler
</UL>

<P><STRONG><a name="[67a]"></a>water_set_value</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, water.o(i.water_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = water_set_value &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_write_value_handler
</UL>

<P><STRONG><a name="[673]"></a>water_set_value_unit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, water.o(i.water_set_value_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = water_set_value_unit &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_value_unit_handler
</UL>

<P><STRONG><a name="[674]"></a>water_set_valve</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, water.o(i.water_set_valve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = water_set_valve &rArr; io_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve_handler
</UL>

<P><STRONG><a name="[675]"></a>water_set_valve_pin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, water.o(i.water_set_valve_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = water_set_valve_pin &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve_pin_handler
</UL>

<P><STRONG><a name="[656]"></a>xPortStartScheduler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xPortStartScheduler &rArr; system_tick_init &rArr; wakeup_delay_and_timer_counts_config &rArr; rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_init
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[680]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
</UL>

<P><STRONG><a name="[413]"></a>xQueueCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_init
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_new
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[56f]"></a>xQueueGenericCreate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_task_sleep_init
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_init
</UL>

<P><STRONG><a name="[4c6]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_queue_create
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_queue_create
</UL>

<P><STRONG><a name="[5f5]"></a>xQueueGenericReset</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[414]"></a>xQueueGenericSend</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_push
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_pop
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_task_wakeup
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_unlock
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_do_event
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_use_enc_block_ind_handler
</UL>

<P><STRONG><a name="[687]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_isr
</UL>

<P><STRONG><a name="[589]"></a>xQueueGiveFromISR</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart0_send_callback
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_task_wakeup
</UL>

<P><STRONG><a name="[688]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.xQueueIsQueueEmptyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = xQueueIsQueueEmptyFromISR &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
</UL>

<P><STRONG><a name="[4f9]"></a>xQueueReceive</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task
</UL>

<P><STRONG><a name="[416]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_push
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_pop
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_task_sleep_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_task_sleep
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_lock
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_do_event
</UL>

<P><STRONG><a name="[686]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[40e]"></a>xTaskCreateStatic</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task_create
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task_create
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_task_create
</UL>

<P><STRONG><a name="[684]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[25c]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_b_delay_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_a_delay_handler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks_trigger
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_expired
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_schedule
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FIFO_TX
</UL>

<P><STRONG><a name="[682]"></a>xTaskIncrementTick</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[5ed]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = xTaskPriorityDisinherit &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[68a]"></a>xTaskPriorityInherit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[603]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[5f2]"></a>xTaskResumeAll</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[655]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[5fc]"></a>xTimerGenericCommand</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[c5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_apollo_00.o(n_xip_section))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>BLE_MAC_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bx_rwble.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = BLE_MAC_IRQHandler &rArr; msg2blestack_from_ISR &rArr; msg_send_isr &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[4ed]"></a>msg2blestack_from_ISR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_task.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = msg2blestack_from_ISR &rArr; msg_send_isr &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_MAC_IRQHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_msg_tx_cb
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_msg_rx_cb
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256_callback
</UL>

<P><STRONG><a name="[5ce]"></a>msg_send_isr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, task_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = msg_send_isr &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_async_call_wrapper
</UL>

<P><STRONG><a name="[68e]"></a>vPortOSTick_IRQ</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, task_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vPortOSTick_IRQ &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_match_cnt_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = RTC_IRQHandler &rArr; vPortOSTick_IRQ &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[5f1]"></a>bxSuppressTicksAndSleep</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, task_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = bxSuppressTicksAndSleep &rArr; sleep_prepare_and_check &rArr; rwip_sleep &rArr; bx_lld_wakeup_time_set &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_deepsleep_processing_mp
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_delay_and_timer_counts_config
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_and_rtc_matchcnt_update
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_rtc_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[692]"></a>mpu_enable_for_xip_region</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_init.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
</UL>

<P><STRONG><a name="[16b]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, arch_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_enable_for_xip_region
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(n_xip_section)
</UL>
<P><STRONG><a name="[6ee]"></a>mpu_disable_for_xip_region</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_init.o(n_xip_section), UNUSED)

<P><STRONG><a name="[693]"></a>cache_config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arch_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cache_config &rArr; flash_cache_config &rArr; app_qspi_dr_reg_addr_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_config
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
</UL>

<P><STRONG><a name="[695]"></a>cache_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arch_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cache_enable &rArr; flash_cache_enable &rArr; app_qspi_config_for_cache_wrapper &rArr; app_qspi_config_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_execution
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_execution
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_32bits_execution
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_execution
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
</UL>

<P><STRONG><a name="[697]"></a>cache_disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arch_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cache_disable &rArr; flash_cache_disable &rArr; app_qspi_disable_for_cache_wrapper &rArr; app_qspi_disable_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_disable
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_enable_for_xip_region
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_execution
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_execution
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_32bits_execution
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_execution
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[5ab]"></a>soc_initialize</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, arch_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = soc_initialize &rArr; nvds_init &rArr; nvds_index_build &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_dev_calib_in_main
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>SVC_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, svcall_asm.o(n_xip_section))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[522]"></a>get_real_rtc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_sleep_ram.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_32m_rc
</UL>

<P><STRONG><a name="[634]"></a>wait_rtc_until</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_sleep_ram.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_32m_xtal
</UL>

<P><STRONG><a name="[690]"></a>pre_deepsleep_processing_mp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_sleep_ram.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pre_deepsleep_processing_mp &rArr; deepsleep_prepare &rArr; flash_deep_power_down &rArr; flash_write_no_dma_operation_start &rArr; app_qspi_std_write_no_dma_wrapper &rArr; app_qspi_std_write_no_dma &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[6ab]"></a>flash_recovery</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_sleep_ram.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = flash_recovery &rArr; flash_wakeup &rArr; flash_write_no_dma_operation_start &rArr; app_qspi_std_write_no_dma_wrapper &rArr; app_qspi_std_write_no_dma &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_init_wrapper
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_config
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[691]"></a>post_deepsleep_processing_mp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sys_sleep_ram.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = post_deepsleep_processing_mp &rArr; flash_recovery &rArr; flash_wakeup &rArr; flash_write_no_dma_operation_start &rArr; app_qspi_std_write_no_dma_wrapper &rArr; app_qspi_std_write_no_dma &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_start
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_reset_to_gpio
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_clr_all_clk
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_close_32m_rc
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_startup
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_all
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_write_all_noie
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_pwm2_fc_h_setf
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_o_16m_xtal_en_setf
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_rtc
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_recovery
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_32m_xtal
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[418]"></a>rtt_log</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bx_dbg.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_end
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_default_msg_handler
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_flash_cleanup_for_ota
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_print
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_c
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_int_idx_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sys_stat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_sys_stat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sys_stat
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_sys_stat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_sys_stat
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sys_stat
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_sys_stat
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_sys_stat
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_error_isr
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_pop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_int_callback
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gattm_add_svc_rsp_handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_profile_added_ind_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_bxotas_start_req_ind_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_bxotas_finish_ind_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_connection_confirm_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_bond_req_ind_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapc_bond_ind_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disc_incl_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disc_desc_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disc_char_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_default_handler
</UL>

<P><STRONG><a name="[3a5]"></a>__aeabi_assert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bx_dbg.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_end
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_async_call_wrapper
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_write
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_payload_31Byte_patch
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_adv_int
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_pd_onoff_sw
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g1
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lld_pdu_tx_flush_patch
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler2_init
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc32k_patch
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pin_cfg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_intr_op
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_intr_op
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_intr_op
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_isr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_intr_op
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftsv_calc
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_pull_write
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_get_burst_transaction_size_enum
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_intr_op
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pin_cfg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_op
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_intr_op
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_pin_cfg
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_32bits
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_no_dma
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_complete
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write_dma
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_complete
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_rx_complete
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_reg
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_trigger_send
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[46d]"></a>rwip_assert_c</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, bx_dbg.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
</UL>

<P><STRONG><a name="[6af]"></a>hardfault_print</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, bx_dbg.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hardfault_print &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[c7]"></a>HardFault_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bx_dbg.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HardFault_Handler &rArr; hardfault_print &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_env_save
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[6b0]"></a>hardfault_env_save</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bx_dbg_asm.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[69b]"></a>clk_gate_clr_all_clk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk_gate.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[4eb]"></a>clk_gate_awo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clk_gate.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_with_ble_sleep
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_soft_wakeup
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
</UL>

<P><STRONG><a name="[54b]"></a>clk_gate_cpu_g1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clk_gate.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_clk_gate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_clk_gate
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_clk_gate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_clk_gate
</UL>

<P><STRONG><a name="[69c]"></a>pshare_reset_to_gpio</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pshare.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[51c]"></a>srst_cpu</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rst_gen.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_sw_rst
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_sw_rst
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_sw_rst
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_sw_rst
</UL>

<P><STRONG><a name="[6a2]"></a>sysctrl_pwr_pwm_2_sleep_en_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctrl.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[551]"></a>sysctrl_io_config_mask</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sysctrl.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysctrl_io_config_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>

<P><STRONG><a name="[54c]"></a>sysctrl_io_config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctrl.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysctrl_io_config &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_ctrl
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pin_cfg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pin_cfg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_pin_cfg
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_pin_cfg
</UL>

<P><STRONG><a name="[69a]"></a>sysctrl_io_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctrl.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[6a9]"></a>io_write_all</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, io_ctrl.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_write_all
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_write
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[6a7]"></a>io_out_read_all</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, io_ctrl.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_out_read_all
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[6a8]"></a>io_dir_read_all</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, io_ctrl.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_dir_read_all
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[6aa]"></a>io_dir_write_all_noie</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, io_ctrl.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_dir_write_all_noie
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_dir_write
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[60b]"></a>reg_set_xtal_current</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rf_reg_settings_apollo_00.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reg_set_xtal_current
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_startup
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_normal
</UL>

<P><STRONG><a name="[6ad]"></a>reg_set_xtal_current_startup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rf_reg_settings_apollo_00.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reg_set_xtal_current_startup &rArr; reg_set_xtal_current
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[6a5]"></a>reg_pll_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rf_reg_settings_apollo_00.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[6bd]"></a>qspi_get_fifo_depth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qspi_integration.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_32bits
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_no_dma
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
</UL>

<P><STRONG><a name="[6b4]"></a>app_dmac_start</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, app_dmac.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_block_ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
</UL>

<P><STRONG><a name="[6b5]"></a>app_dmac_transfer_wait</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, app_dmac.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_dmac_transfer_wait &rArr; dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_ch_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_stat_clean_if_all_transfer_done
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_block_ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait_wrapper
</UL>

<P><STRONG><a name="[4d8]"></a>app_dmac_start_wrapper</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_dmac_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_32bits
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write_dma
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
</UL>

<P><STRONG><a name="[6b6]"></a>app_dmac_transfer_wait_wrapper</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_dmac_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_dmac_transfer_wait_wrapper &rArr; app_dmac_transfer_wait &rArr; dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_32bits
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
</UL>

<P><STRONG><a name="[6b2]"></a>app_gpio_port_dir_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_write_all_noie
</UL>

<P><STRONG><a name="[6b1]"></a>app_gpio_port_dir_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_read_all
</UL>

<P><STRONG><a name="[55e]"></a>app_gpio_port_out_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_out_read_all
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_write
</UL>

<P><STRONG><a name="[55f]"></a>app_gpio_port_out_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_all
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_write
</UL>

<P><STRONG><a name="[6ef]"></a>flash_cache_flush</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flash_cache.o(n_xip_section), UNUSED)

<P><STRONG><a name="[6b7]"></a>flash_cache_flush_all</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash_cache.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_config
</UL>

<P><STRONG><a name="[694]"></a>flash_cache_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flash_cache.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_cache_config &rArr; app_qspi_dr_reg_addr_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_dr_reg_addr_for_cache_wrapper
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_flush_all
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_config
</UL>

<P><STRONG><a name="[696]"></a>flash_cache_enable</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, flash_cache.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_cache_enable &rArr; app_qspi_config_for_cache_wrapper &rArr; app_qspi_config_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_config_for_cache_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
</UL>

<P><STRONG><a name="[698]"></a>flash_cache_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash_cache.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_cache_disable &rArr; app_qspi_disable_for_cache_wrapper &rArr; app_qspi_disable_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_disable_for_cache_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
</UL>

<P><STRONG><a name="[1ee]"></a>app_qspi_init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_qspi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_init
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_init_wrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_qspi_wrapper.o(.data)
</UL>
<P><STRONG><a name="[6f0]"></a>app_qspi_uninit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_qspi.o(n_xip_section), UNUSED)

<P><STRONG><a name="[6bc]"></a>app_qspi_std_write</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_p
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_get_fifo_depth
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_config
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
</UL>

<P><STRONG><a name="[6bf]"></a>app_qspi_std_write_no_dma</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_qspi_std_write_no_dma &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_p
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_get_fifo_depth
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_no_dma_wrapper
</UL>

<P><STRONG><a name="[6c0]"></a>app_qspi_flash_program</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_p
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_get_fifo_depth
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_config
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program_wrapper
</UL>

<P><STRONG><a name="[6c1]"></a>app_qspi_std_read</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait_wrapper
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_p
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read_wrapper
</UL>

<P><STRONG><a name="[6c2]"></a>app_qspi_multi_read_32bits</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait_wrapper
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_p
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_get_fifo_depth
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_32bits_wrapper
</UL>

<P><STRONG><a name="[6c3]"></a>app_qspi_config_for_cache</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_qspi_config_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_p
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_config_for_cache_wrapper
</UL>

<P><STRONG><a name="[6cb]"></a>app_qspi_dr_reg_addr_for_cache</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_dr_reg_addr_for_cache_wrapper
</UL>

<P><STRONG><a name="[6c4]"></a>app_qspi_disable_for_cache</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_qspi_disable_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_get_count
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_disable_for_cache_wrapper
</UL>

<P><STRONG><a name="[69d]"></a>app_qspi_param_init_wrapper</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_qspi_param_init_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[69e]"></a>app_qspi_init_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_qspi_init_wrapper &rArr; app_qspi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
</UL>

<P><STRONG><a name="[6c6]"></a>app_qspi_std_write_wrapper</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_operation_start
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_operation_start
</UL>

<P><STRONG><a name="[6c7]"></a>app_qspi_std_write_no_dma_wrapper</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = app_qspi_std_write_no_dma_wrapper &rArr; app_qspi_std_write_no_dma &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_no_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_no_dma_operation_start
</UL>

<P><STRONG><a name="[6c8]"></a>app_qspi_flash_program_wrapper</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_operation_start
</UL>

<P><STRONG><a name="[6c9]"></a>app_qspi_std_read_wrapper</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_operation_start
</UL>

<P><STRONG><a name="[6ca]"></a>app_qspi_multi_read_32bits_wrapper</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_32bits
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_32bits_operation_start
</UL>

<P><STRONG><a name="[6b9]"></a>app_qspi_config_for_cache_wrapper</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_qspi_config_for_cache_wrapper &rArr; app_qspi_config_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_config_for_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_enable
</UL>

<P><STRONG><a name="[6b8]"></a>app_qspi_dr_reg_addr_for_cache_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_qspi_dr_reg_addr_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_dr_reg_addr_for_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_config
</UL>

<P><STRONG><a name="[6ba]"></a>app_qspi_disable_for_cache_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_qspi_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_qspi_disable_for_cache_wrapper &rArr; app_qspi_disable_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_disable_for_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_disable
</UL>

<P><STRONG><a name="[172]"></a>flash_program_execution</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, flash_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = flash_program_execution &rArr; flash_program_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_operation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>flash_erase_execution</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, flash_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = flash_erase_execution &rArr; flash_erase_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_operation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>flash_read_execution</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, flash_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_read_execution &rArr; flash_read_operation_start &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_operation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>flash_multi_read_32bits_execution</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = flash_multi_read_32bits_execution &rArr; flash_multi_read_32bits_operation_start &rArr; app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_32bits_operation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_32bits_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svcall.o(.constdata)
</UL>
<P><STRONG><a name="[4bc]"></a>periph_semaphore_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, periph_semaphore.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_init
</UL>

<P><STRONG><a name="[4b9]"></a>periph_semaphore_p</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, periph_semaphore.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_config_for_cache
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_32bits
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_no_dma
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate
</UL>

<P><STRONG><a name="[4be]"></a>periph_semaphore_v</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, periph_semaphore.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_isr
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_empty_isr
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_done
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_disable_for_cache
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_32bits
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_no_dma
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_complete
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_complete
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_rx_complete
</UL>

<P><STRONG><a name="[6c5]"></a>periph_semaphore_get_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, periph_semaphore.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_disable_for_cache
</UL>

<P><STRONG><a name="[6cc]"></a>flash_program_operation_start</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, flash_base.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = flash_program_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_execution
</UL>

<P><STRONG><a name="[6cd]"></a>flash_erase_operation_start</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, flash_base.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = flash_erase_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_execution
</UL>

<P><STRONG><a name="[6cf]"></a>flash_multi_read_32bits_operation_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_base.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = flash_multi_read_32bits_operation_start &rArr; app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_32bits_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_32bits_execution
</UL>

<P><STRONG><a name="[6ce]"></a>flash_read_operation_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_base.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = flash_read_operation_start &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_execution
</UL>

<P><STRONG><a name="[6d2]"></a>flash_write_operation_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_base.o(n_xip_section), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
</UL>

<P><STRONG><a name="[6d3]"></a>flash_write_no_dma_operation_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_base.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = flash_write_no_dma_operation_start &rArr; app_qspi_std_write_no_dma_wrapper &rArr; app_qspi_std_write_no_dma &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_no_dma_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wakeup
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_deep_power_down
</UL>

<P><STRONG><a name="[6ac]"></a>flash_wakeup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = flash_wakeup &rArr; flash_write_no_dma_operation_start &rArr; app_qspi_std_write_no_dma_wrapper &rArr; app_qspi_std_write_no_dma &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_no_dma_operation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
</UL>

<P><STRONG><a name="[6a1]"></a>flash_deep_power_down</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash_wrapper.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = flash_deep_power_down &rArr; flash_write_no_dma_operation_start &rArr; app_qspi_std_write_no_dma_wrapper &rArr; app_qspi_std_write_no_dma &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_no_dma_operation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[1ff]"></a>APP_BD_B101_Lamp_handler</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, jmesh_lamp.o(i.APP_BD_B101_Lamp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = APP_BD_B101_Lamp_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pick
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_when_control
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_handler
</UL>

<P><STRONG><a name="[20a]"></a>APP_BD_B101_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_protocol.o(i.APP_BD_B101_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + In Cycle
<LI>Call Chain = APP_BD_B101_handler &rArr;  read_meter_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[20c]"></a>APP_BD_B102_handler</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, app_protocol.o(i.APP_BD_B102_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_app
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_set
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_del
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_set
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_delete
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[213]"></a>APP_BD_B103_handler</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, app_protocol.o(i.APP_BD_B103_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = APP_BD_B103_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[214]"></a>APP_BD_B104_handler</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, app_protocol.o(i.APP_BD_B104_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = APP_BD_B104_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_get
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_set
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[218]"></a>APP_BD_B105_handler</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, app_protocol.o(i.APP_BD_B105_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = APP_BD_B105_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[21b]"></a>APP_BD_B106_handler</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, app_protocol.o(i.APP_BD_B106_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = APP_BD_B106_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_primary_addr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[21d]"></a>APP_BD_B183_handler</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, app_protocol.o(i.APP_BD_B183_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = APP_BD_B183_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Switch
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[21f]"></a>APP_BD_B201_handler</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, app_protocol.o(i.APP_BD_B201_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = APP_BD_B201_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_get
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[223]"></a>APP_BD_B202_handler</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, app_protocol.o(i.APP_BD_B202_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = APP_BD_B202_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel_group
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[227]"></a>APP_BD_B203_handler</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, app_protocol.o(i.APP_BD_B203_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = APP_BD_B203_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[228]"></a>APP_BD_B204_handler</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, app_protocol.o(i.APP_BD_B204_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = APP_BD_B204_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[229]"></a>APP_BD_B403_handler</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, app_protocol.o(i.APP_BD_B403_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = APP_BD_B403_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_app_broadcast_data
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[22b]"></a>APP_BD_B406_handler</STRONG> (Thumb, 294 bytes, Stack size 352 bytes, app_protocol.o(i.APP_BD_B406_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = APP_BD_B406_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_pack
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_mx188_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[230]"></a>APP_BD_BF01_handler</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, app_protocol.o(i.APP_BD_BF01_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = APP_BD_BF01_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[232]"></a>APP_BD_BF02_handler</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, app_protocol.o(i.APP_BD_BF02_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = APP_BD_BF02_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[235]"></a>APP_BD_BF03_handler</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, app_protocol.o(i.APP_BD_BF03_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = APP_BD_BF03_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[236]"></a>APP_BD_CA01_handler</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, app_protocol.o(i.APP_BD_CA01_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = APP_BD_CA01_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_save
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>

<P><STRONG><a name="[238]"></a>APP_BD_protocol_CheckFrame</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_protocol.o(i.APP_BD_protocol_CheckFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_BD_protocol_CheckFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_overtime_handler
</UL>

<P><STRONG><a name="[239]"></a>APP_BD_protocol_handler</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, app_protocol.o(i.APP_BD_protocol_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_CheckFrame
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_CA01_handler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF03_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF02_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF01_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B406_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B403_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B204_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B203_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B202_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B201_handler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B183_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B106_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B105_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B104_handler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B103_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B102_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_meter_handler
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_data_recv_handler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_overtime_handler
</UL>

<P><STRONG><a name="[207]"></a>APP_BD_protocol_handler_callback</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, app_protocol.o(i.APP_BD_protocol_handler_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_get_phone
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_tx_pkt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_return_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_CA01_handler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF03_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF02_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF01_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B403_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B204_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B203_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B202_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B201_handler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B183_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B106_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B105_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B104_handler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B103_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B102_handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_transmission_uart_overtime_handler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_transmission_uart_callback_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_repeat_timer_handler
</UL>

<P><STRONG><a name="[240]"></a>ApsInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.ApsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = ApsInit &rArr; key_init &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_port_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_read
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_control_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ota_adv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_record
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_task_start
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_node_state_timer_start
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_timer_start
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_start
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsMemoryParaRead
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[243]"></a>ApsMemoryParaRead</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.ApsMemoryParaRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ApsMemoryParaRead &rArr; realcomm_send_read_handler &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_send_read_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[24e]"></a>ByteRead</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, si4438_fifo.o(i.ByteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_ReadData
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_GetResp
</UL>

<P><STRONG><a name="[251]"></a>ByteSend</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, si4438_fifo.o(i.ByteSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ByteSend &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_WriteData
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_ReadData
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_GetResp
</UL>

<P><STRONG><a name="[26c]"></a>HexToStr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jmesh_print.o(i.HexToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
</UL>

<P><STRONG><a name="[252]"></a>JMESH_DEBUG_SEND_TO_CKQ</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, app_protocol.o(i.JMESH_DEBUG_SEND_TO_CKQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_get_phone
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_send
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>

<P><STRONG><a name="[253]"></a>Lamp_Control_rev_data_by_node</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, jmesh_lamp.o(i.Lamp_Control_rev_data_by_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = Lamp_Control_rev_data_by_node &rArr; app_read_meter_by_node_uart_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pick
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_uart_handler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_when_control
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_handler
</UL>

<P><STRONG><a name="[255]"></a>Lamp_Control_rev_data_check</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, jmesh_lamp.o(i.Lamp_Control_rev_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = Lamp_Control_rev_data_check &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pick
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_when_control
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
</UL>

<P><STRONG><a name="[21e]"></a>OTA_Switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_config.o(i.OTA_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = OTA_Switch &rArr; ota_permit_timer_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_permit_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B183_handler
</UL>

<P><STRONG><a name="[257]"></a>PA_power_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, si4438_fifo.o(i.PA_power_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PA_power_set &rArr; si446x_set_property &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_set_property
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_TX_Power_Ceshi
</UL>

<P><STRONG><a name="[259]"></a>RF_FIFO_TX</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, si4438_fifo.o(i.RF_FIFO_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RF_FIFO_TX &rArr; vRadio_StartTx &rArr; si446x_get_int_status &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ms_to_ticks
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartTx
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckTransmitted
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartRX
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_change_state
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_tx_pkt
</UL>

<P><STRONG><a name="[250]"></a>SpiDelay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si4438_fifo.o(i.SpiDelay))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>

<P><STRONG><a name="[260]"></a>Whiting_Buff</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, _470_phy.o(i.Whiting_Buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Whiting_Buff &rArr; Whiting_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Whiting_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_tx_pkt
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_rx_pkt
</UL>

<P><STRONG><a name="[261]"></a>Whiting_Data</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, _470_phy.o(i.Whiting_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Whiting_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Whiting_Buff
</UL>

<P><STRONG><a name="[262]"></a>Write_TX_Power_Ceshi</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _470_phy.o(i.Write_TX_Power_Ceshi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Write_TX_Power_Ceshi &rArr; PA_power_set &rArr; si446x_set_property &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_power_set
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
</UL>

<P><STRONG><a name="[263]"></a>_470_app_recv</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, _470_app.o(i._470_app_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = _470_app_recv &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_CheckFrame
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_rx_pkt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_report_return_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_timer_handler
</UL>

<P><STRONG><a name="[1b]"></a>_470_report_overtime_handler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _470_app.o(i._470_report_overtime_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _470_report_overtime_handler &rArr; os_timer_event_restart &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_tx_pkt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _470_app.o(i.report_by_470)
</UL>
<P><STRONG><a name="[266]"></a>_470_report_return_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, _470_app.o(i._470_report_return_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _470_report_return_handler &rArr; os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
</UL>

<P><STRONG><a name="[269]"></a>_gatt_send_buffer_cmd</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, jmesh_print.o(i._gatt_send_buffer_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = _gatt_send_buffer_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_client_response_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_para
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_netkey
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_mac
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_node
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_history
</UL>

<P><STRONG><a name="[26d]"></a>_gatt_send_cmd</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, jmesh_print.o(i._gatt_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_result_status_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_exc_status_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_valve_pin_status_callback
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_value_unit_status_callback
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_value_status_callback
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_type_status_callback
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_report_para_status_callback
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_pulse_pin_status_callback
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_param_status_callback
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_client_response_handler
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_cmd_process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_valve
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_value
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_val_pin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_unit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_type
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_report
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_pul_pin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_param
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_mac
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_valve
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_value
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_val_pin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_unit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_type
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_report
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_pul_pin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_param
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_mac
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_update_iv_index
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_result
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_pwm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_ota
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_role
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_mac
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_lowpower_para
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_light_mode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_iv_index
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_gpio
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_dBm
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_baud
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_addr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_trans
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_meter_cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_hex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_ascii
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_restore_default
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_reset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_pdu_log
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_onoff_log
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_light_switch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_light_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iowrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_ioread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iopull
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_version
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_timer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_subscribe
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_route
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_role
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_pwm
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_para
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_netkey
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_neighbor
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_mac
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_lowpower_para
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_iv_index
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_feature
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_dBm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_connected
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_con_rd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_bind
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_appkey
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_addr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_val_by_mac
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_val_by_addr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_set_param
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_node
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_history
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_get_param
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_get_history
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_exit_ota
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_end_pwm
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_echo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_at_test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_netkey
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_appkey
</UL>

<P><STRONG><a name="[26e]"></a>_print</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, jmesh_print.o(i._print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JMESH_DEBUG_SEND_TO_CKQ
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send_no_take_semphr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_add_model
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_realcomm_server_baudrate_set_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_result_status_handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_relay_status_callback
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_status_callback
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_status_callback
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_callback
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_status_callback
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_friend_status_callback
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default_ttl_status_callback
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_status_callback
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_status_callback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_status_handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_list_handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_write_handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_result_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_recv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_timer_list
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_access_send
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_receive_offer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_choose_offer
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_send
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_update_timeout_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update_timeout_handler
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_confirm_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll_timeout_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_offer_handler
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_link_require
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_cache_push
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_pdu_cache
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_get_rssi
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_connected
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_request_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_offer
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_segment_recv_ack
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_recv
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_recv
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_recv
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_send_finder
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_read_finder
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_transmit
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_ack
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adapter_gatt_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_notify
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_trigger_send
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_recv
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_phone_connected
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_multilink_disconnect_old
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_buffer_queue_pop
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel_callback
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_cmp_evt_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gapm_cmp_evt_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_send
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_disconnect_request_recv
</UL>

<P><STRONG><a name="[271]"></a>_print_buffer</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, jmesh_print.o(i._print_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JMESH_DEBUG_SEND_TO_CKQ
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send_no_take_semphr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_client_report_status
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_device_client_info_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_client_report_set_status_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_client_baudrate_set_status_handler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_report_handler
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_mac_status_callback
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_list_callback
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_list_callback
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_list_callback
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_list_callback
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_composition_data_status_callback
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_list_callback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_recv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_log
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_phone_disconnected
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnected
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connected_callback
</UL>

<P><STRONG><a name="[272]"></a>_print_buffer_cmd</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, jmesh_print.o(i._print_buffer_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _print_buffer_cmd &rArr; jmesh_uart_send_no_take_semphr &rArr; app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send_no_take_semphr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_client_response_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_para
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_netkey
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_mac
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_node
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_history
</UL>

<P><STRONG><a name="[273]"></a>_print_cmd</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, jmesh_print.o(i._print_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _print_cmd &rArr; jmesh_uart_send_no_take_semphr &rArr; app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send_no_take_semphr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_result_status_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_exc_status_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_valve_pin_status_callback
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_value_unit_status_callback
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_value_status_callback
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_type_status_callback
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_report_para_status_callback
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_pulse_pin_status_callback
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_param_status_callback
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_client_response_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_rd_table_print
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_cmd_process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_valve
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_value
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_val_pin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_unit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_type
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_report
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_pul_pin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_param
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_mac
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_valve
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_value
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_val_pin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_unit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_type
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_report
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_pul_pin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_param
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_get_mac
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_update_iv_index
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_result
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_test_app_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_pwm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_ota
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_role
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_mac
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_lowpower_para
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_light_mode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_iv_index
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_gpio
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_dBm
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_baud
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_addr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_trans
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_meter_cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_hex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_ascii
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_restore_default
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_reset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_pdu_log
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_onoff_log
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_light_switch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_light_mode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iowrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_ioread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_iopull
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_version
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_timer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_subscribe
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_route
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_role
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_pwm
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_para
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_netkey
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_neighbor
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_mac
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_lowpower_para
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_iv_index
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_feature
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_dBm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_connected
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_con_rd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_bind
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_appkey
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_addr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_val_by_mac
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_val_by_addr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_set_param
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_node
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_list_history
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_get_param
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_get_history
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_exit_ota
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_end_pwm
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_echo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_at_test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_netkey
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_appkey
</UL>

<P><STRONG><a name="[110]"></a>app_broadcast_data_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, jmesh_app_pro.o(i.app_broadcast_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = app_broadcast_data_handler &rArr; lamp_mode_control_handler &rArr; read_meter_when_control &rArr; jmesh_uart_send &rArr; app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_control_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[275]"></a>app_conn_adv_frame</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_protocol.o(i.app_conn_adv_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_conn_adv_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_link_require
</UL>

<P><STRONG><a name="[276]"></a>app_conn_adv_link_require</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, app_protocol.o(i.app_conn_adv_link_require))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = app_conn_adv_link_require &rArr; jmesh_adv_send &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_send
</UL>

<P><STRONG><a name="[5]"></a>app_conn_adv_send</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_protocol.o(i.app_conn_adv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = app_conn_adv_send &rArr; app_conn_adv_link_require &rArr; jmesh_adv_send &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_link_require
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_protocol.o(i.app_conn_adv_send)
<LI> app_protocol.o(i.app_conn_adv_start)
</UL>
<P><STRONG><a name="[242]"></a>app_conn_adv_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_protocol.o(i.app_conn_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = app_conn_adv_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[10f]"></a>app_network_maintain_handler</STRONG> (Thumb, 178 bytes, Stack size 88 bytes, jmesh_app_pro.o(i.app_network_maintain_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = app_network_maintain_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_send_save_handler
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel_group
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[241]"></a>app_network_maintain_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.app_network_maintain_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = app_network_maintain_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[6]"></a>app_network_maintain_timer_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.app_network_maintain_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_network_maintain_timer_handler &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_app_pro.o(i.app_network_maintain_start)
</UL>
<P><STRONG><a name="[112]"></a>app_read_meter_by_node_handler</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, app_protocol.o(i.app_read_meter_by_node_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = app_read_meter_by_node_handler &rArr; Lamp_Control_rev_data_by_node &rArr; app_read_meter_by_node_uart_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[2]"></a>app_read_meter_by_node_repeat_timer_handler</STRONG> (Thumb, 124 bytes, Stack size 288 bytes, app_protocol.o(i.app_read_meter_by_node_repeat_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = app_read_meter_by_node_repeat_timer_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_protocol.o(i.APP_BD_B406_handler)
</UL>
<P><STRONG><a name="[113]"></a>app_read_meter_by_node_return_handler</STRONG> (Thumb, 138 bytes, Stack size 336 bytes, app_protocol.o(i.app_read_meter_by_node_return_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = app_read_meter_by_node_return_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[254]"></a>app_read_meter_by_node_uart_handler</STRONG> (Thumb, 106 bytes, Stack size 336 bytes, app_protocol.o(i.app_read_meter_by_node_uart_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = app_read_meter_by_node_uart_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
</UL>

<P><STRONG><a name="[7]"></a>app_read_meter_by_node_uart_timer_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_protocol.o(i.app_read_meter_by_node_uart_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_protocol.o(i.app_read_meter_by_node_handler)
</UL>
<P><STRONG><a name="[111]"></a>app_set_meter_handler</STRONG> (Thumb, 110 bytes, Stack size 304 bytes, jmesh_app_pro.o(i.app_set_meter_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136<LI>Call Chain = app_set_meter_handler &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_send_save_handler
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[8]"></a>app_task_timer_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.app_task_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = app_task_timer_handler &rArr; _470_app_recv &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_app_pro.o(i.app_task_timer_start)
</UL>
<P><STRONG><a name="[24c]"></a>app_task_timer_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.app_task_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = app_task_timer_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[27a]"></a>app_transmission_uart_callback_handler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_protocol.o(i.app_transmission_uart_callback_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + In Cycle
<LI>Call Chain = app_transmission_uart_callback_handler &rArr;  APP_BD_protocol_handler_callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
</UL>

<P><STRONG><a name="[27b]"></a>app_transmission_uart_overtime_handler</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, app_protocol.o(i.app_transmission_uart_overtime_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = app_transmission_uart_overtime_handler &rArr; APP_BD_protocol_handler_callback &rArr; message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_overtime_handler
</UL>

<P><STRONG><a name="[4]"></a>broadcast_reset_timer_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.broadcast_reset_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = broadcast_reset_timer_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_app_pro.o(i.app_broadcast_data_handler)
</UL>
<P><STRONG><a name="[2dc]"></a>calculate_confirmation</STRONG> (Thumb, 168 bytes, Stack size 240 bytes, jmesh_provisioning.o(i.calculate_confirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = calculate_confirmation &rArr; security_k1_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_s1_salt_generation
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k1_derivation
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_confirmation
</UL>

<P><STRONG><a name="[2e0]"></a>calculate_provision_key</STRONG> (Thumb, 146 bytes, Stack size 128 bytes, jmesh_provisioning.o(i.calculate_provision_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = calculate_provision_key &rArr; security_k1_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_s1_salt_generation
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_k1_derivation
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_random_handler
</UL>

<P><STRONG><a name="[2e1]"></a>check_confirmation</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, jmesh_provisioning.o(i.check_confirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = check_confirmation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_random_handler
</UL>

<P><STRONG><a name="[a]"></a>check_node_state_timer_handler</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, jmesh_app_pro.o(i.check_node_state_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = check_node_state_timer_handler &rArr; os_timer_event_restart &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_app_pro.o(i.check_node_state_timer_start)
</UL>
<P><STRONG><a name="[245]"></a>check_node_state_timer_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.check_node_state_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = check_node_state_timer_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[35]"></a>config_appkey_add_handler</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, config_server.o(i.config_appkey_add_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = config_appkey_add_handler &rArr; config_appkey_add_server_callback &rArr; jmesh_appkey_set &rArr; jmesh_security_cal_aid &rArr; security_k4_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_app
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2e2]"></a>config_appkey_add_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_appkey_add_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = config_appkey_add_server_callback &rArr; jmesh_appkey_set &rArr; jmesh_security_cal_aid &rArr; security_k4_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_set
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_handler
</UL>

<P><STRONG><a name="[36]"></a>config_appkey_delete_handler</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, config_server.o(i.config_appkey_delete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = config_appkey_delete_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_delete_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2e4]"></a>config_appkey_delete_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_appkey_delete_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_appkey_delete_server_callback &rArr; jmesh_appkey_delete &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_delete_handler
</UL>

<P><STRONG><a name="[37]"></a>config_appkey_get_handler</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, config_server.o(i.config_appkey_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = config_appkey_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2e5]"></a>config_appkey_get_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_appkey_get_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_appkey_get_server_callback &rArr; jmesh_appkey_list
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_list
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_get_handler
</UL>

<P><STRONG><a name="[2e6]"></a>config_appkey_list_callback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, config_client_callback.o(i.config_appkey_list_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = config_appkey_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_list_handler
</UL>

<P><STRONG><a name="[1e]"></a>config_appkey_list_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, config_client.o(i.config_appkey_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = config_appkey_list_handler &rArr; config_appkey_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_list_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[2e7]"></a>config_appkey_status_callback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config_client_callback.o(i.config_appkey_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = config_appkey_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_status_handler
</UL>

<P><STRONG><a name="[1f]"></a>config_appkey_status_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, config_client.o(i.config_appkey_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = config_appkey_status_handler &rArr; config_appkey_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>config_appkey_update_handler</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, config_server.o(i.config_appkey_update_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = config_appkey_update_handler &rArr; config_appkey_update_server_callback &rArr; jmesh_appkey_update &rArr; jmesh_security_cal_aid &rArr; security_k4_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_update_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2e8]"></a>config_appkey_update_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_appkey_update_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = config_appkey_update_server_callback &rArr; jmesh_appkey_update &rArr; jmesh_security_cal_aid &rArr; security_k4_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_update
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_update_handler
</UL>

<P><STRONG><a name="[39]"></a>config_beacon_get_handler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, config_server.o(i.config_beacon_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_beacon_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2ea]"></a>config_beacon_get_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_beacon_get_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = config_beacon_get_server_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_state_get_secure_network_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_get_handler
</UL>

<P><STRONG><a name="[3a]"></a>config_beacon_set_handler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, config_server.o(i.config_beacon_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_beacon_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_set_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2ec]"></a>config_beacon_set_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_beacon_set_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = config_beacon_set_server_callback &rArr; jmesh_state_set_secure_network_beacon &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_state_set_secure_network_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_set_handler
</UL>

<P><STRONG><a name="[2ee]"></a>config_beacon_status_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, config_client_callback.o(i.config_beacon_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = config_beacon_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_status_handler
</UL>

<P><STRONG><a name="[20]"></a>config_beacon_status_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config_client.o(i.config_beacon_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = config_beacon_status_handler &rArr; config_beacon_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[2ef]"></a>config_client_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, config_client.o(i.config_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = config_client_init &rArr; jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_add_model
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
</UL>

<P><STRONG><a name="[3b]"></a>config_composition_data_get_handler</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, config_server.o(i.config_composition_data_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = config_composition_data_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_composition_get_server_handler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2f2]"></a>config_composition_data_status_callback</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, config_client_callback.o(i.config_composition_data_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = config_composition_data_status_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_composition_data_status_handler
</UL>

<P><STRONG><a name="[21]"></a>config_composition_data_status_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, config_client.o(i.config_composition_data_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = config_composition_data_status_handler &rArr; config_composition_data_status_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_composition_data_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[2f1]"></a>config_composition_get_server_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, config_server_callback.o(i.config_composition_get_server_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_composition_get_server_handler &rArr; jmesh_composition_page_data_get &rArr; jmesh_list_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_composition_page_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_composition_data_get_handler
</UL>

<P><STRONG><a name="[3c]"></a>config_default_ttl_get_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, config_server.o(i.config_default_ttl_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_default_ttl_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default_ttl_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2f4]"></a>config_default_ttl_get_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_default_ttl_get_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default_ttl_get_handler
</UL>

<P><STRONG><a name="[3d]"></a>config_default_ttl_set_handler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, config_server.o(i.config_default_ttl_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_default_ttl_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default_ttl_set_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2f5]"></a>config_default_ttl_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_default_ttl_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default_ttl_set_handler
</UL>

<P><STRONG><a name="[2f6]"></a>config_default_ttl_status_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, config_client_callback.o(i.config_default_ttl_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = config_default_ttl_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default_ttl_status_handler
</UL>

<P><STRONG><a name="[22]"></a>config_default_ttl_status_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config_client.o(i.config_default_ttl_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = config_default_ttl_status_handler &rArr; config_default_ttl_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default_ttl_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>config_friend_get_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_friend_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_friend_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_friend_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2f7]"></a>config_friend_get_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_friend_get_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_friend_get_handler
</UL>

<P><STRONG><a name="[41]"></a>config_friend_set_handler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, config_server.o(i.config_friend_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_friend_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_friend_set_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2f8]"></a>config_friend_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_friend_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_friend_set_handler
</UL>

<P><STRONG><a name="[2f9]"></a>config_friend_status_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, config_client_callback.o(i.config_friend_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = config_friend_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_friend_status_handler
</UL>

<P><STRONG><a name="[24]"></a>config_friend_status_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config_client.o(i.config_friend_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = config_friend_status_handler &rArr; config_friend_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_friend_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>config_gatt_proxy_get_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_gatt_proxy_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_gatt_proxy_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2fa]"></a>config_gatt_proxy_get_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_gatt_proxy_get_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_get_handler
</UL>

<P><STRONG><a name="[3f]"></a>config_gatt_proxy_set_handler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, config_server.o(i.config_gatt_proxy_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_gatt_proxy_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_set_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2fb]"></a>config_gatt_proxy_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_gatt_proxy_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_set_handler
</UL>

<P><STRONG><a name="[2fc]"></a>config_gatt_proxy_status_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, config_client_callback.o(i.config_gatt_proxy_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = config_gatt_proxy_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_status_handler
</UL>

<P><STRONG><a name="[23]"></a>config_gatt_proxy_status_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config_client.o(i.config_gatt_proxy_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = config_gatt_proxy_status_handler &rArr; config_gatt_proxy_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>config_heartbeat_publication_get_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_server.o(i.config_heartbeat_publication_get_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>config_heartbeat_publication_set_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_server.o(i.config_heartbeat_publication_set_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>config_heartbeat_publication_status_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_client.o(i.config_heartbeat_publication_status_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>config_heartbeat_subscription_get_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_server.o(i.config_heartbeat_subscription_get_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>config_heartbeat_subscription_set_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_server.o(i.config_heartbeat_subscription_set_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>config_heartbeat_subscription_status_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_client.o(i.config_heartbeat_subscription_status_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>config_key_refresh_phase_get_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_key_refresh_phase_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_key_refresh_phase_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2fd]"></a>config_key_refresh_phase_get_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_key_refresh_phase_get_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_get_handler
</UL>

<P><STRONG><a name="[5e]"></a>config_key_refresh_phase_set_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_key_refresh_phase_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_key_refresh_phase_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_set_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2fe]"></a>config_key_refresh_phase_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_key_refresh_phase_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_set_handler
</UL>

<P><STRONG><a name="[31]"></a>config_key_refresh_status_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_client.o(i.config_key_refresh_status_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[2ff]"></a>config_model_app_bind_callback</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, config_client_callback.o(i.config_model_app_bind_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = config_model_app_bind_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_status_handler
</UL>

<P><STRONG><a name="[56]"></a>config_model_app_bind_handler</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, config_server.o(i.config_model_app_bind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = config_model_app_bind_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_bind_server_callback
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_bind_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>config_model_app_status_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, config_client.o(i.config_model_app_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = config_model_app_status_handler &rArr; config_model_app_bind_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>config_model_app_unbind_handler</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, config_server.o(i.config_model_app_unbind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = config_model_app_unbind_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_unbind_server_callback
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_unbind_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>config_model_publication_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, config_server.o(i.config_model_publication_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = config_model_publication_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_publication_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>config_model_publication_set_handler</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, config_server.o(i.config_model_publication_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = config_model_publication_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_publication_set_server_callback
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_publication_set_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>config_model_publication_status_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_client.o(i.config_model_publication_status_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>config_model_publication_virtual_address_set_handler</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, config_server.o(i.config_model_publication_virtual_address_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = config_model_publication_virtual_address_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_virtual_address_vendor_set_server_callback
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_virtual_address_sig_set_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[308]"></a>config_model_publication_virtual_address_sig_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_model_publication_virtual_address_sig_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_virtual_address_set_handler
</UL>

<P><STRONG><a name="[307]"></a>config_model_publication_virtual_address_vendor_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_model_publication_virtual_address_vendor_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_virtual_address_set_handler
</UL>

<P><STRONG><a name="[47]"></a>config_model_subscription_add_handler</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, config_server.o(i.config_model_subscription_add_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = config_model_subscription_add_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_add_server_callback
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_add_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>config_model_subscription_delete_all_handler</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, config_server.o(i.config_model_subscription_delete_all_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = config_model_subscription_delete_all_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_delete_all_server_callback
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_delete_all_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>config_model_subscription_delete_handler</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, config_server.o(i.config_model_subscription_delete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = config_model_subscription_delete_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_delete_server_callback
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_delete_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>config_model_subscription_overwrite_handler</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, config_server.o(i.config_model_subscription_overwrite_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = config_model_subscription_overwrite_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_overwrite_server_callback
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_overwrite_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[311]"></a>config_model_subscription_status_callback</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, config_client_callback.o(i.config_model_subscription_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = config_model_subscription_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_status_handler
</UL>

<P><STRONG><a name="[27]"></a>config_model_subscription_status_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, config_client.o(i.config_model_subscription_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = config_model_subscription_status_handler &rArr; config_model_subscription_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>config_model_subscription_virtual_address_add_handler</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, config_server.o(i.config_model_subscription_virtual_address_add_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = config_model_subscription_virtual_address_add_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_virtual_address_add_server_callback
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_virtual_address_add_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>config_model_subscription_virtual_address_delete_handler</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, config_server.o(i.config_model_subscription_virtual_address_delete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = config_model_subscription_virtual_address_delete_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_virtual_address_delete_server_callback
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_virtual_address_delete_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>config_model_subscription_virtual_address_overwrite_handler</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, config_server.o(i.config_model_subscription_virtual_address_overwrite_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = config_model_subscription_virtual_address_overwrite_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_virtual_address_overwrite_server_callback
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_virtual_address_overwrite_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>config_netkey_add_handler</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, config_server.o(i.config_netkey_add_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = config_netkey_add_handler &rArr; config_netkey_add_server_callback &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_add_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[318]"></a>config_netkey_add_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_netkey_add_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = config_netkey_add_server_callback &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_add_handler
</UL>

<P><STRONG><a name="[4f]"></a>config_netkey_delete_handler</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, config_server.o(i.config_netkey_delete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = config_netkey_delete_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_delete_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[319]"></a>config_netkey_delete_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_netkey_delete_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = config_netkey_delete_server_callback &rArr; jmesh_netkey_state_del &rArr; jmesh_save_delete &rArr; nvds_del &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_del
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_delete_handler
</UL>

<P><STRONG><a name="[50]"></a>config_netkey_get_handler</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, config_server.o(i.config_netkey_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = config_netkey_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[31a]"></a>config_netkey_get_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_netkey_get_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = config_netkey_get_server_callback &rArr; jmesh_netkey_state_list
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_list
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_get_handler
</UL>

<P><STRONG><a name="[31c]"></a>config_netkey_list_callback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, config_client_callback.o(i.config_netkey_list_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = config_netkey_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_list_handler
</UL>

<P><STRONG><a name="[2b]"></a>config_netkey_list_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, config_client.o(i.config_netkey_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = config_netkey_list_handler &rArr; config_netkey_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_list_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[31d]"></a>config_netkey_status_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, config_client_callback.o(i.config_netkey_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = config_netkey_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_status_handler
</UL>

<P><STRONG><a name="[2a]"></a>config_netkey_status_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, config_client.o(i.config_netkey_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = config_netkey_status_handler &rArr; config_netkey_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>config_netkey_update_handler</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, config_server.o(i.config_netkey_update_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = config_netkey_update_handler &rArr; config_netkey_update_server_callback &rArr; jmesh_netkey_state_update &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_update_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[31e]"></a>config_netkey_update_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_netkey_update_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = config_netkey_update_server_callback &rArr; jmesh_netkey_state_update &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_update
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_update_handler
</UL>

<P><STRONG><a name="[52]"></a>config_network_transmit_get_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_network_transmit_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_network_transmit_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_network_transmit_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[320]"></a>config_network_transmit_get_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_network_transmit_get_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_network_transmit_get_handler
</UL>

<P><STRONG><a name="[53]"></a>config_network_transmit_set_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_network_transmit_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_network_transmit_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_network_transmit_set_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[321]"></a>config_network_transmit_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_network_transmit_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_network_transmit_set_handler
</UL>

<P><STRONG><a name="[34]"></a>config_network_transmit_status_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_client.o(i.config_network_transmit_status_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>config_node_identity_get_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_node_identity_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_node_identity_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[322]"></a>config_node_identity_get_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_node_identity_get_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_get_handler
</UL>

<P><STRONG><a name="[5b]"></a>config_node_identity_set_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_node_identity_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_node_identity_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_set_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[323]"></a>config_node_identity_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_node_identity_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_set_handler
</UL>

<P><STRONG><a name="[2f]"></a>config_node_identity_status_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_client.o(i.config_node_identity_status_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>config_node_reset_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_server.o(i.config_node_reset_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>config_node_reset_status_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_client.o(i.config_node_reset_status_handler))
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>config_relay_get_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_relay_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_relay_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_relay_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[324]"></a>config_relay_get_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_relay_get_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_relay_set_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_relay_get_handler
</UL>

<P><STRONG><a name="[43]"></a>config_relay_set_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, config_server.o(i.config_relay_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = config_relay_set_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_relay_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[325]"></a>config_relay_status_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, config_client_callback.o(i.config_relay_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = config_relay_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_relay_status_handler
</UL>

<P><STRONG><a name="[25]"></a>config_relay_status_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config_client.o(i.config_relay_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = config_relay_status_handler &rArr; config_relay_status_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_relay_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[326]"></a>config_server_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, config_server.o(i.config_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = config_server_init &rArr; jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_add_model
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
</UL>

<P><STRONG><a name="[301]"></a>config_sig_model_app_bind_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_sig_model_app_bind_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_sig_model_app_bind_server_callback &rArr; jmesh_model_bind_app &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_app
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_handler
</UL>

<P><STRONG><a name="[58]"></a>config_sig_model_app_get_handler</STRONG> (Thumb, 96 bytes, Stack size 80 bytes, config_server.o(i.config_sig_model_app_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = config_sig_model_app_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[327]"></a>config_sig_model_app_get_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_sig_model_app_get_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = config_sig_model_app_get_server_callback &rArr; jmesh_model_bind_list &rArr; jmesh_bind_list &rArr; jmesh_appkey_get_by_key_index
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_list
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_get_handler
</UL>

<P><STRONG><a name="[328]"></a>config_sig_model_app_list_callback</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, config_client_callback.o(i.config_sig_model_app_list_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = config_sig_model_app_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_list_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_list_handler
</UL>

<P><STRONG><a name="[2d]"></a>config_sig_model_app_list_handler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, config_client.o(i.config_sig_model_app_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = config_sig_model_app_list_handler &rArr; config_sig_model_app_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_list_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[303]"></a>config_sig_model_app_unbind_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_sig_model_app_unbind_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_sig_model_app_unbind_server_callback &rArr; jmesh_model_unbind_app &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_unbind_app
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_unbind_handler
</UL>

<P><STRONG><a name="[304]"></a>config_sig_model_publication_get_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_sig_model_publication_get_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_get_handler
</UL>

<P><STRONG><a name="[306]"></a>config_sig_model_publication_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_sig_model_publication_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_set_handler
</UL>

<P><STRONG><a name="[30a]"></a>config_sig_model_subscription_add_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_sig_model_subscription_add_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_sig_model_subscription_add_server_callback &rArr; jmesh_model_subscription_list_add &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
</UL>

<P><STRONG><a name="[30c]"></a>config_sig_model_subscription_delete_all_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_sig_model_subscription_delete_all_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_sig_model_subscription_delete_all_server_callback &rArr; jmesh_model_subscription_list_delete_all &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_delete_all
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
</UL>

<P><STRONG><a name="[30e]"></a>config_sig_model_subscription_delete_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_sig_model_subscription_delete_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_sig_model_subscription_delete_server_callback &rArr; jmesh_model_subscription_list_remove &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
</UL>

<P><STRONG><a name="[54]"></a>config_sig_model_subscription_get_handler</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, config_server.o(i.config_sig_model_subscription_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = config_sig_model_subscription_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[32a]"></a>config_sig_model_subscription_get_server_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, config_server_callback.o(i.config_sig_model_subscription_get_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = config_sig_model_subscription_get_server_callback &rArr; jmesh_model_subscription_list &rArr; jmesh_subscription_list
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_get_handler
</UL>

<P><STRONG><a name="[32b]"></a>config_sig_model_subscription_list_callback</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, config_client_callback.o(i.config_sig_model_subscription_list_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = config_sig_model_subscription_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_list_handler
</UL>

<P><STRONG><a name="[28]"></a>config_sig_model_subscription_list_handler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, config_client.o(i.config_sig_model_subscription_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = config_sig_model_subscription_list_handler &rArr; config_sig_model_subscription_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_list_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[310]"></a>config_sig_model_subscription_overwrite_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_sig_model_subscription_overwrite_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_sig_model_subscription_overwrite_server_callback &rArr; jmesh_model_subscription_list_overwrite &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_overwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
</UL>

<P><STRONG><a name="[313]"></a>config_sig_model_subscription_virtual_address_add_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_sig_model_subscription_virtual_address_add_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_add_handler
</UL>

<P><STRONG><a name="[315]"></a>config_sig_model_subscription_virtual_address_delete_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_sig_model_subscription_virtual_address_delete_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_delete_handler
</UL>

<P><STRONG><a name="[317]"></a>config_sig_model_subscription_virtual_address_overwrite_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_sig_model_subscription_virtual_address_overwrite_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_overwrite_handler
</UL>

<P><STRONG><a name="[300]"></a>config_vendor_model_app_bind_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_vendor_model_app_bind_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_vendor_model_app_bind_server_callback &rArr; jmesh_model_bind_app &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_app
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_handler
</UL>

<P><STRONG><a name="[59]"></a>config_vendor_model_app_get_handler</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, config_server.o(i.config_vendor_model_app_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = config_vendor_model_app_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[32d]"></a>config_vendor_model_app_get_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_vendor_model_app_get_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = config_vendor_model_app_get_server_callback &rArr; jmesh_model_bind_list &rArr; jmesh_bind_list &rArr; jmesh_appkey_get_by_key_index
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_list
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_get_handler
</UL>

<P><STRONG><a name="[2e]"></a>config_vendor_model_app_list_handler</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, config_client.o(i.config_vendor_model_app_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = config_vendor_model_app_list_handler &rArr; config_sig_model_app_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_list_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[302]"></a>config_vendor_model_app_unbind_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_vendor_model_app_unbind_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_vendor_model_app_unbind_server_callback &rArr; jmesh_model_unbind_app &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_unbind_app
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_unbind_handler
</UL>

<P><STRONG><a name="[305]"></a>config_vendor_model_publication_set_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_vendor_model_publication_set_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_set_handler
</UL>

<P><STRONG><a name="[309]"></a>config_vendor_model_subscription_add_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_vendor_model_subscription_add_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_vendor_model_subscription_add_server_callback &rArr; jmesh_model_subscription_list_add &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
</UL>

<P><STRONG><a name="[30b]"></a>config_vendor_model_subscription_delete_all_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_vendor_model_subscription_delete_all_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_vendor_model_subscription_delete_all_server_callback &rArr; jmesh_model_subscription_list_delete_all &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_delete_all
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
</UL>

<P><STRONG><a name="[30d]"></a>config_vendor_model_subscription_delete_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_vendor_model_subscription_delete_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_vendor_model_subscription_delete_server_callback &rArr; jmesh_model_subscription_list_remove &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
</UL>

<P><STRONG><a name="[55]"></a>config_vendor_model_subscription_get_handler</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, config_server.o(i.config_vendor_model_subscription_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = config_vendor_model_subscription_get_handler &rArr; jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_get_server_callback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_server.o(.constdata)
</UL>
<P><STRONG><a name="[32e]"></a>config_vendor_model_subscription_get_server_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, config_server_callback.o(i.config_vendor_model_subscription_get_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = config_vendor_model_subscription_get_server_callback &rArr; jmesh_model_subscription_list &rArr; jmesh_subscription_list
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_get_handler
</UL>

<P><STRONG><a name="[32f]"></a>config_vendor_model_subscription_list_callback</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, config_client_callback.o(i.config_vendor_model_subscription_list_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = config_vendor_model_subscription_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_list_handler
</UL>

<P><STRONG><a name="[29]"></a>config_vendor_model_subscription_list_handler</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, config_client.o(i.config_vendor_model_subscription_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = config_vendor_model_subscription_list_handler &rArr; config_vendor_model_subscription_list_callback &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_list_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_client.o(.constdata)
</UL>
<P><STRONG><a name="[30f]"></a>config_vendor_model_subscription_overwrite_server_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, config_server_callback.o(i.config_vendor_model_subscription_overwrite_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = config_vendor_model_subscription_overwrite_server_callback &rArr; jmesh_model_subscription_list_overwrite &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_overwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
</UL>

<P><STRONG><a name="[312]"></a>config_vendor_model_subscription_virtual_address_add_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_vendor_model_subscription_virtual_address_add_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_add_handler
</UL>

<P><STRONG><a name="[314]"></a>config_vendor_model_subscription_virtual_address_delete_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_vendor_model_subscription_virtual_address_delete_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_delete_handler
</UL>

<P><STRONG><a name="[316]"></a>config_vendor_model_subscription_virtual_address_overwrite_server_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_server_callback.o(i.config_vendor_model_subscription_virtual_address_overwrite_server_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_overwrite_handler
</UL>

<P><STRONG><a name="[330]"></a>configuration_cmd_process</STRONG> (Thumb, 258 bytes, Stack size 96 bytes, configuration_cmd.o(i.configuration_cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = configuration_cmd_process &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_cmd_recv_handler
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
</UL>

<P><STRONG><a name="[331]"></a>crystal_frequency_tune</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, si4438_fifo.o(i.crystal_frequency_tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = crystal_frequency_tune &rArr; si446x_set_property &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_set_property
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
</UL>

<P><STRONG><a name="[332]"></a>decrypt_provision_data</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, jmesh_provisioning.o(i.decrypt_provision_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = decrypt_provision_data &rArr; security_aes_ccm_decrypt2 &rArr; aes_cbc_mac &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_aes_ccm_decrypt2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
</UL>

<P><STRONG><a name="[219]"></a>delay_ms</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, jmesh_app_pro.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF02_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B105_handler
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
</UL>

<P><STRONG><a name="[334]"></a>do_authentication_action</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, jmesh_provisioning.o(i.do_authentication_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = do_authentication_action &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_publickey
</UL>

<P><STRONG><a name="[337]"></a>gRadio_CheckReceived</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, si4438_fifo.o(i.gRadio_CheckReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gRadio_CheckReceived &rArr; vRadio_StartRX &rArr; si446x_start_rx &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_request_device_state
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_read_rx_fifo
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_packet_info
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_frr_a_read
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartRX
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_set_property
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_change_state
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_rx_pkt
</UL>

<P><STRONG><a name="[25d]"></a>gRadio_CheckTransmitted</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, si4438_fifo.o(i.gRadio_CheckTransmitted))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gRadio_CheckTransmitted &rArr; si446x_get_int_status &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_write_tx_fifo
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FIFO_TX
</UL>

<P><STRONG><a name="[34b]"></a>get_meter_addr_callback</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, jmesh_app_pro.o(i.get_meter_addr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = get_meter_addr_callback &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_get
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pick
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_set
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
</UL>

<P><STRONG><a name="[c]"></a>get_meter_addr_repeat_timer_handler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, jmesh_app_pro.o(i.get_meter_addr_repeat_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = get_meter_addr_repeat_timer_handler &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_get
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_task_start
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jmesh_app_pro.o(i.get_meter_addr_repeat_timer_handler)
<LI> jmesh_app_pro.o(i.get_meter_addr_task_start)
</UL>
<P><STRONG><a name="[247]"></a>get_meter_addr_task_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.get_meter_addr_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = get_meter_addr_task_start &rArr; get_meter_addr_repeat_timer_handler &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_repeat_timer_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[22d]"></a>get_new_mx188_seq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, protocol_mx188.o(i.get_new_mx188_seq))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B406_handler
</UL>

<P><STRONG><a name="[405]"></a>jmesh_TTL_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmesh_ttl.o(i.jmesh_TTL_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_access_send
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_ack
</UL>

<P><STRONG><a name="[34c]"></a>jmesh_TTL_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jmesh_ttl.o(i.jmesh_TTL_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = jmesh_TTL_init &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[34d]"></a>jmesh_TTL_set_default</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jmesh_ttl.o(i.jmesh_TTL_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_TTL_set_default &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[352]"></a>jmesh_access_add_element</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, jmesh_access.o(i.jmesh_access_add_element))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_element_callback
</UL>

<P><STRONG><a name="[34e]"></a>jmesh_access_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jmesh_access.o(i.jmesh_access_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = jmesh_access_init &rArr; jmesh_access_init_model_callback &rArr; app_expand_model_init &rArr; jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_model_callback
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init_element_callback
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_load_para
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[34f]"></a>jmesh_access_init_element_callback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, jmesh_access_callback.o(i.jmesh_access_init_element_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_access_init_element_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_add_element
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init
</UL>

<P><STRONG><a name="[350]"></a>jmesh_access_init_model_callback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jmesh_access_callback.o(i.jmesh_access_init_model_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = jmesh_access_init_model_callback &rArr; app_expand_model_init &rArr; jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand_model_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_client_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_client_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_server_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_client_init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init
</UL>

<P><STRONG><a name="[351]"></a>jmesh_access_load_para</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, jmesh_access.o(i.jmesh_access_load_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = jmesh_access_load_para &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_add_filter_addr
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_add_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init
</UL>

<P><STRONG><a name="[b8]"></a>jmesh_access_recv</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, jmesh_access.o(i.jmesh_access_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = jmesh_access_recv &rArr; jmesh_pdu_free &rArr; os_memb_free &rArr; jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_is_bind
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_addr_check
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[22f]"></a>jmesh_access_send</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, jmesh_access.o(i.jmesh_access_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_is_bind
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_addr_by_element
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_index
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_send
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_get_meter_addr_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_meter_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_cmd_res_timeout_handler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_client_cmd_send
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_stop_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_start_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_result_init_handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_result_handler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_read_handler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_stop
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_start
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_result_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_get_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_uart_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B406_handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_overtime_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_app_broadcast_data
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_repeat_timer_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>

<P><STRONG><a name="[3e6]"></a>jmesh_addr_get_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, jmesh_addr.o(i.jmesh_addr_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_set_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_set_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_handler
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_ack
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_send
</UL>

<P><STRONG><a name="[364]"></a>jmesh_addr_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jmesh_addr.o(i.jmesh_addr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = jmesh_addr_init &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[365]"></a>jmesh_adv_recv</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, jmesh_adv.o(i.jmesh_adv_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = jmesh_adv_recv &rArr; jmesh_beacon_handler &rArr; jmesh_routing_beacon_handler &rArr; friend_poll_handler &rArr; jmesh_routing_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_cipher_cache
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_recv
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_recv_adv_callback
</UL>

<P><STRONG><a name="[369]"></a>jmesh_adv_send_beacon</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jmesh_adv.o(i.jmesh_adv_send_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = jmesh_adv_send_beacon &rArr; jmesh_adv_send &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
</UL>

<P><STRONG><a name="[36a]"></a>jmesh_adv_send_message</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, jmesh_adv.o(i.jmesh_adv_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = jmesh_adv_send_message &rArr; jmesh_adv_send &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_adv_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_send_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_send
</UL>

<P><STRONG><a name="[36b]"></a>jmesh_adv_send_message2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_adv.o(i.jmesh_adv_send_message2))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = jmesh_adv_send_message2 &rArr; jmesh_adv_send &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_queue_send
</UL>

<P><STRONG><a name="[c4]"></a>jmesh_app_data_recv_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_protocol.o(i.jmesh_app_data_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = jmesh_app_data_recv_handler &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[23b]"></a>jmesh_app_get_phone</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmesh_gatt.o(i.jmesh_app_get_phone))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JMESH_DEBUG_SEND_TO_CKQ
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>

<P><STRONG><a name="[36c]"></a>jmesh_app_recv_handler</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, app_protocol.o(i.jmesh_app_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = jmesh_app_recv_handler &rArr; jmesh_proxy_recv &rArr; jmesh_interface_recv &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_get_local_svc_ins
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_recv
</UL>

<P><STRONG><a name="[20e]"></a>jmesh_appkey_delete</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jmesh_appkey.o(i.jmesh_appkey_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_appkey_delete &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_delete_server_callback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B102_handler
</UL>

<P><STRONG><a name="[370]"></a>jmesh_appkey_get_by_aid</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jmesh_appkey.o(i.jmesh_appkey_get_by_aid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_appkey_get_by_aid
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
</UL>

<P><STRONG><a name="[211]"></a>jmesh_appkey_get_by_key_index</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, jmesh_appkey.o(i.jmesh_appkey_get_by_key_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jmesh_appkey_get_by_key_index
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_bind_list
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_unbind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_para
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B102_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[378]"></a>jmesh_appkey_get_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jmesh_appkey.o(i.jmesh_appkey_get_index))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_unbind_app
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_is_bind
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_bind_app
</UL>

<P><STRONG><a name="[371]"></a>jmesh_appkey_init</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, jmesh_appkey.o(i.jmesh_appkey_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = jmesh_appkey_init &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[28e]"></a>jmesh_appkey_list</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, jmesh_appkey.o(i.jmesh_appkey_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jmesh_appkey_list
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_get_server_callback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_para
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_appkey
</UL>

<P><STRONG><a name="[210]"></a>jmesh_appkey_set</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, jmesh_appkey.o(i.jmesh_appkey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = jmesh_appkey_set &rArr; jmesh_security_cal_aid &rArr; security_k4_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_aid
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_server_callback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_appkey
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B102_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[2e9]"></a>jmesh_appkey_update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, jmesh_appkey.o(i.jmesh_appkey_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = jmesh_appkey_update &rArr; jmesh_security_cal_aid &rArr; security_k4_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_aid
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_update_server_callback
</UL>

<P><STRONG><a name="[368]"></a>jmesh_beacon_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, jmesh_beacon.o(i.jmesh_beacon_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = jmesh_beacon_handler &rArr; jmesh_routing_beacon_handler &rArr; friend_poll_handler &rArr; jmesh_routing_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_beacon_handler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_rev_beacon_timer_start
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_rev_beacon_timer_is_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_recv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_recv_handler
</UL>

<P><STRONG><a name="[377]"></a>jmesh_bind_app</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jmesh_bind.o(i.jmesh_bind_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_bind_app
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_app
</UL>

<P><STRONG><a name="[3b6]"></a>jmesh_bind_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jmesh_bind.o(i.jmesh_bind_init))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_init
</UL>

<P><STRONG><a name="[379]"></a>jmesh_bind_list</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, jmesh_bind.o(i.jmesh_bind_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = jmesh_bind_list &rArr; jmesh_appkey_get_by_key_index
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_list
</UL>

<P><STRONG><a name="[2f3]"></a>jmesh_composition_page_data_get</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, jmesh_state.o(i.jmesh_composition_page_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = jmesh_composition_page_data_get &rArr; jmesh_list_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_list_model_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_composition_get_server_handler
</UL>

<P><STRONG><a name="[c3]"></a>jmesh_config_cmd_recv_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, configuration_cmd.o(i.jmesh_config_cmd_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = jmesh_config_cmd_recv_handler &rArr; configuration_cmd_process &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_cmd_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>jmesh_config_recv</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, jmesh_access.o(i.jmesh_config_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = jmesh_config_recv &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[2e3]"></a>jmesh_config_send</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, jmesh_access.o(i.jmesh_config_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = jmesh_config_send &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_addr_by_element
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_get_devkey
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_index
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_get_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_get_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_get_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_get_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_relay_set_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_relay_get_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_set_handler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_get_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_network_transmit_set_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_network_transmit_get_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_update_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_get_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_delete_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_add_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_overwrite_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_delete_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_add_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_virtual_address_set_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_set_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_get_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_unbind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_set_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_get_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_set_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_get_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_friend_set_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_friend_get_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default_ttl_set_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_default_ttl_get_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_composition_data_get_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_set_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_get_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_update_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_get_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_delete_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_handler
</UL>

<P><STRONG><a name="[37c]"></a>jmesh_control_recv</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, jmesh_control.o(i.jmesh_control_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = jmesh_control_recv &rArr; jmesh_lower_segment_recv_ack &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_segment_recv_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
</UL>

<P><STRONG><a name="[37e]"></a>jmesh_control_send</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, jmesh_control.o(i.jmesh_control_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_update
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_subscription_list_confirm
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_offer
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_exchange
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_heartbeat
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_find_proxy_recv
</UL>

<P><STRONG><a name="[374]"></a>jmesh_device_beacon_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jmesh_device_beacon.o(i.jmesh_device_beacon_handler))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
</UL>

<P><STRONG><a name="[340]"></a>jmesh_device_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, jmesh_device.o(i.jmesh_device_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = jmesh_device_clear &rArr; jmesh_save_delete &rArr; nvds_del &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
</UL>

<P><STRONG><a name="[37b]"></a>jmesh_device_get_devkey</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, jmesh_device.o(i.jmesh_device_get_devkey))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
</UL>

<P><STRONG><a name="[380]"></a>jmesh_device_init</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, jmesh_device.o(i.jmesh_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = jmesh_device_init &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[341]"></a>jmesh_device_new</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, jmesh_device.o(i.jmesh_device_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = jmesh_device_new &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
</UL>

<P><STRONG><a name="[2f0]"></a>jmesh_element_add_model</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jmesh_element.o(i.jmesh_element_add_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = jmesh_element_add_model &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_expand_model_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_client_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_server_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_client_init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_init
</UL>

<P><STRONG><a name="[27e]"></a>jmesh_element_get_by_index</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, jmesh_access.o(i.jmesh_element_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_get_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_get_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_get_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_get_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_add_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_unbind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_subscribe
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_bind
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_composition_page_data_get
</UL>

<P><STRONG><a name="[361]"></a>jmesh_element_get_index</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, jmesh_access.o(i.jmesh_element_get_index))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>

<P><STRONG><a name="[5a9]"></a>jmesh_element_get_num</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jmesh_access.o(i.jmesh_element_get_num))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
</UL>

<P><STRONG><a name="[381]"></a>jmesh_features_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, jmesh_features.o(i.jmesh_features_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = jmesh_features_init &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[3a6]"></a>jmesh_filter_add_addr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jmesh_filter.o(i.jmesh_filter_add_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_filter_add_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_add_filter_addr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
</UL>

<P><STRONG><a name="[3a8]"></a>jmesh_filter_filtering</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, jmesh_filter.o(i.jmesh_filter_filtering))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_filter_filtering
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_pdu_cache
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_filtering
</UL>

<P><STRONG><a name="[3a9]"></a>jmesh_filter_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jmesh_filter.o(i.jmesh_filter_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_init
</UL>

<P><STRONG><a name="[579]"></a>jmesh_filter_remove_addr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, jmesh_filter.o(i.jmesh_filter_remove_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_filter_remove_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
</UL>

<P><STRONG><a name="[3aa]"></a>jmesh_filter_set_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jmesh_filter.o(i.jmesh_filter_set_type))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_init
</UL>

<P><STRONG><a name="[382]"></a>jmesh_gatt_adv_send</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, jmesh_route.o(i.jmesh_gatt_adv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = jmesh_gatt_adv_send &rArr; jmesh_route_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_message
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[384]"></a>jmesh_gatt_connected</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, jmesh_gatt.o(i.jmesh_gatt_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = jmesh_gatt_connected &rArr; jmesh_gatt_multilink_disconnect_old &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_get_by_mac
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_flush
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_update
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_node_route_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_get_local_svc_ins
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnect
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_exchange_mtu
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_record_add
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_intv_pos
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_multilink_disconnect_old
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connected_callback
</UL>

<P><STRONG><a name="[38f]"></a>jmesh_gatt_disconnect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_gatt_disconnect &rArr; jmesh_ble_gatt_disconnect &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnect_all
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_sleep
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_update_timeout_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update_timeout_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll_timeout_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_free
</UL>

<P><STRONG><a name="[2b4]"></a>jmesh_gatt_disconnect_all</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, jmesh_gatt.o(i.jmesh_gatt_disconnect_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = jmesh_gatt_disconnect_all &rArr; jmesh_gatt_disconnect &rArr; jmesh_ble_gatt_disconnect &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
</UL>

<P><STRONG><a name="[390]"></a>jmesh_gatt_disconnected</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, jmesh_gatt.o(i.jmesh_gatt_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = jmesh_gatt_disconnected &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_clear_id
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_node_route_update
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_record_add
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnected_callback
</UL>

<P><STRONG><a name="[393]"></a>jmesh_gatt_features_update</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_features_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_gatt_features_update &rArr; jmesh_gatt_get_link_by_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_update
</UL>

<P><STRONG><a name="[395]"></a>jmesh_gatt_get_intv_mask</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_gatt.o(i.jmesh_gatt_get_intv_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_gatt_get_intv_mask &rArr; jmesh_gatt_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_null_intv
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_fill_beacon
</UL>

<P><STRONG><a name="[385]"></a>jmesh_gatt_get_intv_pos</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, jmesh_gatt.o(i.jmesh_gatt_get_intv_pos))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
</UL>

<P><STRONG><a name="[3f6]"></a>jmesh_gatt_get_link_by_addr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_get_link_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_gatt_get_link_by_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_sleep
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_send
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_update_timeout_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update_timeout_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll_timeout_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_free
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_send
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_find_recv
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_update
</UL>

<P><STRONG><a name="[391]"></a>jmesh_gatt_get_link_by_id</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_get_link_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_gatt_get_link_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_trigger_send
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_set_svc_instance
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_set_mtu
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_mtu_get_by_id
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnected
</UL>

<P><STRONG><a name="[291]"></a>jmesh_gatt_get_link_by_interface</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, jmesh_gatt.o(i.jmesh_gatt_get_link_by_interface))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_connected
</UL>

<P><STRONG><a name="[394]"></a>jmesh_gatt_get_link_by_mac</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jmesh_gatt.o(i.jmesh_gatt_get_link_by_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_gatt_get_link_by_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_link_require
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_features_update
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
</UL>

<P><STRONG><a name="[397]"></a>jmesh_gatt_get_null_intv</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jmesh_gatt.o(i.jmesh_gatt_get_null_intv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jmesh_gatt_get_null_intv &rArr; jmesh_gatt_get_intv_mask &rArr; jmesh_gatt_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_get_by_mac
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_intv_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connect
</UL>

<P><STRONG><a name="[39b]"></a>jmesh_gatt_get_phone</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jmesh_gatt.o(i.jmesh_gatt_get_phone))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_trigger_send
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_recv
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_phone_set_mtu
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_mtu_get_by_id
</UL>

<P><STRONG><a name="[408]"></a>jmesh_gatt_get_ready_by_addr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_get_ready_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_gatt_get_ready_by_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_control_recv_handler
</UL>

<P><STRONG><a name="[3fd]"></a>jmesh_gatt_get_ready_by_interface</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, jmesh_gatt.o(i.jmesh_gatt_get_ready_by_interface))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_broadcast_all
</UL>

<P><STRONG><a name="[2b5]"></a>jmesh_gatt_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = jmesh_gatt_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_record_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[399]"></a>jmesh_gatt_is_mesh_device</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_is_mesh_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_gatt_is_mesh_device &rArr; jmesh_routing_neighbor_get_by_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_get_by_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connected_callback
</UL>

<P><STRONG><a name="[396]"></a>jmesh_gatt_link_next</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_gatt_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_intv_mask
</UL>

<P><STRONG><a name="[39a]"></a>jmesh_gatt_mtu_get_by_id</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_mtu_get_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_gatt_mtu_get_by_id &rArr; jmesh_gatt_get_link_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_phone
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
</UL>

<P><STRONG><a name="[3f9]"></a>jmesh_gatt_non_lowp_link_num</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_non_lowp_link_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_gatt_non_lowp_link_num
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_link_require
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
</UL>

<P><STRONG><a name="[39c]"></a>jmesh_gatt_phone_connected</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, jmesh_gatt.o(i.jmesh_gatt_phone_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = jmesh_gatt_phone_connected &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connected_callback
</UL>

<P><STRONG><a name="[39d]"></a>jmesh_gatt_phone_disconnected</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, jmesh_gatt.o(i.jmesh_gatt_phone_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = jmesh_gatt_phone_disconnected &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnected_callback
</UL>

<P><STRONG><a name="[39e]"></a>jmesh_gatt_phone_set_mtu</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, jmesh_gatt.o(i.jmesh_gatt_phone_set_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = jmesh_gatt_phone_set_mtu
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_phone
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_exchange_mtu_callback
</UL>

<P><STRONG><a name="[290]"></a>jmesh_gatt_rd_table_print</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, jmesh_gatt.o(i.jmesh_gatt_rd_table_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = jmesh_gatt_rd_table_print &rArr; _print_cmd &rArr; jmesh_uart_send_no_take_semphr &rArr; app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_con_rd
</UL>

<P><STRONG><a name="[38b]"></a>jmesh_gatt_record_add</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jmesh_gatt.o(i.jmesh_gatt_record_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_gatt_record_add
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnected
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
</UL>

<P><STRONG><a name="[398]"></a>jmesh_gatt_record_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_record_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_gatt_record_init
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_init
</UL>

<P><STRONG><a name="[39f]"></a>jmesh_gatt_recv</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, jmesh_gatt.o(i.jmesh_gatt_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = jmesh_gatt_recv &rArr; jmesh_app_recv_handler &rArr; jmesh_proxy_recv &rArr; jmesh_interface_recv &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_cipher_cache
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_get_local_svc_ins
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_recv_handler
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_phone
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_writed_callback
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_notified_callback
</UL>

<P><STRONG><a name="[3a0]"></a>jmesh_gatt_set_mtu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_set_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = jmesh_gatt_set_mtu &rArr; jmesh_lowpower_connected &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_connected
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_exchange_mtu_callback
</UL>

<P><STRONG><a name="[3a2]"></a>jmesh_gatt_set_svc_instance</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jmesh_gatt.o(i.jmesh_gatt_set_svc_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_gatt_set_svc_instance &rArr; jmesh_gatt_get_link_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_disc_svc_callback
</UL>

<P><STRONG><a name="[3fb]"></a>jmesh_gatt_total_link_num</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, jmesh_gatt.o(i.jmesh_gatt_total_link_num))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_link_require
</UL>

<P><STRONG><a name="[3a3]"></a>jmesh_gatt_trigger_send</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, jmesh_gatt.o(i.jmesh_gatt_trigger_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + In Cycle
<LI>Call Chain = jmesh_gatt_trigger_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_notify
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_phone
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_queue_send
</UL>

<P><STRONG><a name="[362]"></a>jmesh_get_addr_by_element</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, jmesh_addr.o(i.jmesh_get_addr_by_element))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
</UL>

<P><STRONG><a name="[3f7]"></a>jmesh_get_element_num</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmesh_addr.o(i.jmesh_get_element_num))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_find_recv
</UL>

<P><STRONG><a name="[3f2]"></a>jmesh_get_features</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmesh_features.o(i.jmesh_get_features))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_fill_beacon
</UL>

<P><STRONG><a name="[295]"></a>jmesh_get_friend_feature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jmesh_features.o(i.jmesh_get_friend_feature))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_addr_check
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_feature
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_link_require
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
</UL>

<P><STRONG><a name="[296]"></a>jmesh_get_lowpower_feature</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jmesh_features.o(i.jmesh_get_lowpower_feature))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_start
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_feature
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_connected
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_message2
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_message
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_link_timer_handler
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_connect_start
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_is_enable
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_exchange
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_beacon_send
</UL>

<P><STRONG><a name="[222]"></a>jmesh_get_primary_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmesh_addr.o(i.jmesh_get_primary_addr))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_set_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_mode_handler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_server_bit_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_recv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_recv
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_load_para
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_get_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_get_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_get_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_get_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_add_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_unbind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_handler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_para
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_addr
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_poll_handler
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_update
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_subscription_list_confirm
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_offer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_failed
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B201_handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_exchange
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_heartbeat
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_find_proxy_recv
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_fill_beacon
</UL>

<P><STRONG><a name="[294]"></a>jmesh_get_proxy_feature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jmesh_features.o(i.jmesh_get_proxy_feature))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_addr_check
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_feature
</UL>

<P><STRONG><a name="[293]"></a>jmesh_get_relay_feature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jmesh_features.o(i.jmesh_get_relay_feature))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_addr_check
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_feature
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
</UL>

<P><STRONG><a name="[29d]"></a>jmesh_get_timer_list</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_timer_event.o(i.jmesh_get_timer_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = jmesh_get_timer_list &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_timer
</UL>

<P><STRONG><a name="[35a]"></a>jmesh_interface_add_filter_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jmesh_interface.o(i.jmesh_interface_add_filter_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_interface_add_filter_addr &rArr; jmesh_filter_add_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_filter_add_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_load_para
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_add_filter
</UL>

<P><STRONG><a name="[3a7]"></a>jmesh_interface_filtering</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jmesh_interface.o(i.jmesh_interface_filtering))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_interface_filtering &rArr; jmesh_filter_filtering
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_filter_filtering
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[5aa]"></a>jmesh_interface_get_filter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jmesh_interface.o(i.jmesh_interface_get_filter))
<BR><BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update
</UL>

<P><STRONG><a name="[2b0]"></a>jmesh_interface_init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, jmesh_interface.o(i.jmesh_interface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_interface_init &rArr; jmesh_filter_add_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_relay_feature
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_proxy_feature
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_friend_feature
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_filter_add_addr
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_filter_set_type
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_primary_addr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[367]"></a>jmesh_interface_recv</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jmesh_interface.o(i.jmesh_interface_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = jmesh_interface_recv &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_recv
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
</UL>

<P><STRONG><a name="[bc]"></a>jmesh_interface_recv_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_interface.o(i.jmesh_interface_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = jmesh_interface_recv_handler &rArr; jmesh_network_recv &rArr; jmesh_lower_recv &rArr; jmesh_resegment_recv &rArr; lower_segment_send_deny_ack &rArr; lower_segment_send_ack &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>jmesh_interface_send_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, jmesh_interface.o(i.jmesh_interface_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = jmesh_interface_send_handler &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[3ac]"></a>jmesh_is_bind</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, jmesh_bind.o(i.jmesh_is_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_is_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_is_bind
</UL>

<P><STRONG><a name="[3d2]"></a>jmesh_is_my_addr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, jmesh_addr.o(i.jmesh_is_my_addr))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
</UL>

<P><STRONG><a name="[37a]"></a>jmesh_list_model_id</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, jmesh_element.o(i.jmesh_list_model_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jmesh_list_model_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_composition_page_data_get
</UL>

<P><STRONG><a name="[3ad]"></a>jmesh_lower_recv</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jmesh_lower.o(i.jmesh_lower_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = jmesh_lower_recv &rArr; jmesh_resegment_recv &rArr; lower_segment_send_deny_ack &rArr; lower_segment_send_ack &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[37d]"></a>jmesh_lower_segment_recv_ack</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, jmesh_segment.o(i.jmesh_lower_segment_recv_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = jmesh_lower_segment_recv_ack &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_find
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_recv
</UL>

<P><STRONG><a name="[3b1]"></a>jmesh_lower_send</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jmesh_lower.o(i.jmesh_lower_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = jmesh_lower_send &rArr; jmesh_segment_send &rArr; lower_segment_transmit &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_segment_send
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_access_send
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_control_send_handler
</UL>

<P><STRONG><a name="[57a]"></a>jmesh_lowpower_node_route_delete</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, jmesh_route.o(i.jmesh_lowpower_node_route_delete))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_free
</UL>

<P><STRONG><a name="[387]"></a>jmesh_lowpower_node_route_update</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, jmesh_route.o(i.jmesh_lowpower_node_route_update))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnected
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
</UL>

<P><STRONG><a name="[215]"></a>jmesh_mac_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jmesh_state.o(i.jmesh_mac_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_mac_get
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_report
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_para
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_mac
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_callback
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B201_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B104_handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_repeat_timer_handler
</UL>

<P><STRONG><a name="[3b4]"></a>jmesh_mac_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jmesh_state.o(i.jmesh_mac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = jmesh_mac_init &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[216]"></a>jmesh_mac_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jmesh_state.o(i.jmesh_mac_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_mac_set &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_mac
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_callback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B104_handler
</UL>

<P><STRONG><a name="[35d]"></a>jmesh_model_addr_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, jmesh_model.o(i.jmesh_model_addr_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_model_addr_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_is_in
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_relay_feature
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_proxy_feature
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_friend_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_recv
</UL>

<P><STRONG><a name="[212]"></a>jmesh_model_bind_app</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_model.o(i.jmesh_model_bind_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_model_bind_app &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_bind_app
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_bind_server_callback
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_bind_server_callback
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B102_handler
</UL>

<P><STRONG><a name="[35b]"></a>jmesh_model_bind_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_model.o(i.jmesh_model_bind_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_model_bind_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_bind_init
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_load_para
</UL>

<P><STRONG><a name="[28f]"></a>jmesh_model_bind_list</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_model.o(i.jmesh_model_bind_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = jmesh_model_bind_list &rArr; jmesh_bind_list &rArr; jmesh_appkey_get_by_key_index
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_bind_list
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_get_server_callback
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_get_server_callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_bind
</UL>

<P><STRONG><a name="[281]"></a>jmesh_model_get_by_sig_id</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, jmesh_model.o(i.jmesh_model_get_by_sig_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jmesh_model_get_by_sig_id &rArr; jmesh_model_get_by_vendor_id
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_get_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_get_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_add_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_unbind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_subscribe
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_bind
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
</UL>

<P><STRONG><a name="[280]"></a>jmesh_model_get_by_vendor_id</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jmesh_model.o(i.jmesh_model_get_by_vendor_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_model_get_by_vendor_id
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_get_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_get_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_virtual_address_add_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_unbind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_subscribe
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_bind
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
</UL>

<P><STRONG><a name="[35e]"></a>jmesh_model_is_bind</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_model.o(i.jmesh_model_is_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_model_is_bind &rArr; jmesh_is_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_is_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_recv
</UL>

<P><STRONG><a name="[29c]"></a>jmesh_model_subscription_list</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_model.o(i.jmesh_model_subscription_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_model_subscription_list &rArr; jmesh_subscription_list
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_get_server_callback
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_get_server_callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_subscribe
</UL>

<P><STRONG><a name="[282]"></a>jmesh_model_subscription_list_add</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_model.o(i.jmesh_model_subscription_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_model_subscription_list_add &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_add_server_callback
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_add_server_callback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
</UL>

<P><STRONG><a name="[329]"></a>jmesh_model_subscription_list_delete_all</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_model.o(i.jmesh_model_subscription_list_delete_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_model_subscription_list_delete_all &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_delete_all
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_delete_all_server_callback
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_delete_all_server_callback
</UL>

<P><STRONG><a name="[35c]"></a>jmesh_model_subscription_list_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_model.o(i.jmesh_model_subscription_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_model_subscription_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_load_para
</UL>

<P><STRONG><a name="[32c]"></a>jmesh_model_subscription_list_overwrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_model.o(i.jmesh_model_subscription_list_overwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_model_subscription_list_overwrite &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_overwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_overwrite_server_callback
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_overwrite_server_callback
</UL>

<P><STRONG><a name="[284]"></a>jmesh_model_subscription_list_remove</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_model.o(i.jmesh_model_subscription_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_model_subscription_list_remove &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_subscription_delete_server_callback
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_subscription_delete_server_callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
</UL>

<P><STRONG><a name="[2c7]"></a>jmesh_model_unbind_app</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_model.o(i.jmesh_model_unbind_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_model_unbind_app &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_unbind_app
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vendor_model_app_unbind_server_callback
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_model_app_unbind_server_callback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
</UL>

<P><STRONG><a name="[3eb]"></a>jmesh_net_ticks_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_time.o(i.jmesh_net_ticks_get))
<BR><BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_mode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_mode_timer_handler
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_fill_beacon
</UL>

<P><STRONG><a name="[3ec]"></a>jmesh_net_ticks_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_time.o(i.jmesh_net_ticks_set))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
</UL>

<P><STRONG><a name="[3bf]"></a>jmesh_netkey_get_by_index</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, jmesh_netkey.o(i.jmesh_netkey_get_by_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_netkey_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_stop_update_iv_index
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_start_update_iv_index
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_set_iv_index
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_recover_iv_index
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_update_flag
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_stop_update_iv_index
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_start_update_iv_index
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
</UL>

<P><STRONG><a name="[3be]"></a>jmesh_netkey_get_by_nid</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jmesh_netkey.o(i.jmesh_netkey_get_by_nid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_netkey_get_by_nid
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
</UL>

<P><STRONG><a name="[297]"></a>jmesh_netkey_get_iv_index</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, jmesh_netkey.o(i.jmesh_netkey_get_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jmesh_netkey_get_iv_index &rArr; jmesh_netkey_get_by_index
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_iv_index
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_access_send
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_update
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_ack
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
</UL>

<P><STRONG><a name="[3c0]"></a>jmesh_netkey_get_iv_update_flag</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, jmesh_netkey.o(i.jmesh_netkey_get_iv_update_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jmesh_netkey_get_iv_update_flag &rArr; jmesh_netkey_get_by_index
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_access_send
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_update
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
</UL>

<P><STRONG><a name="[3c1]"></a>jmesh_netkey_init</STRONG> (Thumb, 72 bytes, Stack size 208 bytes, jmesh_netkey.o(i.jmesh_netkey_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = jmesh_netkey_init &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_load
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[3c7]"></a>jmesh_netkey_recover_iv_index</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, jmesh_netkey.o(i.jmesh_netkey_recover_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_netkey_recover_iv_index &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
</UL>

<P><STRONG><a name="[3c8]"></a>jmesh_netkey_start_update_iv_index</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, jmesh_netkey.o(i.jmesh_netkey_start_update_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_netkey_start_update_iv_index &rArr; jmesh_seq_set_local &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_set_local
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
</UL>

<P><STRONG><a name="[20d]"></a>jmesh_netkey_state_del</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jmesh_netkey.o(i.jmesh_netkey_state_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = jmesh_netkey_state_del &rArr; jmesh_save_delete &rArr; nvds_del &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_delete_server_callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_netkey
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B102_handler
</UL>

<P><STRONG><a name="[299]"></a>jmesh_netkey_state_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jmesh_netkey.o(i.jmesh_netkey_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_netkey_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_para
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_netkey
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[31b]"></a>jmesh_netkey_state_list</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, jmesh_netkey.o(i.jmesh_netkey_state_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jmesh_netkey_state_list
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_get_server_callback
</UL>

<P><STRONG><a name="[20f]"></a>jmesh_netkey_state_set</STRONG> (Thumb, 272 bytes, Stack size 224 bytes, jmesh_netkey.o(i.jmesh_netkey_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_load
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_add_server_callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_netkey
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B102_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[31f]"></a>jmesh_netkey_state_update</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, jmesh_netkey.o(i.jmesh_netkey_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = jmesh_netkey_state_update &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_load
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_netkey_update_server_callback
</UL>

<P><STRONG><a name="[3ca]"></a>jmesh_netkey_stop_update_iv_index</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jmesh_netkey.o(i.jmesh_netkey_stop_update_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_netkey_stop_update_iv_index &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
</UL>

<P><STRONG><a name="[2bb]"></a>jmesh_netkey_test_set_iv_index</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jmesh_netkey.o(i.jmesh_netkey_test_set_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jmesh_netkey_test_set_iv_index &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_iv_index
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
</UL>

<P><STRONG><a name="[2c8]"></a>jmesh_netkey_test_start_update_iv_index</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jmesh_netkey.o(i.jmesh_netkey_test_start_update_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_netkey_test_start_update_iv_index &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_update_iv_index
</UL>

<P><STRONG><a name="[2c9]"></a>jmesh_netkey_test_stop_update_iv_index</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, jmesh_netkey.o(i.jmesh_netkey_test_stop_update_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_netkey_test_stop_update_iv_index &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_update_iv_index
</UL>

<P><STRONG><a name="[342]"></a>jmesh_network_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, jmesh_network.o(i.jmesh_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_network_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[3ab]"></a>jmesh_network_recv</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, jmesh_network.o(i.jmesh_network_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = jmesh_network_recv &rArr; jmesh_lower_recv &rArr; jmesh_resegment_recv &rArr; lower_segment_send_deny_ack &rArr; lower_segment_send_ack &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_relay_feature
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_friend_feature
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_encrypt
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_decrypt
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_generate_nonce
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_pdu_cache
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_set
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_is_valid
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_is_my_addr
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_adv_send
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_plain_cache
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_obfuscation
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_nid
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_filtering
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_recv_handler
</UL>

<P><STRONG><a name="[3b3]"></a>jmesh_network_send</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, jmesh_network.o(i.jmesh_network_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + In Cycle
<LI>Call Chain = jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_friend_feature
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_get
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_encrypt
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_generate_nonce
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_cache_push
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_update_flag
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_pdu_cache
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_add
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_adv_send
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_plain_cache
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_obfuscation
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_filtering
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_send
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_transmit
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_ack
</UL>

<P><STRONG><a name="[9]"></a>jmesh_ota_adv_schedule</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, configuration_cmd.o(i.jmesh_ota_adv_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = jmesh_ota_adv_schedule &rArr; jmesh_adv_send &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_start
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> configuration_cmd.o(i.at_cmd_start_ota)
<LI> configuration_cmd.o(i.jmesh_ota_adv_schedule)
</UL>
<P><STRONG><a name="[35f]"></a>jmesh_pdu_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, jmesh_pdu.o(i.jmesh_pdu_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_pdu_free &rArr; os_memb_free &rArr; jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_recv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_recv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_cmd_recv_handler
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_access_send
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_send
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_cache_push
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_cache_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_cache_push
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_send
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_segment_recv_ack
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_control_recv_handler
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_recv
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_recv
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_free
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_segment_send
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_recv_handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_provision_send_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_provision_recv_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_recv_handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_data_recv_handler
</UL>

<P><STRONG><a name="[3d9]"></a>jmesh_pdu_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, jmesh_pdu.o(i.jmesh_pdu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = jmesh_pdu_init &rArr; os_memb_init &rArr; jmesh_mutex_new &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[2a4]"></a>jmesh_pdu_log</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_pdu.o(i.jmesh_pdu_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = jmesh_pdu_log &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_pdu_log
</UL>

<P><STRONG><a name="[360]"></a>jmesh_pdu_new</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, jmesh_pdu.o(i.jmesh_pdu_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = jmesh_pdu_new &rArr; os_memb_new &rArr; jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_new
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_recv
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_transmit
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_ack
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_provision_recv_handler
</UL>

<P><STRONG><a name="[be]"></a>jmesh_provision_recv_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, jmesh_provisioning_server.o(i.jmesh_provision_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = jmesh_provision_recv_handler &rArr; prov_check_progress &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_check_progress
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>jmesh_provision_send_handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, jmesh_provisioning_server.o(i.jmesh_provision_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = jmesh_provision_send_handler &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[36e]"></a>jmesh_proxy_recv</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, jmesh_proxy.o(i.jmesh_proxy_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = jmesh_proxy_recv &rArr; jmesh_interface_recv &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_recv
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_get_local_svc_ins
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_recv_handler
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_recv
</UL>

<P><STRONG><a name="[23c]"></a>jmesh_proxy_send</STRONG> (Thumb, 320 bytes, Stack size 296 bytes, jmesh_proxy.o(i.jmesh_proxy_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adapter_gatt_send
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_get_local_svc_ins
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_mtu_get_by_id
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JMESH_DEBUG_SEND_TO_CKQ
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_send
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_send_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_provision_send_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_send
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_broadcast_all
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>

<P><STRONG><a name="[3ae]"></a>jmesh_resegment_recv</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, jmesh_segment.o(i.jmesh_resegment_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = jmesh_resegment_recv &rArr; lower_segment_send_deny_ack &rArr; lower_segment_send_ack &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_new
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_free
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_find
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_deny_ack
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_recv
</UL>

<P><STRONG><a name="[3e0]"></a>jmesh_rev_adv_timer_start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jmesh_adv.o(i.jmesh_rev_adv_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_rev_adv_timer_start &rArr; os_timer_set &rArr; os_time_ms_to_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[375]"></a>jmesh_rev_beacon_timer_is_flow</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_adv.o(i.jmesh_rev_beacon_timer_is_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_rev_beacon_timer_is_flow &rArr; os_timer_is_flow &rArr; os_time_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
</UL>

<P><STRONG><a name="[376]"></a>jmesh_rev_beacon_timer_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_adv.o(i.jmesh_rev_beacon_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_rev_beacon_timer_start &rArr; os_timer_restart &rArr; os_time_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
</UL>

<P><STRONG><a name="[392]"></a>jmesh_route_clear_id</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_route.o(i.jmesh_route_clear_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_route_clear_id
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnected
</UL>

<P><STRONG><a name="[12]"></a>jmesh_route_exchange</STRONG> (Thumb, 136 bytes, Stack size 256 bytes, jmesh_route.o(i.jmesh_route_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = jmesh_route_exchange &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jmesh_route.o(i.jmesh_route_exchange)
<LI> jmesh_route.o(i.jmesh_route_init)
</UL>
<P><STRONG><a name="[3e4]"></a>jmesh_route_exchange_recv</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, jmesh_route.o(i.jmesh_route_exchange_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = jmesh_route_exchange_recv &rArr; jmesh_route_update
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
</UL>

<P><STRONG><a name="[3e5]"></a>jmesh_route_get2</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, jmesh_route.o(i.jmesh_route_get2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jmesh_route_get2
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_send
</UL>

<P><STRONG><a name="[3f4]"></a>jmesh_route_get_by_addr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, jmesh_route.o(i.jmesh_route_get_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_route_get_by_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_compare
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_find_proxy_recv
</UL>

<P><STRONG><a name="[2ba]"></a>jmesh_route_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, jmesh_route.o(i.jmesh_route_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = jmesh_route_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
</UL>

<P><STRONG><a name="[383]"></a>jmesh_route_send</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, jmesh_route.o(i.jmesh_route_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = jmesh_route_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_addr_get_type
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_message
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_get2
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_broadcast_all
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_adv_send
</UL>

<P><STRONG><a name="[389]"></a>jmesh_route_update</STRONG> (Thumb, 258 bytes, Stack size 36 bytes, jmesh_route.o(i.jmesh_route_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = jmesh_route_update
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_link_timer_handler
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_heartbeat_recv
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_exchange_recv
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_find_recv
</UL>

<P><STRONG><a name="[373]"></a>jmesh_routing_beacon_handler</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, jmesh_routing_beacon.o(i.jmesh_routing_beacon_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = jmesh_routing_beacon_handler &rArr; friend_poll_handler &rArr; jmesh_routing_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_net_ticks_get
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_friend_feature
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_link_require
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_poll_handler
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_net_ticks_set
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_update
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
</UL>

<P><STRONG><a name="[3ed]"></a>jmesh_routing_beacon_link_require</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, jmesh_routing_beacon.o(i.jmesh_routing_beacon_link_require))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = jmesh_routing_beacon_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_beacon
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_fill_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_beacon_send
</UL>

<P><STRONG><a name="[2b9]"></a>jmesh_routing_beacon_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jmesh_routing_beacon.o(i.jmesh_routing_beacon_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = jmesh_routing_beacon_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
</UL>

<P><STRONG><a name="[3ef]"></a>jmesh_routing_disconnect_request_recv</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jmesh_routing_disconnect_request.o(i.jmesh_routing_disconnect_request_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = jmesh_routing_disconnect_request_recv &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_get_by_addr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_is_multilinked
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
</UL>

<P><STRONG><a name="[3ee]"></a>jmesh_routing_fill_beacon</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_fill_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jmesh_routing_fill_beacon &rArr; jmesh_gatt_get_intv_mask &rArr; jmesh_gatt_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_net_ticks_get
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_intv_mask
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_features
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
</UL>

<P><STRONG><a name="[3f3]"></a>jmesh_routing_find_proxy_recv</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, jmesh_routing_find.o(i.jmesh_routing_find_proxy_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = jmesh_routing_find_proxy_recv &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_get_by_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
</UL>

<P><STRONG><a name="[3f5]"></a>jmesh_routing_find_recv</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, jmesh_routing_find.o(i.jmesh_routing_find_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = jmesh_routing_find_recv &rArr; jmesh_routing_heartbeat &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_update
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_element_num
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_heartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
</UL>

<P><STRONG><a name="[298]"></a>jmesh_routing_get_neighbor_link_num</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_get_neighbor_link_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_routing_get_neighbor_link_num
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_neighbor
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_compare
</UL>

<P><STRONG><a name="[3ea]"></a>jmesh_routing_link_require</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_link_require))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = jmesh_routing_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_friend_feature
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_total_link_num
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_non_lowp_link_num
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_mac
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_connect_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_poll_handler
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
</UL>

<P><STRONG><a name="[3fc]"></a>jmesh_routing_neig_lifetime_refresh</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_neig_lifetime_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jmesh_routing_neig_lifetime_refresh &rArr; os_time_get_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
</UL>

<P><STRONG><a name="[343]"></a>jmesh_routing_neighbor_add</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jmesh_routing_neighbor_add &rArr; os_time_get_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
</UL>

<P><STRONG><a name="[3e7]"></a>jmesh_routing_neighbor_broadcast_all</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_broadcast_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = jmesh_routing_neighbor_broadcast_all &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_send
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_ready_by_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_send
</UL>

<P><STRONG><a name="[388]"></a>jmesh_routing_neighbor_flush</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_routing_neighbor_flush &rArr; os_time_get_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
</UL>

<P><STRONG><a name="[3f0]"></a>jmesh_routing_neighbor_get_by_addr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_get_by_addr))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_get_rssi
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_poll_handler
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_disconnect_request_recv
</UL>

<P><STRONG><a name="[386]"></a>jmesh_routing_neighbor_get_by_mac</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_get_by_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_routing_neighbor_get_by_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_is_mesh_device
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_null_intv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
</UL>

<P><STRONG><a name="[2b7]"></a>jmesh_routing_neighbor_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = jmesh_routing_neighbor_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[3f1]"></a>jmesh_routing_neighbor_is_multilinked</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_is_multilinked))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_disconnect_request_recv
</UL>

<P><STRONG><a name="[3e9]"></a>jmesh_routing_neighbor_update</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jmesh_routing_neighbor_update &rArr; jmesh_gatt_features_update &rArr; jmesh_gatt_get_link_by_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_features_update
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_handler
</UL>

<P><STRONG><a name="[3fe]"></a>jmesh_routing_recv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, jmesh_routing_func.o(i.jmesh_routing_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = jmesh_routing_recv &rArr; jmesh_routing_find_recv &rArr; jmesh_routing_heartbeat &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_remove_recv
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neig_lifetime_refresh
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_heartbeat_recv
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_exchange_recv
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_find_recv
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_find_proxy_recv
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_disconnect_request_recv
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_control_recv_handler
</UL>

<P><STRONG><a name="[400]"></a>jmesh_routing_remove_recv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jmesh_routing_remove.o(i.jmesh_routing_remove_recv))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
</UL>

<P><STRONG><a name="[401]"></a>jmesh_secure_beacon_handler</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, jmesh_secure_beacon.o(i.jmesh_secure_beacon_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = jmesh_secure_beacon_handler &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_recover_iv_index
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_stop_update_iv_index
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_start_update_iv_index
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_recv_handler
</UL>

<P><STRONG><a name="[c2]"></a>jmesh_secure_beacon_recv_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jmesh_secure_beacon.o(i.jmesh_secure_beacon_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = jmesh_secure_beacon_recv_handler &rArr; jmesh_secure_beacon_handler &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[286]"></a>jmesh_secure_beacon_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, jmesh_secure_beacon.o(i.jmesh_secure_beacon_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = jmesh_secure_beacon_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ota_adv_schedule
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_exit_ota
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
</UL>

<P><STRONG><a name="[2be]"></a>jmesh_secure_beacon_stop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_secure_beacon.o(i.jmesh_secure_beacon_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_secure_beacon_stop &rArr; os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_ota
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_choose_offer
</UL>

<P><STRONG><a name="[402]"></a>jmesh_segment_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jmesh_segment.o(i.jmesh_segment_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = jmesh_segment_init &rArr; os_memb_init &rArr; jmesh_mutex_new &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[3b2]"></a>jmesh_segment_send</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, jmesh_segment.o(i.jmesh_segment_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = jmesh_segment_send &rArr; lower_segment_transmit &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_new
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_send
</UL>

<P><STRONG><a name="[3d6]"></a>jmesh_seq_add</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jmesh_seq.o(i.jmesh_seq_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_seq_add &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[3d5]"></a>jmesh_seq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmesh_seq.o(i.jmesh_seq_get))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_config_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_access_send
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[3ce]"></a>jmesh_seq_is_valid</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, jmesh_seq.o(i.jmesh_seq_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jmesh_seq_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
</UL>

<P><STRONG><a name="[404]"></a>jmesh_seq_list_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, jmesh_seq.o(i.jmesh_seq_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_seq_list_init &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
</UL>

<P><STRONG><a name="[3d1]"></a>jmesh_seq_set</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, jmesh_seq.o(i.jmesh_seq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jmesh_seq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
</UL>

<P><STRONG><a name="[3c9]"></a>jmesh_seq_set_local</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, jmesh_seq.o(i.jmesh_seq_set_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_seq_set_local &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_start_update_iv_index
</UL>

<P><STRONG><a name="[2af]"></a>jmesh_set_friend_feature</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jmesh_features.o(i.jmesh_set_friend_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_set_friend_feature &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
</UL>

<P><STRONG><a name="[2b1]"></a>jmesh_set_lowpower_feature</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jmesh_features.o(i.jmesh_set_lowpower_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_set_lowpower_feature &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
</UL>

<P><STRONG><a name="[21c]"></a>jmesh_set_primary_addr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jmesh_addr.o(i.jmesh_set_primary_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_set_primary_addr &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_addr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B106_handler
</UL>

<P><STRONG><a name="[2ae]"></a>jmesh_set_proxy_feature</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jmesh_features.o(i.jmesh_set_proxy_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_set_proxy_feature &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
</UL>

<P><STRONG><a name="[2ad]"></a>jmesh_set_relay_feature</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jmesh_features.o(i.jmesh_set_relay_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_set_relay_feature &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_feature
</UL>

<P><STRONG><a name="[2eb]"></a>jmesh_state_get_secure_network_beacon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmesh_state.o(i.jmesh_state_get_secure_network_beacon))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_get_server_callback
</UL>

<P><STRONG><a name="[2ed]"></a>jmesh_state_set_secure_network_beacon</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, jmesh_state.o(i.jmesh_state_set_secure_network_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jmesh_state_set_secure_network_beacon &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_set_server_callback
</UL>

<P><STRONG><a name="[3b7]"></a>jmesh_subscription_list</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, jmesh_subscription_list.o(i.jmesh_subscription_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jmesh_subscription_list
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list
</UL>

<P><STRONG><a name="[3b8]"></a>jmesh_subscription_list_add</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, jmesh_subscription_list.o(i.jmesh_subscription_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_add
</UL>

<P><STRONG><a name="[283]"></a>jmesh_subscription_list_add_filter</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, jmesh_subscription_list.o(i.jmesh_subscription_list_add_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jmesh_subscription_list_add_filter &rArr; jmesh_interface_add_filter_addr &rArr; jmesh_filter_add_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_add_filter_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_load_para
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
</UL>

<P><STRONG><a name="[3b9]"></a>jmesh_subscription_list_delete_all</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jmesh_subscription_list.o(i.jmesh_subscription_list_delete_all))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_delete_all
</UL>

<P><STRONG><a name="[3ba]"></a>jmesh_subscription_list_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jmesh_subscription_list.o(i.jmesh_subscription_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_init
</UL>

<P><STRONG><a name="[3b5]"></a>jmesh_subscription_list_is_in</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, jmesh_subscription_list.o(i.jmesh_subscription_list_is_in))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_addr_check
</UL>

<P><STRONG><a name="[3bb]"></a>jmesh_subscription_list_overwrite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jmesh_subscription_list.o(i.jmesh_subscription_list_overwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_subscription_list_overwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_overwrite
</UL>

<P><STRONG><a name="[3bc]"></a>jmesh_subscription_list_remove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, jmesh_subscription_list.o(i.jmesh_subscription_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_remove
</UL>

<P><STRONG><a name="[3bd]"></a>jmesh_unbind_app</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jmesh_bind.o(i.jmesh_unbind_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmesh_unbind_app
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_unbind_app
</UL>

<P><STRONG><a name="[b7]"></a>jmesh_upper_access_send</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, jmesh_upper.o(i.jmesh_upper_access_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = jmesh_upper_access_send &rArr; jmesh_lower_send &rArr; jmesh_segment_send &rArr; lower_segment_transmit &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_TTL_get_default
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_get
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_encrypt
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_generate_nonce
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_update_flag
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>jmesh_upper_config_send</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, jmesh_upper.o(i.jmesh_upper_config_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = jmesh_upper_config_send &rArr; jmesh_lower_send &rArr; jmesh_segment_send &rArr; lower_segment_transmit &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_get_devkey
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_TTL_get_default
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_get
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_encrypt
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_generate_nonce
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_update_flag
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>jmesh_upper_control_recv_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jmesh_control.o(i.jmesh_upper_control_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = jmesh_upper_control_recv_handler &rArr; jmesh_friend_recv &rArr; jmesh_friend_connected &rArr; friend_update &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_recv
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_ready_by_addr
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>jmesh_upper_control_send_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jmesh_control.o(i.jmesh_upper_control_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = jmesh_upper_control_send_handler &rArr; jmesh_lower_send &rArr; jmesh_segment_send &rArr; lower_segment_transmit &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.constdata)
</UL>
<P><STRONG><a name="[3af]"></a>jmesh_upper_recv</STRONG> (Thumb, 358 bytes, Stack size 80 bytes, jmesh_upper.o(i.jmesh_upper_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = jmesh_upper_recv &rArr; jmesh_security_decrypt &rArr; security_aes_ccm_decrypt2 &rArr; aes_cbc_mac &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_get_devkey
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_aid
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_decrypt
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_generate_nonce
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_recv
</UL>

<P><STRONG><a name="[244]"></a>key_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, jmesh_app_pro.o(i.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = key_init &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_get
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_set
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_set
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[248]"></a>lamp_control_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jmesh_lamp.o(i.lamp_control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lamp_control_init &rArr; io_pin_dir_set &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_dir_set
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[274]"></a>lamp_mode_control_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, jmesh_lamp.o(i.lamp_mode_control_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lamp_mode_control_handler &rArr; read_meter_when_control &rArr; jmesh_uart_send &rArr; app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_when_control
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_broadcast_data_handler
</UL>

<P><STRONG><a name="[249]"></a>lamp_mode_info_read</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, jmesh_lamp.o(i.lamp_mode_info_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lamp_mode_info_read &rArr; read_meter_when_control &rArr; jmesh_uart_send &rArr; app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_when_control
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[237]"></a>lamp_mode_info_save</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jmesh_lamp.o(i.lamp_mode_info_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lamp_mode_info_save &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_CA01_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_init
</UL>

<P><STRONG><a name="[40a]"></a>lamp_mode_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jmesh_lamp.o(i.lamp_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lamp_mode_init &rArr; lamp_mode_info_save &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_save
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_read
</UL>

<P><STRONG><a name="[40b]"></a>lamp_return_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, jmesh_lamp.o(i.lamp_return_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = lamp_return_handler &rArr; report_meter_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pick
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
</UL>

<P><STRONG><a name="[10]"></a>lower_resegment_timer_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, jmesh_segment.o(i.lower_resegment_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = lower_resegment_timer_handler &rArr; lower_segment_send_ack &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_segment.o(i.jmesh_resegment_recv)
</UL>
<P><STRONG><a name="[f]"></a>lower_segment_cache_read_finder</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jmesh_segment.o(i.lower_segment_cache_read_finder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lower_segment_cache_read_finder &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_segment.o(i.jmesh_resegment_recv)
</UL>
<P><STRONG><a name="[e]"></a>lower_segment_cache_send_finder</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jmesh_segment.o(i.lower_segment_cache_send_finder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lower_segment_cache_send_finder &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_segment.o(i.jmesh_lower_segment_recv_ack)
</UL>
<P><STRONG><a name="[40d]"></a>mesh_task_create</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, os_main.o(i.mesh_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mesh_task_create &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gattm_add_svc_rsp_handler
</UL>

<P><STRONG><a name="[23f]"></a>message_realcomm_server_data_return_handler</STRONG> (Thumb, 166 bytes, Stack size 344 bytes, jmesh_app_pro.o(i.message_realcomm_server_data_return_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = message_realcomm_server_data_return_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_pack
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_tx_pkt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_transmission_uart_callback_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
</UL>

<P><STRONG><a name="[366]"></a>network_cipher_cache</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_network.o(i.network_cipher_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = network_cipher_cache &rArr; os_queue_is_in &rArr; os_queue_query
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_push
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_recv
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_recv
</UL>

<P><STRONG><a name="[412]"></a>os_buffer_queue_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_buffer_queue.o(i.os_buffer_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_buffer_queue_init &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_init
</UL>

<P><STRONG><a name="[415]"></a>os_buffer_queue_pop</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, os_buffer_queue.o(i.os_buffer_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + In Cycle
<LI>Call Chain = os_buffer_queue_pop &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_queue_send
</UL>

<P><STRONG><a name="[419]"></a>os_buffer_queue_push</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, os_buffer_queue.o(i.os_buffer_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = os_buffer_queue_push &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adapter_gatt_send
</UL>

<P><STRONG><a name="[41a]"></a>os_cycle_callback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_callback.o(i.os_cycle_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_cycle_callback &rArr; os_time_ticks_trigger &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_sub_reset
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_task_sleep
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks_trigger
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_expired
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_is_null
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_main
</UL>

<P><STRONG><a name="[420]"></a>os_do_event</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_core.o(i.os_do_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = os_do_event &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_call
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_main
</UL>

<P><STRONG><a name="[422]"></a>os_do_poll</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_core.o(i.os_do_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_do_poll &rArr; os_task_call
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_call
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_main
</UL>

<P><STRONG><a name="[41c]"></a>os_event_is_null</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.os_event_is_null))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cycle_callback
</UL>

<P><STRONG><a name="[363]"></a>os_event_post</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, os_core.o(i.os_event_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_event_post &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_config_send
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_upper_recv
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_recv
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_recv
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_proxy_recv
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_beacon_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_provision_recv_handler
</UL>

<P><STRONG><a name="[424]"></a>os_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_core.o(i.os_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_init &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_main
</UL>

<P><STRONG><a name="[425]"></a>os_inited_callback</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, os_callback.o(i.os_inited_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = os_inited_callback &rArr; jmesh_route_init &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_app
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_start
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_start
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_status_start
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_sub_regist
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_main
</UL>

<P><STRONG><a name="[429]"></a>os_list_add</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_list.o(i.os_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_tail
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_message_register
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand1_message_register
</UL>

<P><STRONG><a name="[439]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_list.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_timer_event
</UL>

<P><STRONG><a name="[42a]"></a>os_list_remove</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_list.o(i.os_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add
</UL>

<P><STRONG><a name="[42b]"></a>os_list_tail</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_list.o(i.os_list_tail))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add
</UL>

<P><STRONG><a name="[17]"></a>os_main</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_main.o(i.os_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = os_main &rArr; os_start_callback &rArr; ApsInit &rArr; key_init &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_do_poll
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_do_event
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start_callback
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_inited_callback
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cycle_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_main.o(i.mesh_task_create)
</UL>
<P><STRONG><a name="[3b0]"></a>os_memb_find</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, os_memb.o(i.os_memb_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_memb_find &rArr; jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_unlock
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_segment_recv_ack
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
</UL>

<P><STRONG><a name="[3d8]"></a>os_memb_free</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_memb.o(i.os_memb_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_memb_free &rArr; jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_unlock
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
</UL>

<P><STRONG><a name="[3db]"></a>os_memb_get_by_index</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_memb.o(i.os_memb_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_log
</UL>

<P><STRONG><a name="[3da]"></a>os_memb_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_memb.o(i.os_memb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_memb_init &rArr; jmesh_mutex_new &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_segment_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_init
</UL>

<P><STRONG><a name="[3dc]"></a>os_memb_new</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_memb.o(i.os_memb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_memb_new &rArr; jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_unlock
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_segment_send
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
</UL>

<P><STRONG><a name="[3cb]"></a>os_queue_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_queue.o(i.os_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_init
</UL>

<P><STRONG><a name="[433]"></a>os_queue_is_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_queue.o(i.os_queue_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_pop
</UL>

<P><STRONG><a name="[434]"></a>os_queue_is_full</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_queue.o(i.os_queue_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_push
</UL>

<P><STRONG><a name="[40f]"></a>os_queue_is_in</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_queue.o(i.os_queue_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_queue_is_in &rArr; os_queue_query
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_query
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_cipher_cache
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_plain_cache
</UL>

<P><STRONG><a name="[432]"></a>os_queue_pop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_queue.o(i.os_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_queue_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_push
</UL>

<P><STRONG><a name="[410]"></a>os_queue_push</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_queue.o(i.os_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_queue_push &rArr; os_queue_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_pop
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_is_full
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_cipher_cache
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_plain_cache
</UL>

<P><STRONG><a name="[431]"></a>os_queue_query</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, os_queue.o(i.os_queue_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_queue_query
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_is_in
</UL>

<P><STRONG><a name="[42d]"></a>os_start_callback</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, os_callback.o(i.os_start_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = os_start_callback &rArr; ApsInit &rArr; key_init &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_TTL_set_default
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_TTL_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_seq_list_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_segment_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_rev_adv_timer_start
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_addr_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_init
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_features_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_main
</UL>

<P><STRONG><a name="[438]"></a>os_task_exit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_core.o(i.os_task_exit))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_call
</UL>

<P><STRONG><a name="[1fb]"></a>os_task_jmesh_task</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, jmesh_task.o(i.os_task_jmesh_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_task_jmesh_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_task.o(.data)
</UL>
<P><STRONG><a name="[1fc]"></a>os_task_os_timer_event</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, os_timer_event.o(i.os_task_os_timer_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = os_task_os_timer_event &rArr; os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_flow
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_unlock
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_new
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_lock
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_schedule
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_timer_event.o(.data)
</UL>
<P><STRONG><a name="[43c]"></a>os_task_poll</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_core.o(i.os_task_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pulse_int_poll
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart0_read_callback
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks_trigger
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_add
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_schedule
</UL>

<P><STRONG><a name="[42c]"></a>os_task_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.os_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_task_start &rArr; os_task_call
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_call
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_main
</UL>

<P><STRONG><a name="[41d]"></a>os_time_get_expired</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_time.o(i.os_time_get_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_time_get_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cycle_callback
</UL>

<P><STRONG><a name="[38a]"></a>os_time_get_seconds</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_time.o(i.os_time_get_seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_time_get_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_list_history
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_history
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_rd_table_print
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_add
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_flush
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnected
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neig_lifetime_refresh
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_update
</UL>

<P><STRONG><a name="[25f]"></a>os_time_ms_to_ticks</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(i.os_time_ms_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_time_ms_to_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_light_mode
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FIFO_TX
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_for_channel_idle
</UL>

<P><STRONG><a name="[43a]"></a>os_time_ticks</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_time.o(i.os_time_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_time_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_flow
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_timer_event
</UL>

<P><STRONG><a name="[58e]"></a>os_time_ticks_to_ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_time.o(i.os_time_ticks_to_ms))
<BR><BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_mode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_mode_timer_handler
</UL>

<P><STRONG><a name="[41f]"></a>os_time_ticks_trigger</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_time.o(i.os_time_ticks_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = os_time_ticks_trigger &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cycle_callback
</UL>

<P><STRONG><a name="[268]"></a>os_timer_event_remove</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_timer_event.o(i.os_timer_event_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_poll
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_unlock
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_return_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_return_handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_stop_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_stop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_uninit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ota_adv_schedule
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_free
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_stop_cancel
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_reset_progress
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_check_progress
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_callback
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_uart_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_timer_event
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_overtime_handler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_transmission_uart_callback_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_repeat_timer_handler
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_report_return_handler
</UL>

<P><STRONG><a name="[267]"></a>os_timer_event_restart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_timer_event.o(i.os_timer_event_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_timer_event_restart &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_meter_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_record
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_read
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_segment_recv_ack
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_retransmit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_link_timer_handler
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_check_progress
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_uart_int_e
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart1_read_callback
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_overtime_handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_overtime_handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_node_state_timer_handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_timer_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_repeat_timer_handler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_link_require
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_report_overtime_handler
</UL>

<P><STRONG><a name="[43b]"></a>os_timer_event_schedule</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_time.o(i.os_timer_event_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_timer_event_schedule &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_timer_event
</UL>

<P><STRONG><a name="[217]"></a>os_timer_event_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_timer_event.o(i.os_timer_event_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_auto_report
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_mode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_mode_timer_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_broadcast_data_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_pulse_int_e
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_save_value
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_server_cmd_send_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_start_handler
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_start
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_start
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ota_adv_schedule
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_start_ota
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_receive_offer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_choose_offer
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_sleep
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_connected
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_confirm_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_poll_handler
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_request_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_offer
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_resegment_timer_handler
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_segment_send
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_authentication_action
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_secure_beacon
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_connect_start
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel_callback
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_check_progress
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_callback
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_start
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B406_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B104_handler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_permit_timer_start
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_exchange
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_beacon_send
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_by_470
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ota_adv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_overtime_handler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_task_start
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_meter_addr_repeat_timer_handler
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_node_state_timer_start
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_timer_start
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_start
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_adv_send
</UL>

<P><STRONG><a name="[3e2]"></a>os_timer_is_flow</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_timer.o(i.os_timer_is_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_timer_is_flow &rArr; os_time_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_rev_beacon_timer_is_flow
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_os_timer_event
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
</UL>

<P><STRONG><a name="[3e3]"></a>os_timer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_timer.o(i.os_timer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_timer_restart &rArr; os_time_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_rev_beacon_timer_start
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
</UL>

<P><STRONG><a name="[3e1]"></a>os_timer_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_timer.o(i.os_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_timer_set &rArr; os_time_ms_to_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ms_to_ticks
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_rev_adv_timer_start
</UL>

<P><STRONG><a name="[19]"></a>ota_permit_timer_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_config.o(i.ota_permit_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_config.o(i.ota_permit_timer_start)
</UL>
<P><STRONG><a name="[256]"></a>ota_permit_timer_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_config.o(i.ota_permit_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ota_permit_timer_start &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Switch
</UL>

<P><STRONG><a name="[24b]"></a>phy_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, _470_phy.o(i.phy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = phy_init &rArr; vRadio_Init &rArr; vRadio_si4438Patch &rArr; si446x_part_info &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel_group
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartRX
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_Init
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_hop_control
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
</UL>

<P><STRONG><a name="[264]"></a>phy_rx_pkt</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, _470_phy.o(i.phy_rx_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = phy_rx_pkt &rArr; gRadio_CheckReceived &rArr; vRadio_StartRX &rArr; si446x_start_rx &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartRX
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Whiting_Buff
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
</UL>

<P><STRONG><a name="[226]"></a>phy_set_channel</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, _470_phy.o(i.phy_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = phy_set_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_get_meter_addr_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B202_handler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_report_overtime_handler
</UL>

<P><STRONG><a name="[225]"></a>phy_set_channel_group</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, _470_phy.o(i.phy_set_channel_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = phy_set_channel_group &rArr; rx_hop_control &rArr; si446x_set_property &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_hop_control
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_get_meter_addr_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B202_handler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
</UL>

<P><STRONG><a name="[23d]"></a>phy_tx_pkt</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, _470_phy.o(i.phy_tx_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = phy_tx_pkt &rArr; waiting_for_channel_idle &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FIFO_TX
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_for_channel_idle
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Whiting_Buff
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_by_470
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler_callback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_report_overtime_handler
</UL>

<P><STRONG><a name="[22e]"></a>protocol_mx188_pack</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, protocol_mx188.o(i.protocol_mx188_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protocol_mx188_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_return_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_uart_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B406_handler
</UL>

<P><STRONG><a name="[265]"></a>protocol_mx188_parse2</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, protocol_mx188.o(i.protocol_mx188_parse2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = protocol_mx188_parse2 &rArr; fetch_routers &rArr; get_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_addr
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_routers
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_meter_type
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_return_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_meter_by_node_handler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_470_app_recv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_meter_overtime_handler
</UL>

<P><STRONG><a name="[443]"></a>radio_comm_GetResp</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, si4438_fifo.o(i.radio_comm_GetResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_WriteData
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_ReadData
</UL>

<P><STRONG><a name="[444]"></a>radio_comm_ReadData</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, si4438_fifo.o(i.radio_comm_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = radio_comm_ReadData &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_GetResp
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_read_rx_fifo
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_frr_a_read
</UL>

<P><STRONG><a name="[445]"></a>radio_comm_SendCmd</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, si4438_fifo.o(i.radio_comm_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_GetResp
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_start_tx
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_start_rx
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_set_property
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_change_state
</UL>

<P><STRONG><a name="[446]"></a>radio_comm_SendCmdGetResp</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, si4438_fifo.o(i.radio_comm_SendCmdGetResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmd
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_GetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_request_device_state
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_part_info
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_packet_info
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_si4438Patch
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_gpio_pin_cfg
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_fifo_info
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_configuration_init
</UL>

<P><STRONG><a name="[447]"></a>radio_comm_WriteData</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, si4438_fifo.o(i.radio_comm_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = radio_comm_WriteData &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_GetResp
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_write_tx_fifo
</UL>

<P><STRONG><a name="[24a]"></a>radio_port_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, si4438_hal.o(i.radio_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = radio_port_init &rArr; jmesh_gpio_mode_out_pp &rArr; io_pin_pull_write &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_mode_out_pp
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_mode_in_pu
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[20b]"></a>read_meter_handler</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, jmesh_app_pro.o(i.read_meter_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = read_meter_handler &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_CheckFrame
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway_read_meter_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_handler
</UL>

<P><STRONG><a name="[3]"></a>read_meter_overtime_handler</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, jmesh_app_pro.o(i.read_meter_overtime_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = read_meter_overtime_handler &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_protocol_CheckFrame
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_transmission_uart_overtime_handler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> _470_app.o(i._470_app_recv)
<LI> jmesh_app_pro.o(i.read_meter_handler)
<LI> jmesh_app_pro.o(i.read_meter_overtime_handler)
</UL>
<P><STRONG><a name="[202]"></a>read_meter_when_control</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, jmesh_lamp.o(i.read_meter_when_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = read_meter_when_control &rArr; jmesh_uart_send &rArr; app_uart_write &rArr; app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_info_read
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_mode_control_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_check
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lamp_Control_rev_data_by_node
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B101_Lamp_handler
</UL>

<P><STRONG><a name="[10d]"></a>realcomm_get_meter_addr_handler</STRONG> (Thumb, 170 bytes, Stack size 296 bytes, jmesh_app_pro.o(i.realcomm_get_meter_addr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = realcomm_get_meter_addr_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_send_save_handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel_group
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[24d]"></a>realcomm_send_read_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.realcomm_send_read_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = realcomm_send_read_handler &rArr; jmesh_save_read &rArr; nvds_get &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsMemoryParaRead
</UL>

<P><STRONG><a name="[279]"></a>realcomm_send_save_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.realcomm_send_save_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = realcomm_send_save_handler &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realcomm_get_meter_addr_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_meter_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_realcomm_server_data_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gateway_read_meter_handler
</UL>

<P><STRONG><a name="[44b]"></a>report_by_470</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, _470_app.o(i.report_by_470))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = report_by_470 &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_tx_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_meter_handler
</UL>

<P><STRONG><a name="[40c]"></a>report_meter_handler</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, jmesh_app_pro.o(i.report_meter_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = report_meter_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_by_470
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_pack
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_mx188_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_return_handler
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
</UL>

<P><STRONG><a name="[1c]"></a>report_meter_overtime_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, jmesh_app_pro.o(i.report_meter_overtime_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = report_meter_overtime_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_app_pro.o(i.report_meter_handler)
</UL>
<P><STRONG><a name="[107]"></a>report_meter_return_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, jmesh_app_pro.o(i.report_meter_return_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = report_meter_return_handler &rArr; os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_client.o(i.jmesh_app_expand2_realcomm_client_init)
</UL>
<P><STRONG><a name="[246]"></a>reset_record</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.reset_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = reset_record &rArr; jmesh_save_write &rArr; nvds_put &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>

<P><STRONG><a name="[43f]"></a>rx_hop_control</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _470_phy.o(i.rx_hop_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rx_hop_control &rArr; si446x_set_property &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_set_property
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_channel_group
</UL>

<P><STRONG><a name="[22a]"></a>send_app_broadcast_data</STRONG> (Thumb, 58 bytes, Stack size 280 bytes, jmesh_app_pro.o(i.send_app_broadcast_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = send_app_broadcast_data &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B403_handler
</UL>

<P><STRONG><a name="[1d]"></a>send_ota_adv</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jmesh_app_pro.o(i.send_ota_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = send_ota_adv &rArr; jmesh_adv_send &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApsInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_app_pro.o(i.send_ota_adv)
</UL>
<P><STRONG><a name="[1]"></a>set_mac_callback_timer_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_protocol.o(i.set_mac_callback_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_mac_callback_timer_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_protocol.o(i.APP_BD_B104_handler)
<LI> jmesh_app_pro.o(i.get_meter_addr_callback)
</UL>
<P><STRONG><a name="[25a]"></a>si446x_change_state</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_change_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = si446x_change_state &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FIFO_TX
</UL>

<P><STRONG><a name="[44d]"></a>si446x_configuration_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, si4438_fifo.o(i.si446x_configuration_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = si446x_configuration_init &rArr; si446x_get_int_status &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_Init
</UL>

<P><STRONG><a name="[44e]"></a>si446x_fifo_info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_fifo_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = si446x_fifo_info &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartTx
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartRX
</UL>

<P><STRONG><a name="[33b]"></a>si446x_frr_a_read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_frr_a_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = si446x_frr_a_read &rArr; radio_comm_ReadData &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
</UL>

<P><STRONG><a name="[338]"></a>si446x_get_int_status</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_get_int_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = si446x_get_int_status &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartTx
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckTransmitted
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_si4438Patch
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartRX
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_configuration_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_for_channel_idle
</UL>

<P><STRONG><a name="[339]"></a>si446x_get_packet_info</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_get_packet_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = si446x_get_packet_info &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
</UL>

<P><STRONG><a name="[44f]"></a>si446x_gpio_pin_cfg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, si4438_fifo.o(i.si446x_gpio_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = si446x_gpio_pin_cfg &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
</UL>

<P><STRONG><a name="[450]"></a>si446x_part_info</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_part_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = si446x_part_info &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_si4438Patch
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_Init
</UL>

<P><STRONG><a name="[33a]"></a>si446x_read_rx_fifo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_read_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = si446x_read_rx_fifo &rArr; radio_comm_ReadData &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
</UL>

<P><STRONG><a name="[33c]"></a>si446x_request_device_state</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_request_device_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = si446x_request_device_state &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
</UL>

<P><STRONG><a name="[451]"></a>si446x_reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = si446x_reset &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_PowerUp
</UL>

<P><STRONG><a name="[258]"></a>si446x_set_property</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, si4438_fifo.o(i.si446x_set_property))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = si446x_set_property &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crystal_frequency_tune
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_power_set
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_hop_control
</UL>

<P><STRONG><a name="[452]"></a>si446x_start_rx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, si4438_fifo.o(i.si446x_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = si446x_start_rx &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartRX
</UL>

<P><STRONG><a name="[453]"></a>si446x_start_tx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_start_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = si446x_start_tx &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stream_data
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartTx
</UL>

<P><STRONG><a name="[33d]"></a>si446x_write_tx_fifo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, si4438_fifo.o(i.si446x_write_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = si446x_write_tx_fifo &rArr; radio_comm_WriteData &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartTx
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckTransmitted
</UL>

<P><STRONG><a name="[27d]"></a>str_to_hex</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, configuration_cmd.o(i.str_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = str_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_water_set_mac
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_unbind
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_set_mac
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_meter_cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send_hex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_subscribe
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_get_bind
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_gate_val_by_mac
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_del_subscribe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_bind
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_subscribe
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_netkey
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_add_appkey
</UL>

<P><STRONG><a name="[21a]"></a>system_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jmesh_app_pro.o(i.system_reset))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_B105_handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reset_timer_handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_network_maintain_timer_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mac_callback_timer_handler
</UL>

<P><STRONG><a name="[233]"></a>test_RF_ber</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, _470_phy.o(i.test_RF_ber))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = test_RF_ber &rArr; phy_init &rArr; vRadio_Init &rArr; vRadio_si4438Patch &rArr; si446x_part_info &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_sub_reset
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_si4438Patch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_PowerUp
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_start_rx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_configuration_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_change_state
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crystal_frequency_tune
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_TX_Power_Ceshi
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF02_handler
</UL>

<P><STRONG><a name="[234]"></a>test_stream_data</STRONG> (Thumb, 320 bytes, Stack size 88 bytes, _470_phy.o(i.test_stream_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = test_stream_data &rArr; phy_init &rArr; vRadio_Init &rArr; vRadio_si4438Patch &rArr; si446x_part_info &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_wdt_sub_reset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_start_tx
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_set_property
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_gpio_pin_cfg
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_fifo_info
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_change_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_TX_Power_Ceshi
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BD_BF02_handler
</UL>

<P><STRONG><a name="[43e]"></a>vRadio_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, si4438_fifo.o(i.vRadio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vRadio_Init &rArr; vRadio_si4438Patch &rArr; si446x_part_info &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_part_info
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_si4438Patch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_PowerUp
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_configuration_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
</UL>

<P><STRONG><a name="[454]"></a>vRadio_PowerUp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, si4438_fifo.o(i.vRadio_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vRadio_PowerUp &rArr; si446x_reset &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_Init
</UL>

<P><STRONG><a name="[25e]"></a>vRadio_StartRX</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, si4438_fifo.o(i.vRadio_StartRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vRadio_StartRX &rArr; si446x_start_rx &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_start_rx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_fifo_info
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gRadio_CheckReceived
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FIFO_TX
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_for_channel_idle
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_rx_pkt
</UL>

<P><STRONG><a name="[25b]"></a>vRadio_StartTx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, si4438_fifo.o(i.vRadio_StartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vRadio_StartTx &rArr; si446x_get_int_status &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_write_tx_fifo
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_start_tx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_fifo_info
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FIFO_TX
</UL>

<P><STRONG><a name="[455]"></a>vRadio_si4438Patch</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, si4438_fifo.o(i.vRadio_si4438Patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vRadio_si4438Patch &rArr; si446x_part_info &rArr; radio_comm_SendCmdGetResp &rArr; radio_comm_SendCmd &rArr; radio_comm_GetResp &rArr; ByteRead &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_part_info
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_comm_SendCmdGetResp
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_RF_ber
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_Init
</UL>

<P><STRONG><a name="[440]"></a>waiting_for_channel_idle</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, _470_phy.o(i.waiting_for_channel_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = waiting_for_channel_idle &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ms_to_ticks
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRadio_StartRX
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si446x_get_int_status
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_tx_pkt
</UL>

<P><STRONG><a name="[1fe]"></a>flash_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bx_dbg.o(xip_section), UNUSED, KEPT)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5eb]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[5ec]"></a>prvCopyDataToQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[5f3]"></a>prvInitialiseMutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[5f4]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[5fa]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[602]"></a>prvUnlockQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[5e1]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[5e5]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[5ee]"></a>prvDeleteTCB</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[5ef]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[144]"></a>prvIdleTask</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = prvIdleTask &rArr; bxSuppressTicksAndSleep &rArr; sleep_prepare_and_check &rArr; rwip_sleep &rArr; bx_lld_wakeup_time_set &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[5f6]"></a>prvInitialiseNewTask</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prvInitialiseNewTask &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[68b]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[5ea]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[5f9]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[5fb]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[5fd]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[5ff]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[5fe]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[601]"></a>prvSwitchTimerLists</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[16a]"></a>prvTimerTask</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[136]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = prvTaskExitError &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[606]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[607]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[5dc]"></a>prf_itf_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, prf.o(i.prf_itf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_prf_itf_get
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_prf_itf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_create
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_cleanup
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_add_profile
</UL>

<P><STRONG><a name="[5a6]"></a>ble_extwkupdsb_setf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bx_lld_sleep.o(i.ble_extwkupdsb_setf))
<BR><BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_enter
</UL>

<P><STRONG><a name="[5a3]"></a>lld_sleep_compensate</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bx_lld_sleep.o(i.lld_sleep_compensate))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lld_sleep_compensate &rArr; rwip_sleep_lpcycles_2_us &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_lpcycles_2_us
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
</UL>

<P><STRONG><a name="[f5]"></a>ble_msg_rx_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_bridge.o(i.ble_msg_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ble_msg_rx_cb &rArr; msg2blestack_from_ISR &rArr; msg_send_isr &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
</UL>
<BR>[Address Reference Count : 2]<UL><LI> os_bridge.o(i.virtual_port_read)
<LI> os_bridge.o(i.ble_msg_start_recv)
</UL>
<P><STRONG><a name="[145]"></a>ble_msg_tx_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_bridge.o(i.ble_msg_tx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ble_msg_tx_cb &rArr; msg2blestack_from_ISR &rArr; msg_send_isr &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_bridge.o(i.virtual_port_write)
</UL>
<P><STRONG><a name="[171]"></a>virtual_port_flow_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_bridge.o(i.virtual_port_flow_off))
<BR>[Address Reference Count : 1]<UL><LI> os_bridge.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>virtual_port_flow_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_bridge.o(i.virtual_port_flow_on))
<BR>[Address Reference Count : 1]<UL><LI> os_bridge.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>virtual_port_read</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, os_bridge.o(i.virtual_port_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = virtual_port_read &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swint_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_bridge.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>virtual_port_write</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_bridge.o(i.virtual_port_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = virtual_port_write &rArr; app_queue_ahi_rsp_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swint_req
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_queue_ahi_rsp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_bridge.o(.constdata)
</UL>
<P><STRONG><a name="[5cb]"></a>osapp_ahi_default_msg_handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, osapp_task.o(i.osapp_ahi_default_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = osapp_ahi_default_msg_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_rx
</UL>

<P><STRONG><a name="[5cc]"></a>osapp_ahi_msg_rx</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, osapp_task.o(i.osapp_ahi_msg_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = osapp_ahi_msg_rx &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_default_msg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
</UL>

<P><STRONG><a name="[5ca]"></a>clr_rtc_intr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task_init.o(i.clr_rtc_intr))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_and_rtc_matchcnt_update
</UL>

<P><STRONG><a name="[5c7]"></a>os_tick_and_rtc_matchcnt_update</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_init.o(i.os_tick_and_rtc_matchcnt_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = os_tick_and_rtc_matchcnt_update &rArr; vTaskStepTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_match_cnt_increase
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_rtc_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[641]"></a>wakeup_delay_and_timer_counts_config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, task_init.o(i.wakeup_delay_and_timer_counts_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wakeup_delay_and_timer_counts_config &rArr; rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc32k_calib_val
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_init
</UL>

<P><STRONG><a name="[5c9]"></a>rtc_match_cnt_increase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, task_init.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_init
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_and_rtc_matchcnt_update
</UL>

<P><STRONG><a name="[561]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, arch_init.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_priority
</UL>

<P><STRONG><a name="[560]"></a>irq_priority</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, arch_init.o(i.irq_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = irq_priority
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[699]"></a>sys_setup</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, arch_init.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sys_setup &rArr; rf_reg_settings_init_mp &rArr; ftsv_calc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_init
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_start
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_end
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_reset_to_gpio
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_clr_all_clk
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_param_init_wrapper
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_init_wrapper
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_init_wrapper
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_init_wrapper
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_config
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
</UL>

<P><STRONG><a name="[179]"></a>bxotas_cleanup</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bxotas.o(i.bxotas_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bxotas_cleanup
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxotas.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>bxotas_create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bxotas.o(i.bxotas_create))
<BR>[Address Reference Count : 1]<UL><LI> bxotas.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>bxotas_destroy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bxotas.o(i.bxotas_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bxotas_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxotas.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>bxotas_init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, bxotas.o(i.bxotas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bxotas_init
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxotas.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>bxotas_firmware_dest_cmd_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bxotas_task.o(i.bxotas_firmware_dest_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bxotas_firmware_dest_cmd_handler &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxotas_task.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>bxotas_start_cfm_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bxotas_task.o(i.bxotas_start_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = bxotas_start_cfm_handler &rArr; bxotas_flash_cleanup_for_ota &rArr; bxotas_erase_flash &rArr; flash_erase &rArr; flash_erase_operation &rArr; flash_erase_execution &rArr; flash_erase_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_flash_cleanup_for_ota
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_rsp_indicate
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxotas_task.o(.constdata)
</UL>
<P><STRONG><a name="[50a]"></a>bxotas_start_rsp_indicate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bxotas_task.o(i.bxotas_start_rsp_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bxotas_start_rsp_indicate
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_start_cfm_handler
</UL>

<P><STRONG><a name="[512]"></a>ctrl_pkt_dispatch</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, bxotas_task.o(i.ctrl_pkt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ctrl_pkt_dispatch &rArr; bxotas_image_validation &rArr; flash_program &rArr; flash_program_operation &rArr; flash_program_execution &rArr; flash_program_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_image_validation
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_validity_check
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[17b]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, bxotas_task.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gattc_read_req_ind_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxotas_task.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, bxotas_task.o(i.gattc_write_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = gattc_write_req_ind_handler &rArr; ctrl_pkt_dispatch &rArr; bxotas_image_validation &rArr; flash_program &rArr; flash_program_operation &rArr; flash_program_execution &rArr; flash_program_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxotas_program_flash
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_validity_check
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxotas_task.o(.constdata)
</UL>
<P><STRONG><a name="[514]"></a>request_validity_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bxotas_task.o(i.request_validity_check))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pkt_dispatch
</UL>

<P><STRONG><a name="[181]"></a>diss_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, diss.o(i.diss_cleanup))
<BR>[Address Reference Count : 1]<UL><LI> diss.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>diss_create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, diss.o(i.diss_create))
<BR>[Address Reference Count : 1]<UL><LI> diss.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>diss_destroy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, diss.o(i.diss_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = diss_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>diss_init</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, diss.o(i.diss_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = diss_init &rArr; diss_compute_cfg_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_compute_cfg_flag
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>diss_set_value_req_handler</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, diss_task.o(i.diss_set_value_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = diss_set_value_req_handler &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_to_handle
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_check_val_len
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>diss_value_cfm_handler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, diss_task.o(i.diss_value_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = diss_value_cfm_handler &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_to_handle
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, diss_task.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gattc_read_req_ind_handler &rArr; diss_handle_to_value
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_handle_to_value
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[520]"></a>co_write32p</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ecc_p256.o(i.co_write32p))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_secret_key
</UL>

<P><STRONG><a name="[131]"></a>flash_erase_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nvds_in_ram.o(i.flash_erase_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = flash_erase_wrapper &rArr; flash_erase &rArr; flash_erase_operation &rArr; flash_erase_execution &rArr; flash_erase_operation_start &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds_in_ram.o(i.nvds_init)
</UL>
<P><STRONG><a name="[5bd]"></a>nvds_data_ver_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nvds_in_ram.o(i.nvds_data_ver_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvds_data_ver_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
</UL>

<P><STRONG><a name="[5c0]"></a>nvds_get_available_idx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_get_available_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvds_get_available_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
</UL>

<P><STRONG><a name="[5c1]"></a>nvds_index_build</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nvds_in_ram.o(i.nvds_index_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nvds_index_build &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_invalid_item
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get_available_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
</UL>

<P><STRONG><a name="[5bf]"></a>nvds_invalid_item</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nvds_in_ram.o(i.nvds_invalid_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvds_invalid_item
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
</UL>

<P><STRONG><a name="[5c2]"></a>nvds_move_to_another_blk</STRONG> (Thumb, 190 bytes, Stack size 296 bytes, nvds_in_ram.o(i.nvds_move_to_another_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nvds_move_to_another_blk
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>

<P><STRONG><a name="[5be]"></a>nvds_tag_search</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_tag_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvds_tag_search
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
</UL>

<P><STRONG><a name="[5c4]"></a>nvds_tag_valid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nvds_in_ram.o(i.nvds_tag_valid))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_search
</UL>

<P><STRONG><a name="[5c3]"></a>nvds_write_new_item</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_write_new_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvds_write_new_item
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>

<P><STRONG><a name="[4f2]"></a>ble_radiocntl1_pack</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, rf_apollo.o(i.ble_radiocntl1_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ble_radiocntl1_pack &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[60d]"></a>ble_rxpwrup0_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf_apollo.o(i.ble_rxpwrup0_setf))
<BR><BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[60e]"></a>ble_txpwrup0_setf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_apollo.o(i.ble_txpwrup0_setf))
<BR><BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[13c]"></a>rf_force_agc_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_force_agc_enable))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[137]"></a>rf_reg_rd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_reg_rd))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[138]"></a>rf_reg_wr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_reg_wr))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[13b]"></a>rf_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_reset))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[13d]"></a>rf_rssi_convert</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_rssi_convert))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[13a]"></a>rf_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_sleep))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[139]"></a>rf_txpwr_dbm_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_txpwr_dbm_get))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[54f]"></a>internal_log_increase</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, internal_log.o(i.internal_log_increase))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>

<P><STRONG><a name="[535]"></a>gapm_get_operation_ptr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, set_adv_payload_31byte_patch.o(i.gapm_get_operation_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_get_operation_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data_patch
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_op_sanity_patch
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler_patch
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>

<P><STRONG><a name="[53d]"></a>gapm_process_op</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, set_adv_payload_31byte_patch.o(i.gapm_process_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapm_process_op &rArr; gapm_get_operation_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_state
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler_patch
</UL>

<P><STRONG><a name="[53a]"></a>gapm_set_address_op</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, set_adv_payload_31byte_patch.o(i.gapm_set_address_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_set_address_op
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
</UL>

<P><STRONG><a name="[13e]"></a>gapm_start_advertise_cmd_handler_patch</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, set_adv_payload_31byte_patch.o(i.gapm_start_advertise_cmd_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_start_advertise_cmd_handler_patch &rArr; gapm_process_op &rArr; gapm_get_operation_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op_patch
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_op_sanity_patch
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> set_adv_payload_31byte_patch.o(i.set_adv_payload_31Byte_patch)
</UL>
<P><STRONG><a name="[4ea]"></a>sysc_awo_blelp_inrp_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_sleep.o(i.sysc_awo_blelp_inrp_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_irq_enable
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
</UL>

<P><STRONG><a name="[6a0]"></a>deepsleep_prepare</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, sys_sleep_ram.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = deepsleep_prepare &rArr; flash_deep_power_down &rArr; flash_write_no_dma_operation_start &rArr; app_qspi_std_write_no_dma_wrapper &rArr; app_qspi_std_write_no_dma &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_reset_to_gpio
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_irq_enable
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_intr_clr
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_pwr_pwm_2_sleep_en_get
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_pll_enable
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_all
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_out_read_all
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_write_all_noie
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_read_all
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_deep_power_down
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_with_ble_sleep
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_pwm2_fc_h_setf
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_o_16m_xtal_en_setf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_32m_rc
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[6a6]"></a>sysc_awo_o_16m_xtal_en_setf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_sleep_ram.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[6a3]"></a>sysc_awo_pwm2_fc_h_setf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys_sleep_ram.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[6a4]"></a>sync_with_ble_sleep</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sys_sleep_ram.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sync_with_ble_sleep &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[487]"></a>_DoInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[489]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[48b]"></a>_WriteBlocking</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[48a]"></a>_WriteNoCheck</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[490]"></a>_PrintInt</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[491]"></a>_PrintUnsigned</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[48f]"></a>_StoreChar</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[597]"></a>llc_state_chk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_con_upd_req_ind_handler_patch2.o(i.llc_state_chk))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[59b]"></a>llc_state_update</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llc_con_upd_req_ind_handler_patch2.o(i.llc_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llc_state_update
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[59f]"></a>llc_util_set_operation_ptr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llc_con_upd_req_ind_handler_patch2.o(i.llc_util_set_operation_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llc_util_set_operation_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler_patch2
</UL>

<P><STRONG><a name="[5b3]"></a>ble_mdm_vco_cnt_spacing_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vco_cnt_spacing_setf))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_dev_calib_in_main
</UL>

<P><STRONG><a name="[5b6]"></a>ble_mdm_vco_deviation_cal_start_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vco_deviation_cal_start_setf))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali
</UL>

<P><STRONG><a name="[5b4]"></a>ble_mdm_vco_stb_time_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vco_stb_time_setf))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_dev_calib_in_main
</UL>

<P><STRONG><a name="[5b7]"></a>ble_mdm_vcocali_capdev_1_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vcocali_capdev_1_setf))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_restore
</UL>

<P><STRONG><a name="[5b8]"></a>ble_mdm_vcocali_capdev_2_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vcocali_capdev_2_setf))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_restore
</UL>

<P><STRONG><a name="[5b9]"></a>ble_mdm_vcocali_capdev_3_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vcocali_capdev_3_setf))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_restore
</UL>

<P><STRONG><a name="[5ba]"></a>ble_mdm_vcocali_capdev_4_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vcocali_capdev_4_setf))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_restore
</UL>

<P><STRONG><a name="[5b5]"></a>modem_vcocali_value_restore</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, modem.o(i.modem_vcocali_value_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modem_vcocali_value_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_4_setf
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_3_setf
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_2_setf
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_1_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
</UL>

<P><STRONG><a name="[511]"></a>is_all_zero</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, periph_mngt.o(i.is_all_zero))
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_domain_busy
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_domain_busy
</UL>

<P><STRONG><a name="[605]"></a>sysc_cpu_func_io_en_r_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pshare.o(i.sysc_cpu_func_io_en_r_setf))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>

<P><STRONG><a name="[63d]"></a>sysc_awo_clk_div_ble_mac_para0_m1_setf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctrl.o(i.sysc_awo_clk_div_ble_mac_para0_m1_setf))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[63c]"></a>sysc_awo_clk_sel_ble_mac_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctrl.o(i.sysc_awo_clk_sel_ble_mac_setf))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[63b]"></a>sysc_awo_o_clk_sel_hbus0_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctrl.o(i.sysc_awo_o_clk_sel_hbus0_setf))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[523]"></a>ext_int_idx_get</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, io_ctrl.o(i.ext_int_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_ctrl
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_cfg
</UL>

<P><STRONG><a name="[556]"></a>io_ext_int_ctrl</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, io_ctrl.o(i.io_ext_int_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = io_ext_int_ctrl &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_int_idx_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
</UL>

<P><STRONG><a name="[533]"></a>ftsv_calc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rf_reg_settings_apollo_00.o(i.ftsv_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ftsv_calc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
</UL>

<P><STRONG><a name="[1dd]"></a>cache_clk_gate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cache_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cache_clk_gate &rArr; clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cache_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[1de]"></a>cache_sys_stat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cache_integration.o(n_xip_section))
<BR>[Address Reference Count : 1]<UL><LI> cache_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[1df]"></a>dmac_intr_op</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dmac_integration.o(i.dmac_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dmac_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmac_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[1e0]"></a>dmac_sw_rst</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dmac_integration.o(i.dmac_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmac_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_cpu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmac_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[1e1]"></a>dmac_clk_gate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dmac_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dmac_clk_gate &rArr; clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmac_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[1e2]"></a>dmac_sys_stat</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dmac_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dmac_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmac_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[188]"></a>gpio_clk_gate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio_integration.o(i.gpio_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gpio_clk_gate &rArr; clk_gate_per_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_integration.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>gpio_intr_op</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio_integration.o(i.gpio_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gpio_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_integration.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>gpio_sw_rst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_integration.o(i.gpio_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_integration.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>gpio_sys_stat</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gpio_integration.o(i.gpio_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gpio_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_integration.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>hwecc_clk_gate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hwecc_integration.o(i.hwecc_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = hwecc_clk_gate &rArr; clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwecc_integration.o(.data)
</UL>
<P><STRONG><a name="[1e8]"></a>hwecc_intr_op</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hwecc_integration.o(i.hwecc_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = hwecc_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwecc_integration.o(.data)
</UL>
<P><STRONG><a name="[1e9]"></a>hwecc_sw_rst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hwecc_integration.o(i.hwecc_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwecc_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_cpu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwecc_integration.o(.data)
</UL>
<P><STRONG><a name="[1eb]"></a>hwecc_sys_stat</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hwecc_integration.o(i.hwecc_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hwecc_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwecc_integration.o(.data)
</UL>
<P><STRONG><a name="[18d]"></a>iic_clk_gate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, iic_integration.o(i.iic_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = iic_clk_gate &rArr; clk_gate_per_g0 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>iic_clk_src_cfg</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, iic_integration.o(i.iic_clk_src_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = iic_clk_src_cfg &rArr; clk_gate_per_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g1
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>iic_intr_op</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, iic_integration.o(i.iic_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = iic_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>iic_pin_cfg</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, iic_integration.o(i.iic_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = iic_pin_cfg &rArr; pshare_funcio_set &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>iic_sw_rst</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iic_integration.o(i.iic_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>iic_sys_stat</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, iic_integration.o(i.iic_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = iic_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>pwm_clk_gate</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pwm_integration.o(i.pwm_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwm_clk_gate
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_integration.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>pwm_clk_src_cfg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pwm_integration.o(i.pwm_clk_src_cfg))
<BR>[Address Reference Count : 1]<UL><LI> pwm_integration.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>pwm_intr_op</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pwm_integration.o(i.pwm_intr_op))
<BR>[Address Reference Count : 1]<UL><LI> pwm_integration.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>pwm_pin_cfg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pwm_integration.o(i.pwm_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pwm_pin_cfg &rArr; pshare_funcio_set &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_integration.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>pwm_sw_rst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_integration.o(i.pwm_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwm_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_integration.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>pwm_sys_stat</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pwm_integration.o(i.pwm_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pwm_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_integration.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>qspi_sw_rst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, qspi_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qspi_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_cpu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qspi_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[1e4]"></a>qspi_clk_gate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, qspi_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = qspi_clk_gate &rArr; clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qspi_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[1e5]"></a>qspi_pin_cfg</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, qspi_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = qspi_pin_cfg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_qspi_en_setf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qspi_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[1e6]"></a>qspi_sys_stat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, qspi_integration.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = qspi_sys_stat &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qspi_integration.o(n_xip_variable)
</UL>
<P><STRONG><a name="[6b3]"></a>sysc_cpu_qspi_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qspi_integration.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_pin_cfg
</UL>

<P><STRONG><a name="[198]"></a>spi_clk_gate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi_integration.o(i.spi_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = spi_clk_gate &rArr; clk_gate_per_g0 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>spi_intr_op</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, spi_integration.o(i.spi_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = spi_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>spi_pin_cfg</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, spi_integration.o(i.spi_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = spi_pin_cfg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_spis_en_setf
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_spim1_en_setf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_spim0_en_setf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>spi_sw_rst</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi_integration.o(i.spi_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>spi_sys_stat</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, spi_integration.o(i.spi_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = spi_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[62f]"></a>sysc_cpu_spim0_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_integration.o(i.sysc_cpu_spim0_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
</UL>

<P><STRONG><a name="[62e]"></a>sysc_cpu_spim1_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_integration.o(i.sysc_cpu_spim1_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
</UL>

<P><STRONG><a name="[630]"></a>sysc_cpu_spis_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_integration.o(i.sysc_cpu_spis_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
</UL>

<P><STRONG><a name="[19e]"></a>uart_clk_gate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart_integration.o(i.uart_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = uart_clk_gate &rArr; clk_gate_per_g0 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>uart_clk_src_cfg</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, uart_integration.o(i.uart_clk_src_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_clk_src_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>uart_intr_op</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uart_integration.o(i.uart_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = uart_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>uart_pin_cfg</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, uart_integration.o(i.uart_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = uart_pin_cfg &rArr; pshare_funcio_set &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[64e]"></a>uart_rx_stat_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_integration.o(i.uart_rx_stat_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
</UL>

<P><STRONG><a name="[19c]"></a>uart_sw_rst</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart_integration.o(i.uart_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>uart_sys_stat</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uart_integration.o(i.uart_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = uart_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_stat_set
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_stat_set
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[64f]"></a>uart_tx_stat_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_integration.o(i.uart_tx_stat_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
</UL>

<P><STRONG><a name="[1a3]"></a>wdt_clk_gate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdt_integration.o(i.wdt_clk_gate))
<BR>[Address Reference Count : 1]<UL><LI> wdt_integration.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>wdt_intr_op</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wdt_integration.o(i.wdt_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = wdt_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wdt_integration.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>wdt_pin_cfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wdt_integration.o(i.wdt_pin_cfg))
<BR>[Address Reference Count : 1]<UL><LI> wdt_integration.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>wdt_sw_rst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wdt_integration.o(i.wdt_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wdt_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_cpu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wdt_integration.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>wdt_sys_stat</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wdt_integration.o(i.wdt_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wdt_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wdt_integration.o(.constdata)
</UL>
<P><STRONG><a name="[4aa]"></a>dmac_tfr_isr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, app_dmac.o(i.dmac_tfr_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dmac_tfr_isr &rArr; dmac_block_ts_config
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_ch_free
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_block_ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_isr
</UL>

<P><STRONG><a name="[51d]"></a>dmac_block_ts_config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_dmac.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmac_block_ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_tfr_isr
</UL>

<P><STRONG><a name="[4ab]"></a>dmac_stat_clean_if_all_transfer_done</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_dmac.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_isr
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_cancel
</UL>

<P><STRONG><a name="[4ad]"></a>dmac_ch_free</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_dmac.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_cancel
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_tfr_isr
</UL>

<P><STRONG><a name="[4b7]"></a>gpio_int_cfg</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, app_gpio.o(i.gpio_int_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_int_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_init
</UL>

<P><STRONG><a name="[4ba]"></a>hwecc_calculate_start</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, app_hwecc.o(i.hwecc_calculate_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate
</UL>

<P><STRONG><a name="[54e]"></a>app_iic_set_data_cmd_pack</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_iic.o(i.app_iic_set_data_cmd_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_iic_set_data_cmd_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_empty_isr
</UL>

<P><STRONG><a name="[4c1]"></a>iic_clear_all_irq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app_iic.o(i.iic_clear_all_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_clear_all_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>

<P><STRONG><a name="[4c0]"></a>iic_rx_complete</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_iic.o(i.iic_rx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = iic_rx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>

<P><STRONG><a name="[4c2]"></a>iic_tx_complete</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, app_iic.o(i.iic_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = iic_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>

<P><STRONG><a name="[4bf]"></a>iic_tx_empty_isr</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, app_iic.o(i.iic_tx_empty_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iic_tx_empty_isr &rArr; app_iic_set_data_cmd_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_set_data_cmd_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>

<P><STRONG><a name="[4d5]"></a>app_uart_read_dma</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, app_uart.o(i.app_uart_read_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = app_uart_read_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_get_burst_transaction_size_enum
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_fifo_depth
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
</UL>

<P><STRONG><a name="[4da]"></a>app_uart_write_dma</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, app_uart.o(i.app_uart_write_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = app_uart_write_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_fifo_depth
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
</UL>

<P><STRONG><a name="[1a6]"></a>uart_read_dma_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_uart.o(i.uart_read_dma_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = uart_read_dma_callback &rArr; uart_rx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(.constdata)
</UL>
<P><STRONG><a name="[4d0]"></a>uart_rec_error_isr</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, app_uart.o(i.uart_rec_error_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = uart_rec_error_isr &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
</UL>

<P><STRONG><a name="[4d1]"></a>uart_rx_complete</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_uart.o(i.uart_rx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = uart_rx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_dma_callback
</UL>

<P><STRONG><a name="[4d4]"></a>uart_transfer_sanity_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_uart.o(i.uart_transfer_sanity_check))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
</UL>

<P><STRONG><a name="[4d2]"></a>uart_tx_complete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_uart.o(i.uart_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = uart_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
</UL>

<P><STRONG><a name="[1a7]"></a>uart_write_dma_callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_uart.o(i.uart_write_dma_callback))
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(.constdata)
</UL>
<P><STRONG><a name="[6bb]"></a>qspi_std_byte_write_dma_start</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait_wrapper
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
</UL>

<P><STRONG><a name="[6be]"></a>qspi_std_byte_write_dma_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_qspi.o(n_xip_section))
<BR><BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
</UL>

<P><STRONG><a name="[631]"></a>spi_rx_done</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_spi.o(i.spi_rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_rx_done
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_full_isr
</UL>

<P><STRONG><a name="[4cb]"></a>spi_rx_full_isr</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, app_spi.o(i.spi_rx_full_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_rx_full_isr &rArr; spi_rx_done
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_fifo_depth
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_done
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>

<P><STRONG><a name="[4cc]"></a>spi_tx_empty_isr</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, app_spi.o(i.spi_tx_empty_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_tx_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_semaphore_v
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>

<P><STRONG><a name="[6d0]"></a>flash_operation_wait</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, flash_base.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = flash_operation_wait &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_operation_start
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_operation_start
</UL>

<P><STRONG><a name="[6d1]"></a>flash_write_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash_base.o(n_xip_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_operation_start
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_operation_start
</UL>

<P><STRONG><a name="[524]"></a>flash_multi_read</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, flash_wrapper.o(i.flash_multi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = flash_multi_read &rArr; flash_multi_read_word &rArr; flash_multi_read_32bits_operation &rArr; flash_multi_read_32bits_execution &rArr; flash_multi_read_32bits_operation_start &rArr; app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_get_max_block_transfer_size
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_quad_output_read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_quad_io_read
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_dual_output_read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_dual_io_read
</UL>

<P><STRONG><a name="[526]"></a>flash_multi_read_word</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, flash_wrapper.o(i.flash_multi_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = flash_multi_read_word &rArr; flash_multi_read_32bits_operation &rArr; flash_multi_read_32bits_execution &rArr; flash_multi_read_32bits_operation_start &rArr; app_qspi_multi_read_32bits_wrapper &rArr; app_qspi_multi_read_32bits &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read_32bits_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>

<P><STRONG><a name="[52a]"></a>flash_read_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, flash_wrapper.o(i.flash_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = flash_read_byte &rArr; flash_read_operation &rArr; flash_read_execution &rArr; flash_read_operation_start &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>

<P><STRONG><a name="[1a8]"></a>message_app_expand1_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_expand.o(i.message_app_expand1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = message_app_expand1_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>message_app_expand2_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_expand.o(i.message_app_expand2_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = message_app_expand2_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>message_app_expand3_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_expand.o(i.message_app_expand3_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = message_app_expand3_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>app_realcomm_server_baudrate_set_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_expand2_realcomm_server.o(i.app_realcomm_server_baudrate_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = app_realcomm_server_baudrate_set_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_set
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[109]"></a>app_realcomm_server_report_set_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_expand2_realcomm_server.o(i.app_realcomm_server_report_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = app_realcomm_server_report_set_handler &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[10b]"></a>app_realcomm_server_trans_handler</STRONG> (Thumb, 98 bytes, Stack size 296 bytes, app_expand2_realcomm_server.o(i.app_realcomm_server_trans_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = app_realcomm_server_trans_handler &rArr; jmesh_app_expand2_realcomm_send &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_send
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[10a]"></a>app_realcomm_server_transparent_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_expand2_realcomm_server.o(i.app_realcomm_server_transparent_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = app_realcomm_server_transparent_handler &rArr; jmesh_app_expand2_realcomm_send &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_expand2_realcomm_server.o(i.jmesh_app_expand2_realcomm_server_init)
</UL>
<P><STRONG><a name="[121]"></a>light_mode_timer_handler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, light.o(i.light_mode_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = light_mode_timer_handler &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ticks_to_ms
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_net_ticks_get
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_on
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_off
</UL>
<BR>[Address Reference Count : 2]<UL><LI> light.o(i.light_start_mode)
<LI> light.o(i.light_mode_timer_handler)
</UL>
<P><STRONG><a name="[582]"></a>jmesh_pulse_int_poll</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, water_pulse.o(i.jmesh_pulse_int_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = jmesh_pulse_int_poll &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_b_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_2pulse_a_handler
</UL>

<P><STRONG><a name="[146]"></a>water_1pulse_a_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, water_pulse.o(i.water_1pulse_a_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = water_1pulse_a_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_pulse_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_pulse.o(i.water_1pulse_init)
</UL>
<P><STRONG><a name="[132]"></a>water_2pulse_a_delay_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, water_pulse.o(i.water_2pulse_a_delay_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = water_2pulse_a_delay_handler &rArr; io_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_pulse.o(i.os_task_os_pulse_int_e)
</UL>
<P><STRONG><a name="[147]"></a>water_2pulse_a_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, water_pulse.o(i.water_2pulse_a_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = water_2pulse_a_handler &rArr; jmesh_pulse_int_poll &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pulse_int_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_pulse.o(i.water_2pulse_init)
</UL>
<P><STRONG><a name="[133]"></a>water_2pulse_b_delay_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, water_pulse.o(i.water_2pulse_b_delay_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = water_2pulse_b_delay_handler &rArr; io_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_pulse_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_pulse.o(i.os_task_os_pulse_int_e)
</UL>
<P><STRONG><a name="[148]"></a>water_2pulse_b_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, water_pulse.o(i.water_2pulse_b_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = water_2pulse_b_handler &rArr; jmesh_pulse_int_poll &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pulse_int_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_pulse.o(i.water_2pulse_init)
</UL>
<P><STRONG><a name="[149]"></a>water_3pulse_a_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, water_pulse.o(i.water_3pulse_a_handler))
<BR>[Address Reference Count : 1]<UL><LI> water_pulse.o(i.water_3pulse_init)
</UL>
<P><STRONG><a name="[14a]"></a>water_3pulse_b_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, water_pulse.o(i.water_3pulse_b_handler))
<BR>[Address Reference Count : 1]<UL><LI> water_pulse.o(i.water_3pulse_init)
</UL>
<P><STRONG><a name="[14b]"></a>water_3pulse_c_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, water_pulse.o(i.water_3pulse_c_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = water_3pulse_c_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_pulse_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> water_pulse.o(i.water_3pulse_init)
</UL>
<P><STRONG><a name="[1ab]"></a>test_client_exc_status_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, test_app_client.o(i.test_client_exc_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = test_client_exc_status_handler &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_client.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>test_client_read_status_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, test_app_client.o(i.test_client_read_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_client_read_status_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_client.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>test_client_result_status_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, test_app_client.o(i.test_client_result_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = test_client_result_status_handler &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_client.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>test_server_read_handler</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, test_app_server.o(i.test_server_read_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = test_server_read_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_server.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>test_server_result_handler</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, test_app_server.o(i.test_server_result_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = test_server_result_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_write_result
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_read_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_server.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>test_server_result_init_handler</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, test_app_server.o(i.test_server_result_init_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = test_server_result_init_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_result_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_read_result_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_server.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>test_server_start_handler</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, test_app_server.o(i.test_server_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = test_server_start_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_server.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>test_server_stop_handler</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, test_app_server.o(i.test_server_stop_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = test_server_stop_handler &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_access_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_server.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>test_server_write_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, test_app_server.o(i.test_server_write_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = test_server_write_handler &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_app_server.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>meter_client_response_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, meter_client.o(i.meter_client_response_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = meter_client_response_handler &rArr; _gatt_send_buffer_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meter_client.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>meter_server_cmd_send_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, meter_server.o(i.meter_server_cmd_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = meter_server_cmd_send_handler &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meter_server.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>at_cmd_add_appkey</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, configuration_cmd.o(i.at_cmd_add_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = at_cmd_add_appkey &rArr; jmesh_appkey_set &rArr; jmesh_security_cal_aid &rArr; security_k4_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_set
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>at_cmd_add_netkey</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, configuration_cmd.o(i.at_cmd_add_netkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = at_cmd_add_netkey &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_set
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_del
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>at_cmd_add_subscribe</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, configuration_cmd.o(i.at_cmd_add_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = at_cmd_add_subscribe &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_add_filter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_add
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>at_cmd_at_test</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_at_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_at_test &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>at_cmd_bind</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, configuration_cmd.o(i.at_cmd_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = at_cmd_bind &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_app
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>at_cmd_del_subscribe</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, configuration_cmd.o(i.at_cmd_del_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = at_cmd_del_subscribe &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_subscription_list_add_filter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list_remove
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>at_cmd_echo</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_echo &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>at_cmd_end_pwm</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_end_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_end_pwm &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_stop
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>at_cmd_exit_ota</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_exit_ota))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_exit_ota &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>at_cmd_gate_get_history</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_gate_get_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = at_cmd_gate_get_history &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_history
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>at_cmd_gate_get_param</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_gate_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_gate_get_param &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_param
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>at_cmd_gate_list_history</STRONG> (Thumb, 88 bytes, Stack size 120 bytes, configuration_cmd.o(i.at_cmd_gate_list_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = at_cmd_gate_list_history &rArr; _gatt_send_buffer_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_list_history
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>at_cmd_gate_list_node</STRONG> (Thumb, 62 bytes, Stack size 192 bytes, configuration_cmd.o(i.at_cmd_gate_list_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = at_cmd_gate_list_node &rArr; _gatt_send_buffer_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_list_node
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>at_cmd_gate_set_param</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_gate_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_gate_set_param &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_set_param
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>at_cmd_gate_val_by_addr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_gate_val_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_gate_val_by_addr &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_by_addr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>at_cmd_gate_val_by_mac</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_gate_val_by_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = at_cmd_gate_val_by_mac &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_gate_get_by_mac
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>at_cmd_get_addr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_get_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_get_addr &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>at_cmd_get_appkey</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, configuration_cmd.o(i.at_cmd_get_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = at_cmd_get_appkey &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>at_cmd_get_bind</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, configuration_cmd.o(i.at_cmd_get_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = at_cmd_get_bind &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_bind_list
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>at_cmd_get_con_rd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_get_con_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_get_con_rd &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_rd_table_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>at_cmd_get_connected</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, configuration_cmd.o(i.at_cmd_get_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = at_cmd_get_connected &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_interface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>at_cmd_get_dBm</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_get_dBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_get_dBm &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_get_dbm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>at_cmd_get_feature</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, configuration_cmd.o(i.at_cmd_get_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = at_cmd_get_feature &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_relay_feature
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_proxy_feature
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_friend_feature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>at_cmd_get_iv_index</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_get_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_get_iv_index &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>at_cmd_get_lowpower_para</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_get_lowpower_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_get_lowpower_para &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>at_cmd_get_mac</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_get_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = at_cmd_get_mac &rArr; _gatt_send_buffer_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>at_cmd_get_neighbor</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, configuration_cmd.o(i.at_cmd_get_neighbor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = at_cmd_get_neighbor &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_get_neighbor_link_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>at_cmd_get_netkey</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_get_netkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = at_cmd_get_netkey &rArr; _gatt_send_buffer_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>at_cmd_get_para</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, configuration_cmd.o(i.at_cmd_get_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = at_cmd_get_para &rArr; _gatt_send_buffer_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_buffer_cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_buffer_cmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_get
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>at_cmd_get_pwm</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, configuration_cmd.o(i.at_cmd_get_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = at_cmd_get_pwm &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>at_cmd_get_role</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_get_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_get_role &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_read
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>at_cmd_get_route</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, configuration_cmd.o(i.at_cmd_get_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = at_cmd_get_route &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>at_cmd_get_subscribe</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, configuration_cmd.o(i.at_cmd_get_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = at_cmd_get_subscribe &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_subscription_list
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>at_cmd_get_timer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_get_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = at_cmd_get_timer &rArr; jmesh_get_timer_list &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_timer_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>at_cmd_get_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_get_version &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>at_cmd_iopull</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_iopull))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_iopull &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_pull_write
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>at_cmd_ioread</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_ioread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_ioread &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_get
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>at_cmd_iowrite</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_iowrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_iowrite &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>at_cmd_light_mode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_light_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = at_cmd_light_mode &rArr; light_client_mode &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_client_mode
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>at_cmd_light_switch</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_light_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = at_cmd_light_switch &rArr; light_client_point_set &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_client_point_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>at_cmd_onoff_log</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_onoff_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_onoff_log &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>at_cmd_pdu_log</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_pdu_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = at_cmd_pdu_log &rArr; jmesh_pdu_log &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>at_cmd_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_reset &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_platform_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>at_cmd_restore_default</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_restore_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = at_cmd_restore_default &rArr; jmesh_save_init &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_platform_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>at_cmd_send_ascii</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_send_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = at_cmd_send_ascii &rArr; jmesh_app_expand2_realcomm_client_trans &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_realcomm_client_trans
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>at_cmd_send_hex</STRONG> (Thumb, 132 bytes, Stack size 280 bytes, configuration_cmd.o(i.at_cmd_send_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = at_cmd_send_hex &rArr; jmesh_app_expand2_transparent_client_trans &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_transparent_client_trans
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>at_cmd_send_meter_cmd</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, configuration_cmd.o(i.at_cmd_send_meter_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = at_cmd_send_meter_cmd &rArr; meter_client_cmd_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_64507_pick
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meter_client_cmd_send
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>at_cmd_send_trans</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_send_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = at_cmd_send_trans &rArr; jmesh_app_expand2_transparent_client_trans &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_app_expand2_transparent_client_trans
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>at_cmd_set_addr</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_set_addr &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_primary_addr
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_platform_reset
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>at_cmd_set_baud</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_set_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = at_cmd_set_baud &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_baudrate_set
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baudrate_to_enum
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>at_cmd_set_dBm</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_set_dBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_set_dBm &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_set_dbm
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_platform_reset
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>at_cmd_set_feature</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_set_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = at_cmd_set_feature &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_enable
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_scan_disable
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_relay_feature
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_proxy_feature
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_lowpower_feature
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_friend_feature
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_start
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_uninit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnect_all
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>at_cmd_set_gpio</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_set_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_set_gpio &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gpio_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>at_cmd_set_iv_index</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_set_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_set_iv_index &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_set_iv_index
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>at_cmd_set_light_mode</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, configuration_cmd.o(i.at_cmd_set_light_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = at_cmd_set_light_mode &rArr; light_client_mode_set &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_client_mode_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_ms_to_ticks
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>at_cmd_set_lowpower_para</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_set_lowpower_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = at_cmd_set_lowpower_para &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_save_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>at_cmd_set_mac</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_set_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = at_cmd_set_mac &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart_send_over
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mac_set
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_platform_reset
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>at_cmd_set_role</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_set_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = at_cmd_set_role &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_device_roles
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>at_cmd_start_ota</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_start_ota))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = at_cmd_start_ota &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_stop
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>at_cmd_start_pwm</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_start_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = at_cmd_start_pwm &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pwm_start
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>at_cmd_test_app_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_test_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = at_cmd_test_app_init &rArr; test_client_result_init &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_result_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>at_cmd_test_app_result</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_test_app_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = at_cmd_test_app_result &rArr; test_client_get_result &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_get_result
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>at_cmd_test_app_start</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_test_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = at_cmd_test_app_start &rArr; test_client_start &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_start
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>at_cmd_test_app_stop</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_test_app_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = at_cmd_test_app_stop &rArr; test_client_stop &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_client_stop
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>at_cmd_unbind</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, configuration_cmd.o(i.at_cmd_unbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = at_cmd_unbind &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_vendor_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_get_by_sig_id
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_by_index
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_appkey_get_by_key_index
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_model_unbind_app
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>at_cmd_update_iv_index</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_update_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = at_cmd_update_iv_index &rArr; _gatt_send_cmd &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_stop_update_iv_index
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_start_update_iv_index
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>at_cmd_water_get_mac</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_water_get_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = at_cmd_water_get_mac &rArr; water_client_read_mac &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_mac
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>at_cmd_water_get_param</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_water_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = at_cmd_water_get_param &rArr; water_client_read_param &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_param
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>at_cmd_water_get_pul_pin</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_water_get_pul_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = at_cmd_water_get_pul_pin &rArr; water_client_get_pulse_pin &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_pulse_pin
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>at_cmd_water_get_report</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_water_get_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = at_cmd_water_get_report &rArr; water_client_get_report_para &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_report_para
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>at_cmd_water_get_type</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_water_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = at_cmd_water_get_type &rArr; water_client_get_type &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_type
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>at_cmd_water_get_unit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_water_get_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = at_cmd_water_get_unit &rArr; water_client_get_value_unit &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_value_unit
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>at_cmd_water_get_val_pin</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, configuration_cmd.o(i.at_cmd_water_get_val_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = at_cmd_water_get_val_pin &rArr; water_client_get_valve_pin &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve_pin
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>at_cmd_water_get_value</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_water_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = at_cmd_water_get_value &rArr; water_client_read_value &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_read_value
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>at_cmd_water_get_valve</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_water_get_valve))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = at_cmd_water_get_valve &rArr; water_client_get_valve &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_get_valve
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>at_cmd_water_set_mac</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_water_set_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = at_cmd_water_set_mac &rArr; water_client_set_mac &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_mac
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>at_cmd_water_set_param</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, configuration_cmd.o(i.at_cmd_water_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = at_cmd_water_set_param &rArr; water_client_set_param &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_param
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>at_cmd_water_set_pul_pin</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_water_set_pul_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = at_cmd_water_set_pul_pin &rArr; water_client_set_pulse_pin &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_pulse_pin
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>at_cmd_water_set_report</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_water_set_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = at_cmd_water_set_report &rArr; water_client_set_report_para &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_report_para
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>at_cmd_water_set_type</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_water_set_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = at_cmd_water_set_type &rArr; water_client_set_type &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_type
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>at_cmd_water_set_unit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_water_set_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = at_cmd_water_set_unit &rArr; water_client_set_value_unit &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_value_unit
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>at_cmd_water_set_val_pin</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_water_set_val_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = at_cmd_water_set_val_pin &rArr; water_client_set_valve_pin &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve_pin
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>at_cmd_water_set_value</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, configuration_cmd.o(i.at_cmd_water_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = at_cmd_water_set_value &rArr; water_client_write_value &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_write_value
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>at_cmd_water_set_valve</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, configuration_cmd.o(i.at_cmd_water_set_valve))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = at_cmd_water_set_valve &rArr; water_client_set_valve &rArr; jmesh_app_expand2_send &rArr; jmesh_access_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gatt_send_cmd
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;water_client_set_valve
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>friend_offer</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, jmesh_friend.o(i.friend_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = friend_offer &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_get_rssi
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_friend.o(i.friend_request_handler)
</UL>
<P><STRONG><a name="[52f]"></a>friend_request_handler</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, jmesh_friend.o(i.friend_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = friend_request_handler &rArr; jmesh_friendship_free &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_new
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friendship_free
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_get_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
</UL>

<P><STRONG><a name="[531]"></a>friend_subscription_list_confirm</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, jmesh_friend.o(i.friend_subscription_list_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = friend_subscription_list_confirm &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_recv
</UL>

<P><STRONG><a name="[532]"></a>friend_update</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, jmesh_friend.o(i.friend_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = friend_update &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_update_flag
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_friend_connected
</UL>

<P><STRONG><a name="[581]"></a>lowpower_offer_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jmesh_lowpower.o(i.lowpower_offer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lowpower_offer_handler &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
</UL>

<P><STRONG><a name="[117]"></a>lowpower_poll</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, jmesh_lowpower.o(i.lowpower_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = lowpower_poll &rArr; lowpower_request &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_choose_offer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_lowpower.o(i.jmesh_lowpower_sleep)
</UL>
<P><STRONG><a name="[12a]"></a>lowpower_poll_timeout_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.lowpower_poll_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = lowpower_poll_timeout_handler &rArr; lowpower_request &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_sleep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_lowpower.o(i.lowpower_poll)
</UL>
<P><STRONG><a name="[116]"></a>lowpower_request</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, jmesh_lowpower.o(i.lowpower_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = lowpower_request &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_element_get_num
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_secure_beacon_start
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_cache_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_update_timeout_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_subscription_list_update_timeout_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll_timeout_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_poll
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jmesh_lowpower.o(i.jmesh_lowpower_init)
<LI> jmesh_lowpower.o(i.lowpower_choose_offer)
</UL>
<P><STRONG><a name="[57f]"></a>lowpower_subscription_list_confirm_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, jmesh_lowpower.o(i.lowpower_subscription_list_confirm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lowpower_subscription_list_confirm_handler &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_recv
</UL>

<P><STRONG><a name="[57e]"></a>lowpower_subscription_list_update</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, jmesh_lowpower.o(i.lowpower_subscription_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = lowpower_subscription_list_update &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_interface_get_filter
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_control_send
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lowpower_connected_callback
</UL>

<P><STRONG><a name="[12e]"></a>lowpower_subscription_list_update_timeout_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.lowpower_subscription_list_update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = lowpower_subscription_list_update_timeout_handler &rArr; lowpower_request &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_lowpower.o(i.lowpower_subscription_list_update)
</UL>
<P><STRONG><a name="[12d]"></a>lowpower_update_timeout_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jmesh_lowpower.o(i.lowpower_update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = lowpower_update_timeout_handler &rArr; lowpower_request &rArr; jmesh_control_send &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_request
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_lowpower.o(i.lowpower_subscription_list_confirm_handler)
</UL>
<P><STRONG><a name="[11]"></a>lower_segment_cache_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, jmesh_segment.o(i.lower_segment_cache_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lower_segment_cache_free &rArr; jmesh_pdu_free &rArr; os_memb_free &rArr; jmesh_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_lower_segment_recv_ack
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_send_finder
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_read_finder
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_retransmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jmesh_segment.o(i.jmesh_resegment_recv)
<LI> jmesh_segment.o(i.lower_resegment_timer_handler)
</UL>
<P><STRONG><a name="[16]"></a>lower_segment_retransmit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jmesh_segment.o(i.lower_segment_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = lower_segment_retransmit &rArr; lower_segment_transmit &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_transmit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_cache_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_segment.o(i.jmesh_segment_send)
</UL>
<P><STRONG><a name="[3df]"></a>lower_segment_send_ack</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, jmesh_segment.o(i.lower_segment_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = lower_segment_send_ack &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_addr_get_type
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_TTL_get_default
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_resegment_timer_handler
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_deny_ack
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
</UL>

<P><STRONG><a name="[3de]"></a>lower_segment_send_deny_ack</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jmesh_segment.o(i.lower_segment_send_deny_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = lower_segment_send_deny_ack &rArr; lower_segment_send_ack &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_resegment_recv
</UL>

<P><STRONG><a name="[403]"></a>lower_segment_transmit</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, jmesh_segment.o(i.lower_segment_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = lower_segment_transmit &rArr; jmesh_network_send &rArr;  jmesh_lower_recv (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lower_segment_retransmit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_segment_send
</UL>

<P><STRONG><a name="[3c2]"></a>jmesh_netkey_load</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, jmesh_netkey.o(i.jmesh_netkey_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_netid
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_master_encryption_and_privacy_keys
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_identity_key
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_security_cal_beacon_key
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_update
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_set
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_init
</UL>

<P><STRONG><a name="[3cc]"></a>network_obfuscation</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, jmesh_network.o(i.network_obfuscation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = network_obfuscation &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_encryption
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[3cd]"></a>network_plain_cache</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jmesh_network.o(i.network_plain_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = network_plain_cache &rArr; os_queue_is_in &rArr; os_queue_query
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_push
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_recv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_send
</UL>

<P><STRONG><a name="[15]"></a>send_secure_beacon</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, jmesh_secure_beacon.o(i.send_secure_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = send_secure_beacon &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_new
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_pdu_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_index
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_iv_update_flag
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_adv_send_beacon
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_get_by_index
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_AES_CMAC
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jmesh_secure_beacon.o(i.jmesh_secure_beacon_start)
<LI> jmesh_secure_beacon.o(i.send_secure_beacon)
</UL>
<P><STRONG><a name="[d]"></a>jmesh_gatt_link_timer_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jmesh_gatt.o(i.jmesh_gatt_link_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = jmesh_gatt_link_timer_handler &rArr; os_timer_event_restart &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_gatt.o(i.jmesh_gatt_init)
</UL>
<P><STRONG><a name="[38d]"></a>jmesh_gatt_multilink_disconnect_old</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, jmesh_gatt.o(i.jmesh_gatt_multilink_disconnect_old))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = jmesh_gatt_multilink_disconnect_old &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_connected
</UL>

<P><STRONG><a name="[b]"></a>attention_timeout_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jmesh_provisioning.o(i.attention_timeout_handler))
<BR>[Address Reference Count : 1]<UL><LI> jmesh_provisioning.o(i.do_authentication_action)
</UL>
<P><STRONG><a name="[33e]"></a>gatt_provisioning_confirmation</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_confirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = gatt_provisioning_confirmation &rArr; calculate_confirmation &rArr; security_k1_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_confirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_confirmation_handler
</UL>

<P><STRONG><a name="[1f3]"></a>gatt_provisioning_confirmation_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_confirmation_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = gatt_provisioning_confirmation_handler &rArr; gatt_provisioning_confirmation &rArr; calculate_confirmation &rArr; security_k1_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_confirmation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_provisioning_server.o(.data)
</UL>
<P><STRONG><a name="[1f5]"></a>gatt_provisioning_data_handler</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = gatt_provisioning_data_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_set_primary_addr
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_test_set_iv_index
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_netkey_state_set
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_neighbor_add
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_network_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt_provision_data
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_clear
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_reset_progress
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_failed
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_device_new
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_provisioning_server.o(.data)
</UL>
<P><STRONG><a name="[344]"></a>gatt_provisioning_failed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = gatt_provisioning_failed &rArr; prov_reset_progress &rArr; os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_primary_addr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_reset_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_provision_recv_handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_hold_timeout_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_random_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_publickey
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
</UL>

<P><STRONG><a name="[1f6]"></a>gatt_provisioning_failed_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_failed_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = gatt_provisioning_failed_handler &rArr; prov_check_progress &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_check_progress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_provisioning_server.o(.data)
</UL>
<P><STRONG><a name="[1f0]"></a>gatt_provisioning_invite_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_invite_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gatt_provisioning_invite_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_provisioning_server.o(.data)
</UL>
<P><STRONG><a name="[347]"></a>gatt_provisioning_publickey</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_publickey))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = gatt_provisioning_publickey &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_authentication_action
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_failed
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_secp256r1
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_publickey_handler
</UL>

<P><STRONG><a name="[1f2]"></a>gatt_provisioning_publickey_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_publickey_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = gatt_provisioning_publickey_handler &rArr; gatt_provisioning_publickey &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_publickey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_provisioning_server.o(.data)
</UL>
<P><STRONG><a name="[1f4]"></a>gatt_provisioning_random_handler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_random_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = gatt_provisioning_random_handler &rArr; calculate_provision_key &rArr; security_k1_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_confirmation
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_provision_key
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_provisioning_server.o(.data)
</UL>
<P><STRONG><a name="[1f1]"></a>gatt_provisioning_start_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.gatt_provisioning_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gatt_provisioning_start_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_provisioning_server.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>link_hold_timeout_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.link_hold_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = link_hold_timeout_handler &rArr; gatt_provisioning_failed &rArr; prov_reset_progress &rArr; os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_reset_progress
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmesh_provisioning_server.o(i.prov_check_progress)
</UL>
<P><STRONG><a name="[346]"></a>prov_check_progress</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.prov_check_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prov_check_progress &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_provision_recv_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_failed_handler
</UL>

<P><STRONG><a name="[345]"></a>prov_reset_progress</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jmesh_provisioning_server.o(i.prov_reset_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = prov_reset_progress &rArr; os_timer_event_remove &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_hold_timeout_handler
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_failed
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_provisioning_data_handler
</UL>

<P><STRONG><a name="[fe]"></a>jmesh_ble_adapter_timerflow</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_ble_adapter_timerflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_ble_adapter_timerflow &rArr; jmesh_ble_cancel &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bx2400_ble.o(i.jmesh_ble_canceled_callback)
<LI> bx2400_ble.o(i.jmesh_connect_start)
<LI> bx2400_ble.o(i.jmesh_adv_send)
</UL>
<P><STRONG><a name="[114]"></a>jmesh_timer_cancel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bx2400_ble.o(i.jmesh_timer_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = jmesh_timer_cancel &rArr; jmesh_ble_cancel &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bx2400_ble.o(i.jmesh_ble_cancel_callback)
</UL>
<P><STRONG><a name="[11e]"></a>jmesh_wdt_int_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bx2400_system.o(i.jmesh_wdt_int_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = jmesh_wdt_int_callback &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bx2400_system.o(i.jmesh_wdt_init)
</UL>
<P><STRONG><a name="[11c]"></a>os_uart0_read_callback</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bx2400_uart.o(i.os_uart0_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_uart0_read_callback &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_poll
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bx2400_uart.o(i.jmesh_uart_start)
<LI> bx2400_uart.o(i.os_uart0_read_callback)
</UL>
<P><STRONG><a name="[11d]"></a>os_uart0_timer_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bx2400_uart.o(i.os_uart0_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112<LI>Call Chain = os_uart0_timer_handler &rArr; jmesh_uart_recv_callback &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bx2400_uart.o(i.jmesh_uart_start)
</UL>
<P><STRONG><a name="[11a]"></a>os_uart1_read_callback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bx2400_uart.o(i.os_uart1_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = os_uart1_read_callback &rArr; os_uart1_timer_handler &rArr; jmesh_uart_recv_callback &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart1_timer_handler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bx2400_uart.o(i.jmesh_uart_start)
<LI> bx2400_uart.o(i.os_uart1_read_callback)
<LI> bx2400_uart.o(i.os_uart1_timer_handler)
</UL>
<P><STRONG><a name="[11b]"></a>os_uart1_timer_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bx2400_uart.o(i.os_uart1_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112<LI>Call Chain = os_uart1_timer_handler &rArr; jmesh_uart_recv_callback &rArr; APP_BD_protocol_handler &rArr; APP_BD_B102_handler &rArr; jmesh_netkey_state_set &rArr; jmesh_netkey_load &rArr; jmesh_security_cal_master_encryption_and_privacy_keys &rArr; security_k2_derivation &rArr; security_AES_CMAC &rArr; GenerateMAC &rArr; aes128_encryption &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_uart_recv_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_uart1_read_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bx2400_uart.o(i.jmesh_uart_start)
</UL>
<P><STRONG><a name="[421]"></a>os_task_call</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, os_core.o(i.os_task_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_task_call
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_do_poll
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_do_event
</UL>

<P><STRONG><a name="[43d]"></a>os_timer_event_add</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_timer_event.o(i.os_timer_event_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_poll
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_unlock
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_restart
</UL>

<P><STRONG><a name="[474]"></a>EccPoint_compute_public_key</STRONG> (Thumb, 94 bytes, Stack size 96 bytes, uecc.o(i.EccPoint_compute_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[476]"></a>EccPoint_mult</STRONG> (Thumb, 332 bytes, Stack size 224 bytes, uecc.o(i.EccPoint_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[47c]"></a>XYcZ_add</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, uecc.o(i.XYcZ_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = XYcZ_add &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[47b]"></a>XYcZ_addC</STRONG> (Thumb, 272 bytes, Stack size 136 bytes, uecc.o(i.XYcZ_addC))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = XYcZ_addC &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[479]"></a>XYcZ_initial_double</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, uecc.o(i.XYcZ_initial_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = XYcZ_initial_double &rArr; apply_z &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[480]"></a>apply_z</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, uecc.o(i.apply_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = apply_z &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[1fd]"></a>default_RNG</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uecc.o(i.default_RNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = default_RNG
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.data)
</UL>
<P><STRONG><a name="[1b6]"></a>double_jacobian_default</STRONG> (Thumb, 334 bytes, Stack size 104 bytes, uecc.o(i.double_jacobian_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = double_jacobian_default &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>double_jacobian_secp256k1</STRONG> (Thumb, 240 bytes, Stack size 104 bytes, uecc.o(i.double_jacobian_secp256k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = double_jacobian_secp256k1 &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>mod_sqrt_default</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, uecc.o(i.mod_sqrt_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mod_sqrt_default &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>mod_sqrt_secp224r1</STRONG> (Thumb, 138 bytes, Stack size 200 bytes, uecc.o(i.mod_sqrt_secp224r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mod_sqrt_secp224r1 &rArr; mod_sqrt_secp224r1_rp &rArr; mod_sqrt_secp224r1_rm &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[5b0]"></a>mod_sqrt_secp224r1_rm</STRONG> (Thumb, 164 bytes, Stack size 96 bytes, uecc.o(i.mod_sqrt_secp224r1_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mod_sqrt_secp224r1_rm &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp
</UL>

<P><STRONG><a name="[5ae]"></a>mod_sqrt_secp224r1_rp</STRONG> (Thumb, 194 bytes, Stack size 136 bytes, uecc.o(i.mod_sqrt_secp224r1_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mod_sqrt_secp224r1_rp &rArr; mod_sqrt_secp224r1_rm &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
</UL>

<P><STRONG><a name="[5af]"></a>mod_sqrt_secp224r1_rs</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, uecc.o(i.mod_sqrt_secp224r1_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mod_sqrt_secp224r1_rs &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
</UL>

<P><STRONG><a name="[5bb]"></a>muladd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uecc.o(i.muladd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>

<P><STRONG><a name="[5c5]"></a>omega_mult_secp160r1</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uecc.o(i.omega_mult_secp160r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = omega_mult_secp160r1 &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
</UL>

<P><STRONG><a name="[5c6]"></a>omega_mult_secp256k1</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, uecc.o(i.omega_mult_secp256k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = omega_mult_secp256k1 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
</UL>

<P><STRONG><a name="[475]"></a>regularize_k</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, uecc.o(i.regularize_k))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = regularize_k &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[646]"></a>uECC_generate_random_int</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, uecc.o(i.uECC_generate_random_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uECC_generate_random_int &rArr; uECC_vli_cmp &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[51e]"></a>uECC_vli_add</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, uecc.o(i.uECC_vli_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp256k1
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[649]"></a>uECC_vli_bytesToNative</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uecc.o(i.uECC_vli_bytesToNative))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uECC_vli_bytesToNative &rArr; uECC_vli_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[498]"></a>uECC_vli_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uecc.o(i.uECC_vli_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
</UL>

<P><STRONG><a name="[647]"></a>uECC_vli_cmp</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, uecc.o(i.uECC_vli_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uECC_vli_cmp &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
</UL>

<P><STRONG><a name="[64b]"></a>uECC_vli_cmp_unsafe</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uecc.o(i.uECC_vli_cmp_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
</UL>

<P><STRONG><a name="[477]"></a>uECC_vli_isZero</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uecc.o(i.uECC_vli_isZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[497]"></a>uECC_vli_modAdd</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uecc.o(i.uECC_vli_modAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uECC_vli_modAdd &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_secp256k1
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>

<P><STRONG><a name="[47f]"></a>uECC_vli_modInv</STRONG> (Thumb, 272 bytes, Stack size 152 bytes, uecc.o(i.uECC_vli_modInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = uECC_vli_modInv &rArr; vli_modInv_update &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[47e]"></a>uECC_vli_modMult_fast</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, uecc.o(i.uECC_vli_modMult_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_secp256k1
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[496]"></a>uECC_vli_modSquare_fast</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uecc.o(i.uECC_vli_modSquare_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_secp256k1
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
</UL>

<P><STRONG><a name="[47d]"></a>uECC_vli_modSub</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uecc.o(i.uECC_vli_modSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uECC_vli_modSub &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[64d]"></a>uECC_vli_mult</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, uecc.o(i.uECC_vli_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muladd
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>

<P><STRONG><a name="[648]"></a>uECC_vli_nativeToBytes</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, uecc.o(i.uECC_vli_nativeToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uECC_vli_nativeToBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[5ad]"></a>uECC_vli_numBits</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uecc.o(i.uECC_vli_numBits))
<BR><BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
</UL>

<P><STRONG><a name="[51f]"></a>uECC_vli_rshift1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uecc.o(i.uECC_vli_rshift1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_rshift1
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[478]"></a>uECC_vli_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, uecc.o(i.uECC_vli_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uECC_vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[64a]"></a>uECC_vli_sub</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, uecc.o(i.uECC_vli_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uECC_vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
</UL>

<P><STRONG><a name="[47a]"></a>uECC_vli_testBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uecc.o(i.uECC_vli_testBit))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[1b9]"></a>vli_mmod_fast_secp160r1</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, uecc.o(i.vli_mmod_fast_secp160r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vli_mmod_fast_secp160r1 &rArr; omega_mult_secp160r1 &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>vli_mmod_fast_secp192r1</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, uecc.o(i.vli_mmod_fast_secp192r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vli_mmod_fast_secp192r1 &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>vli_mmod_fast_secp224r1</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, uecc.o(i.vli_mmod_fast_secp224r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vli_mmod_fast_secp224r1 &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>vli_mmod_fast_secp256k1</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, uecc.o(i.vli_mmod_fast_secp256k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vli_mmod_fast_secp256k1 &rArr; omega_mult_secp256k1 &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp256k1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>vli_mmod_fast_secp256r1</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, uecc.o(i.vli_mmod_fast_secp256r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = vli_mmod_fast_secp256r1 &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[64c]"></a>vli_modInv_update</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uecc.o(i.vli_modInv_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vli_modInv_update &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
</UL>

<P><STRONG><a name="[1b8]"></a>x_side_default</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, uecc.o(i.x_side_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = x_side_default &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>x_side_secp256k1</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, uecc.o(i.x_side_secp256k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = x_side_secp256k1 &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>ble_adv_report_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_adv_report_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = ble_adv_report_handler &rArr; jmesh_ble_recv_adv_callback &rArr; jmesh_adv_recv &rArr; jmesh_beacon_handler &rArr; jmesh_routing_beacon_handler &rArr; friend_poll_handler &rArr; jmesh_routing_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_recv_adv_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>ble_connect_req_handler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_adapt.o(i.ble_connect_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = ble_connect_req_handler &rArr; jmesh_ble_gatt_connected_callback &rArr; jmesh_gatt_connected &rArr; jmesh_gatt_multilink_disconnect_old &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_stop_cancel
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_status_switch
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_status
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_connected_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>ble_default_handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ble_adapt.o(i.ble_default_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_default_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>ble_device_ready_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_device_ready_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ble_device_ready_handler &rArr; jmesh_ble_reset &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>ble_disc_char_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_disc_char_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_disc_char_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>ble_disc_desc_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_disc_desc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_disc_desc_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>ble_disc_incl_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_disc_incl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_disc_incl_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>ble_disconnect_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_disconnect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = ble_disconnect_handler &rArr; jmesh_ble_gatt_disconnected_callback &rArr; jmesh_gatt_disconnected &rArr; _print_buffer &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnected_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>ble_gapc_bond_ind_handler</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, ble_adapt.o(i.ble_gapc_bond_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ble_gapc_bond_ind_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>ble_gapc_bond_req_ind_handler</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ble_adapt.o(i.ble_gapc_bond_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ble_gapc_bond_req_ind_handler &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>ble_gapc_cmp_evt_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_adapt.o(i.ble_gapc_cmp_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>ble_gapc_connection_confirm_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_gapc_connection_confirm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_gapc_connection_confirm_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>ble_gapc_update_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_adapt.o(i.ble_gapc_update_handler))
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>ble_gapm_cmp_evt_handler</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_gapm_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ble_gapm_cmp_evt_handler &rArr; jmesh_ble_cancel_callback &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_canceled_callback
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_cancel_callback
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_add_prov_svc
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>ble_gattc_cmp_evt_handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_gattc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = ble_gattc_cmp_evt_handler &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnect
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>ble_mtu_change_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_mtu_change_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ble_mtu_change_handler &rArr; jmesh_ble_exchange_mtu_callback &rArr; jmesh_gatt_set_mtu &rArr; jmesh_lowpower_connected &rArr; os_timer_event_set &rArr; os_timer_event_add &rArr; os_task_poll &rArr; jmesh_task_wakeup &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_exchange_mtu_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>ble_param_update_req_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_param_update_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ble_param_update_req_handler &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>ble_sdp_svc_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_adapt.o(i.ble_sdp_svc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_sdp_svc_handler &rArr; jmesh_ble_disc_svc_callback &rArr; jmesh_gatt_set_svc_instance &rArr; jmesh_gatt_get_link_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_disc_svc_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>gapc_le_pkt_size_ind_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_adapt.o(i.gapc_le_pkt_size_ind_handler))
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_adapt.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = gattc_read_req_ind_handler &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_adapt.o(i.gattc_write_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = gattc_write_req_ind_handler &rArr; jmesh_ble_gatt_writed_callback &rArr; jmesh_gatt_recv &rArr; jmesh_app_recv_handler &rArr; jmesh_proxy_recv &rArr; jmesh_interface_recv &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_writed_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>osapp_bxotas_finish_ind_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_adapt.o(i.osapp_bxotas_finish_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = osapp_bxotas_finish_ind_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>osapp_bxotas_start_req_ind_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_adapt.o(i.osapp_bxotas_start_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = osapp_bxotas_start_req_ind_handler &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>osapp_gapc_get_dev_info_req_ind_handler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_adapt.o(i.osapp_gapc_get_dev_info_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = osapp_gapc_get_dev_info_req_ind_handler &rArr; os_ahi_msg_send &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ahi_msg_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>osapp_gapm_profile_added_ind_handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_adapt.o(i.osapp_gapm_profile_added_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = osapp_gapm_profile_added_ind_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>osapp_gapm_use_enc_block_ind_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_adapt.o(i.osapp_gapm_use_enc_block_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = osapp_gapm_use_enc_block_ind_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>osapp_gattc_event_ind_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_adapt.o(i.osapp_gattc_event_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = osapp_gattc_event_ind_handler &rArr; jmesh_ble_gatt_notified_callback &rArr; jmesh_gatt_recv &rArr; jmesh_app_recv_handler &rArr; jmesh_proxy_recv &rArr; jmesh_interface_recv &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_notified_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>osapp_gattm_add_svc_rsp_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ble_adapt.o(i.osapp_gattm_add_svc_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = osapp_gattm_add_svc_rsp_handler &rArr; mesh_task_create &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_log_print
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_set_local_svc_ins
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_adapt.o(.constdata)
</UL>
<P><STRONG><a name="[13]"></a>routing_beacon_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jmesh_routing_beacon.o(i.routing_beacon_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = routing_beacon_send &rArr; jmesh_routing_beacon_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jmesh_routing_beacon.o(i.routing_beacon_send)
<LI> jmesh_routing_beacon.o(i.jmesh_routing_beacon_start)
</UL>
<P><STRONG><a name="[44c]"></a>routing_neighbor_compare</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, jmesh_routing_neighbor.o(i.routing_neighbor_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = routing_neighbor_compare &rArr; jmesh_random_get
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_get_neighbor_link_num
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_route_get_by_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_maintain
</UL>

<P><STRONG><a name="[14]"></a>routing_neighbor_maintain</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, jmesh_routing_neighbor.o(i.routing_neighbor_maintain))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = routing_neighbor_maintain &rArr; jmesh_routing_beacon_link_require &rArr; _print &rArr; JMESH_DEBUG_SEND_TO_CKQ &rArr; jmesh_proxy_send &rArr; jmesh_adapter_gatt_send &rArr;  _print (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_event_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_seconds
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_random_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_get_lowpower_feature
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_routing_beacon_link_require
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_addr
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_ble_gatt_disconnect
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_non_lowp_link_num
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jmesh_gatt_get_link_by_mac
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_flow
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routing_neighbor_compare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jmesh_routing_neighbor.o(i.jmesh_routing_neighbor_init)
<LI> jmesh_routing_neighbor.o(i.routing_neighbor_maintain)
</UL>
<P><STRONG><a name="[442]"></a>check_cs</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, protocol_mx188.o(i.check_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
</UL>

<P><STRONG><a name="[441]"></a>check_meter_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, protocol_mx188.o(i.check_meter_type))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
</UL>

<P><STRONG><a name="[335]"></a>fetch_routers</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, protocol_mx188.o(i.fetch_routers))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fetch_routers &rArr; get_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
</UL>

<P><STRONG><a name="[336]"></a>get_addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, protocol_mx188.o(i.get_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_routers
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mx188_parse2
</UL>

<P><STRONG><a name="[49d]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[49b]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[4a1]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a0]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f4]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
